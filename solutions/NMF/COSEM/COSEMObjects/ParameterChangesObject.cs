using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the ParameterChangesObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Pa" +
        "rameterChangesObject")]
    public partial class ParameterChangesObject : Data, IParameterChangesObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NumberConfigProgramChanges property
        /// </summary>
        private Nullable<int> _numberConfigProgramChanges;
        
        private static Lazy<ITypedElement> _numberConfigProgramChangesAttribute = new Lazy<ITypedElement>(RetrieveNumberConfigProgramChangesAttribute);
        
        /// <summary>
        /// The backing field for the DateLastConfigChange property
        /// </summary>
        private Nullable<DateTime> _dateLastConfigChange;
        
        private static Lazy<ITypedElement> _dateLastConfigChangeAttribute = new Lazy<ITypedElement>(RetrieveDateLastConfigChangeAttribute);
        
        /// <summary>
        /// The backing field for the DateLastSwitchChange property
        /// </summary>
        private Nullable<DateTime> _dateLastSwitchChange;
        
        private static Lazy<ITypedElement> _dateLastSwitchChangeAttribute = new Lazy<ITypedElement>(RetrieveDateLastSwitchChangeAttribute);
        
        /// <summary>
        /// The backing field for the DateLastRippleControlChange property
        /// </summary>
        private Nullable<DateTime> _dateLastRippleControlChange;
        
        private static Lazy<ITypedElement> _dateLastRippleControlChangeAttribute = new Lazy<ITypedElement>(RetrieveDateLastRippleControlChangeAttribute);
        
        /// <summary>
        /// The backing field for the StatusSecuritySwitches property
        /// </summary>
        private string _statusSecuritySwitches;
        
        private static Lazy<ITypedElement> _statusSecuritySwitchesAttribute = new Lazy<ITypedElement>(RetrieveStatusSecuritySwitchesAttribute);
        
        /// <summary>
        /// The backing field for the DateLastCalibration property
        /// </summary>
        private Nullable<DateTime> _dateLastCalibration;
        
        private static Lazy<ITypedElement> _dateLastCalibrationAttribute = new Lazy<ITypedElement>(RetrieveDateLastCalibrationAttribute);
        
        /// <summary>
        /// The backing field for the DateNextConfig property
        /// </summary>
        private Nullable<DateTime> _dateNextConfig;
        
        private static Lazy<ITypedElement> _dateNextConfigAttribute = new Lazy<ITypedElement>(RetrieveDateNextConfigAttribute);
        
        /// <summary>
        /// The backing field for the DateActivationPassivCalendar property
        /// </summary>
        private Nullable<DateTime> _dateActivationPassivCalendar;
        
        private static Lazy<ITypedElement> _dateActivationPassivCalendarAttribute = new Lazy<ITypedElement>(RetrieveDateActivationPassivCalendarAttribute);
        
        /// <summary>
        /// The backing field for the NumberProtectedConfigChanges property
        /// </summary>
        private Nullable<int> _numberProtectedConfigChanges;
        
        private static Lazy<ITypedElement> _numberProtectedConfigChangesAttribute = new Lazy<ITypedElement>(RetrieveNumberProtectedConfigChangesAttribute);
        
        /// <summary>
        /// The backing field for the DateLastProtectedConfigChange property
        /// </summary>
        private Nullable<DateTime> _dateLastProtectedConfigChange;
        
        private static Lazy<ITypedElement> _dateLastProtectedConfigChangeAttribute = new Lazy<ITypedElement>(RetrieveDateLastProtectedConfigChangeAttribute);
        
        /// <summary>
        /// The backing field for the DateLastClockSynch property
        /// </summary>
        private Nullable<DateTime> _dateLastClockSynch;
        
        private static Lazy<ITypedElement> _dateLastClockSynchAttribute = new Lazy<ITypedElement>(RetrieveDateLastClockSynchAttribute);
        
        /// <summary>
        /// The backing field for the DateLastFirmwareActivation property
        /// </summary>
        private Nullable<DateTime> _dateLastFirmwareActivation;
        
        private static Lazy<ITypedElement> _dateLastFirmwareActivationAttribute = new Lazy<ITypedElement>(RetrieveDateLastFirmwareActivationAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The NumberConfigProgramChanges property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> NumberConfigProgramChanges
        {
            get
            {
                return this._numberConfigProgramChanges;
            }
            set
            {
                if ((this._numberConfigProgramChanges != value))
                {
                    Nullable<int> old = this._numberConfigProgramChanges;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberConfigProgramChangesChanging(e);
                    this.OnPropertyChanging("NumberConfigProgramChanges", e, _numberConfigProgramChangesAttribute);
                    this._numberConfigProgramChanges = value;
                    this.OnNumberConfigProgramChangesChanged(e);
                    this.OnPropertyChanged("NumberConfigProgramChanges", e, _numberConfigProgramChangesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastConfigChange property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DateTime> DateLastConfigChange
        {
            get
            {
                return this._dateLastConfigChange;
            }
            set
            {
                if ((this._dateLastConfigChange != value))
                {
                    Nullable<DateTime> old = this._dateLastConfigChange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastConfigChangeChanging(e);
                    this.OnPropertyChanging("DateLastConfigChange", e, _dateLastConfigChangeAttribute);
                    this._dateLastConfigChange = value;
                    this.OnDateLastConfigChangeChanged(e);
                    this.OnPropertyChanged("DateLastConfigChange", e, _dateLastConfigChangeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastSwitchChange property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DateTime> DateLastSwitchChange
        {
            get
            {
                return this._dateLastSwitchChange;
            }
            set
            {
                if ((this._dateLastSwitchChange != value))
                {
                    Nullable<DateTime> old = this._dateLastSwitchChange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastSwitchChangeChanging(e);
                    this.OnPropertyChanging("DateLastSwitchChange", e, _dateLastSwitchChangeAttribute);
                    this._dateLastSwitchChange = value;
                    this.OnDateLastSwitchChangeChanged(e);
                    this.OnPropertyChanged("DateLastSwitchChange", e, _dateLastSwitchChangeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastRippleControlChange property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DateTime> DateLastRippleControlChange
        {
            get
            {
                return this._dateLastRippleControlChange;
            }
            set
            {
                if ((this._dateLastRippleControlChange != value))
                {
                    Nullable<DateTime> old = this._dateLastRippleControlChange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastRippleControlChangeChanging(e);
                    this.OnPropertyChanging("DateLastRippleControlChange", e, _dateLastRippleControlChangeAttribute);
                    this._dateLastRippleControlChange = value;
                    this.OnDateLastRippleControlChangeChanged(e);
                    this.OnPropertyChanged("DateLastRippleControlChange", e, _dateLastRippleControlChangeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The StatusSecuritySwitches property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string StatusSecuritySwitches
        {
            get
            {
                return this._statusSecuritySwitches;
            }
            set
            {
                if ((this._statusSecuritySwitches != value))
                {
                    string old = this._statusSecuritySwitches;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusSecuritySwitchesChanging(e);
                    this.OnPropertyChanging("StatusSecuritySwitches", e, _statusSecuritySwitchesAttribute);
                    this._statusSecuritySwitches = value;
                    this.OnStatusSecuritySwitchesChanged(e);
                    this.OnPropertyChanged("StatusSecuritySwitches", e, _statusSecuritySwitchesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastCalibration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DateTime> DateLastCalibration
        {
            get
            {
                return this._dateLastCalibration;
            }
            set
            {
                if ((this._dateLastCalibration != value))
                {
                    Nullable<DateTime> old = this._dateLastCalibration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastCalibrationChanging(e);
                    this.OnPropertyChanging("DateLastCalibration", e, _dateLastCalibrationAttribute);
                    this._dateLastCalibration = value;
                    this.OnDateLastCalibrationChanged(e);
                    this.OnPropertyChanged("DateLastCalibration", e, _dateLastCalibrationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateNextConfig property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DateTime> DateNextConfig
        {
            get
            {
                return this._dateNextConfig;
            }
            set
            {
                if ((this._dateNextConfig != value))
                {
                    Nullable<DateTime> old = this._dateNextConfig;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateNextConfigChanging(e);
                    this.OnPropertyChanging("DateNextConfig", e, _dateNextConfigAttribute);
                    this._dateNextConfig = value;
                    this.OnDateNextConfigChanged(e);
                    this.OnPropertyChanged("DateNextConfig", e, _dateNextConfigAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateActivationPassivCalendar property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DateTime> DateActivationPassivCalendar
        {
            get
            {
                return this._dateActivationPassivCalendar;
            }
            set
            {
                if ((this._dateActivationPassivCalendar != value))
                {
                    Nullable<DateTime> old = this._dateActivationPassivCalendar;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateActivationPassivCalendarChanging(e);
                    this.OnPropertyChanging("DateActivationPassivCalendar", e, _dateActivationPassivCalendarAttribute);
                    this._dateActivationPassivCalendar = value;
                    this.OnDateActivationPassivCalendarChanged(e);
                    this.OnPropertyChanged("DateActivationPassivCalendar", e, _dateActivationPassivCalendarAttribute);
                }
            }
        }
        
        /// <summary>
        /// The NumberProtectedConfigChanges property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> NumberProtectedConfigChanges
        {
            get
            {
                return this._numberProtectedConfigChanges;
            }
            set
            {
                if ((this._numberProtectedConfigChanges != value))
                {
                    Nullable<int> old = this._numberProtectedConfigChanges;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberProtectedConfigChangesChanging(e);
                    this.OnPropertyChanging("NumberProtectedConfigChanges", e, _numberProtectedConfigChangesAttribute);
                    this._numberProtectedConfigChanges = value;
                    this.OnNumberProtectedConfigChangesChanged(e);
                    this.OnPropertyChanged("NumberProtectedConfigChanges", e, _numberProtectedConfigChangesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastProtectedConfigChange property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DateTime> DateLastProtectedConfigChange
        {
            get
            {
                return this._dateLastProtectedConfigChange;
            }
            set
            {
                if ((this._dateLastProtectedConfigChange != value))
                {
                    Nullable<DateTime> old = this._dateLastProtectedConfigChange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastProtectedConfigChangeChanging(e);
                    this.OnPropertyChanging("DateLastProtectedConfigChange", e, _dateLastProtectedConfigChangeAttribute);
                    this._dateLastProtectedConfigChange = value;
                    this.OnDateLastProtectedConfigChangeChanged(e);
                    this.OnPropertyChanged("DateLastProtectedConfigChange", e, _dateLastProtectedConfigChangeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastClockSynch property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DateTime> DateLastClockSynch
        {
            get
            {
                return this._dateLastClockSynch;
            }
            set
            {
                if ((this._dateLastClockSynch != value))
                {
                    Nullable<DateTime> old = this._dateLastClockSynch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastClockSynchChanging(e);
                    this.OnPropertyChanging("DateLastClockSynch", e, _dateLastClockSynchAttribute);
                    this._dateLastClockSynch = value;
                    this.OnDateLastClockSynchChanged(e);
                    this.OnPropertyChanged("DateLastClockSynch", e, _dateLastClockSynchAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastFirmwareActivation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DateTime> DateLastFirmwareActivation
        {
            get
            {
                return this._dateLastFirmwareActivation;
            }
            set
            {
                if ((this._dateLastFirmwareActivation != value))
                {
                    Nullable<DateTime> old = this._dateLastFirmwareActivation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastFirmwareActivationChanging(e);
                    this.OnPropertyChanging("DateLastFirmwareActivation", e, _dateLastFirmwareActivationAttribute);
                    this._dateLastFirmwareActivation = value;
                    this.OnDateLastFirmwareActivationChanged(e);
                    this.OnPropertyChanged("DateLastFirmwareActivation", e, _dateLastFirmwareActivationAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Pa" +
                            "rameterChangesObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NumberConfigProgramChanges property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberConfigProgramChangesChanging;
        
        /// <summary>
        /// Gets fired when the NumberConfigProgramChanges property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberConfigProgramChangesChanged;
        
        /// <summary>
        /// Gets fired before the DateLastConfigChange property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastConfigChangeChanging;
        
        /// <summary>
        /// Gets fired when the DateLastConfigChange property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastConfigChangeChanged;
        
        /// <summary>
        /// Gets fired before the DateLastSwitchChange property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastSwitchChangeChanging;
        
        /// <summary>
        /// Gets fired when the DateLastSwitchChange property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastSwitchChangeChanged;
        
        /// <summary>
        /// Gets fired before the DateLastRippleControlChange property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastRippleControlChangeChanging;
        
        /// <summary>
        /// Gets fired when the DateLastRippleControlChange property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastRippleControlChangeChanged;
        
        /// <summary>
        /// Gets fired before the StatusSecuritySwitches property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusSecuritySwitchesChanging;
        
        /// <summary>
        /// Gets fired when the StatusSecuritySwitches property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusSecuritySwitchesChanged;
        
        /// <summary>
        /// Gets fired before the DateLastCalibration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastCalibrationChanging;
        
        /// <summary>
        /// Gets fired when the DateLastCalibration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastCalibrationChanged;
        
        /// <summary>
        /// Gets fired before the DateNextConfig property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateNextConfigChanging;
        
        /// <summary>
        /// Gets fired when the DateNextConfig property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateNextConfigChanged;
        
        /// <summary>
        /// Gets fired before the DateActivationPassivCalendar property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateActivationPassivCalendarChanging;
        
        /// <summary>
        /// Gets fired when the DateActivationPassivCalendar property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateActivationPassivCalendarChanged;
        
        /// <summary>
        /// Gets fired before the NumberProtectedConfigChanges property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberProtectedConfigChangesChanging;
        
        /// <summary>
        /// Gets fired when the NumberProtectedConfigChanges property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberProtectedConfigChangesChanged;
        
        /// <summary>
        /// Gets fired before the DateLastProtectedConfigChange property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastProtectedConfigChangeChanging;
        
        /// <summary>
        /// Gets fired when the DateLastProtectedConfigChange property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastProtectedConfigChangeChanged;
        
        /// <summary>
        /// Gets fired before the DateLastClockSynch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastClockSynchChanging;
        
        /// <summary>
        /// Gets fired when the DateLastClockSynch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastClockSynchChanged;
        
        /// <summary>
        /// Gets fired before the DateLastFirmwareActivation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastFirmwareActivationChanging;
        
        /// <summary>
        /// Gets fired when the DateLastFirmwareActivation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateLastFirmwareActivationChanged;
        
        private static ITypedElement RetrieveNumberConfigProgramChangesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("NumberConfigProgramChanges")));
        }
        
        /// <summary>
        /// Raises the NumberConfigProgramChangesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberConfigProgramChangesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberConfigProgramChangesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberConfigProgramChangesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberConfigProgramChangesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberConfigProgramChangesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastConfigChangeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("DateLastConfigChange")));
        }
        
        /// <summary>
        /// Raises the DateLastConfigChangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastConfigChangeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastConfigChangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastConfigChangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastConfigChangeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastConfigChangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastSwitchChangeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("DateLastSwitchChange")));
        }
        
        /// <summary>
        /// Raises the DateLastSwitchChangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastSwitchChangeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastSwitchChangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastSwitchChangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastSwitchChangeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastSwitchChangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastRippleControlChangeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("DateLastRippleControlChange")));
        }
        
        /// <summary>
        /// Raises the DateLastRippleControlChangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastRippleControlChangeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastRippleControlChangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastRippleControlChangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastRippleControlChangeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastRippleControlChangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStatusSecuritySwitchesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("StatusSecuritySwitches")));
        }
        
        /// <summary>
        /// Raises the StatusSecuritySwitchesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusSecuritySwitchesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusSecuritySwitchesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusSecuritySwitchesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusSecuritySwitchesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusSecuritySwitchesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastCalibrationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("DateLastCalibration")));
        }
        
        /// <summary>
        /// Raises the DateLastCalibrationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastCalibrationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastCalibrationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastCalibrationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastCalibrationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastCalibrationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateNextConfigAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("DateNextConfig")));
        }
        
        /// <summary>
        /// Raises the DateNextConfigChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateNextConfigChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateNextConfigChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateNextConfigChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateNextConfigChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateNextConfigChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateActivationPassivCalendarAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("DateActivationPassivCalendar")));
        }
        
        /// <summary>
        /// Raises the DateActivationPassivCalendarChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateActivationPassivCalendarChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateActivationPassivCalendarChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateActivationPassivCalendarChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateActivationPassivCalendarChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateActivationPassivCalendarChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNumberProtectedConfigChangesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("NumberProtectedConfigChanges")));
        }
        
        /// <summary>
        /// Raises the NumberProtectedConfigChangesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberProtectedConfigChangesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberProtectedConfigChangesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberProtectedConfigChangesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberProtectedConfigChangesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberProtectedConfigChangesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastProtectedConfigChangeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("DateLastProtectedConfigChange")));
        }
        
        /// <summary>
        /// Raises the DateLastProtectedConfigChangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastProtectedConfigChangeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastProtectedConfigChangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastProtectedConfigChangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastProtectedConfigChangeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastProtectedConfigChangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastClockSynchAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("DateLastClockSynch")));
        }
        
        /// <summary>
        /// Raises the DateLastClockSynchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastClockSynchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastClockSynchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastClockSynchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastClockSynchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastClockSynchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastFirmwareActivationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ParameterChangesObject.ClassInstance)).Resolve("DateLastFirmwareActivation")));
        }
        
        /// <summary>
        /// Raises the DateLastFirmwareActivationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastFirmwareActivationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastFirmwareActivationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastFirmwareActivationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastFirmwareActivationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateLastFirmwareActivationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NUMBERCONFIGPROGRAMCHANGES"))
            {
                return this.NumberConfigProgramChanges;
            }
            if ((attribute == "DATELASTCONFIGCHANGE"))
            {
                return this.DateLastConfigChange;
            }
            if ((attribute == "DATELASTSWITCHCHANGE"))
            {
                return this.DateLastSwitchChange;
            }
            if ((attribute == "DATELASTRIPPLECONTROLCHANGE"))
            {
                return this.DateLastRippleControlChange;
            }
            if ((attribute == "STATUSSECURITYSWITCHES"))
            {
                return this.StatusSecuritySwitches;
            }
            if ((attribute == "DATELASTCALIBRATION"))
            {
                return this.DateLastCalibration;
            }
            if ((attribute == "DATENEXTCONFIG"))
            {
                return this.DateNextConfig;
            }
            if ((attribute == "DATEACTIVATIONPASSIVCALENDAR"))
            {
                return this.DateActivationPassivCalendar;
            }
            if ((attribute == "NUMBERPROTECTEDCONFIGCHANGES"))
            {
                return this.NumberProtectedConfigChanges;
            }
            if ((attribute == "DATELASTPROTECTEDCONFIGCHANGE"))
            {
                return this.DateLastProtectedConfigChange;
            }
            if ((attribute == "DATELASTCLOCKSYNCH"))
            {
                return this.DateLastClockSynch;
            }
            if ((attribute == "DATELASTFIRMWAREACTIVATION"))
            {
                return this.DateLastFirmwareActivation;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NUMBERCONFIGPROGRAMCHANGES"))
            {
                this.NumberConfigProgramChanges = ((int)(value));
                return;
            }
            if ((feature == "DATELASTCONFIGCHANGE"))
            {
                this.DateLastConfigChange = ((DateTime)(value));
                return;
            }
            if ((feature == "DATELASTSWITCHCHANGE"))
            {
                this.DateLastSwitchChange = ((DateTime)(value));
                return;
            }
            if ((feature == "DATELASTRIPPLECONTROLCHANGE"))
            {
                this.DateLastRippleControlChange = ((DateTime)(value));
                return;
            }
            if ((feature == "STATUSSECURITYSWITCHES"))
            {
                this.StatusSecuritySwitches = ((string)(value));
                return;
            }
            if ((feature == "DATELASTCALIBRATION"))
            {
                this.DateLastCalibration = ((DateTime)(value));
                return;
            }
            if ((feature == "DATENEXTCONFIG"))
            {
                this.DateNextConfig = ((DateTime)(value));
                return;
            }
            if ((feature == "DATEACTIVATIONPASSIVCALENDAR"))
            {
                this.DateActivationPassivCalendar = ((DateTime)(value));
                return;
            }
            if ((feature == "NUMBERPROTECTEDCONFIGCHANGES"))
            {
                this.NumberProtectedConfigChanges = ((int)(value));
                return;
            }
            if ((feature == "DATELASTPROTECTEDCONFIGCHANGE"))
            {
                this.DateLastProtectedConfigChange = ((DateTime)(value));
                return;
            }
            if ((feature == "DATELASTCLOCKSYNCH"))
            {
                this.DateLastClockSynch = ((DateTime)(value));
                return;
            }
            if ((feature == "DATELASTFIRMWAREACTIVATION"))
            {
                this.DateLastFirmwareActivation = ((DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Pa" +
                        "rameterChangesObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NumberConfigProgramChanges property
        /// </summary>
        private sealed class NumberConfigProgramChangesProxy : ModelPropertyChange<IParameterChangesObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberConfigProgramChangesProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "NumberConfigProgramChanges")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.NumberConfigProgramChanges;
                }
                set
                {
                    this.ModelElement.NumberConfigProgramChanges = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastConfigChange property
        /// </summary>
        private sealed class DateLastConfigChangeProxy : ModelPropertyChange<IParameterChangesObject, Nullable<DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastConfigChangeProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastConfigChange")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastConfigChange;
                }
                set
                {
                    this.ModelElement.DateLastConfigChange = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastSwitchChange property
        /// </summary>
        private sealed class DateLastSwitchChangeProxy : ModelPropertyChange<IParameterChangesObject, Nullable<DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastSwitchChangeProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastSwitchChange")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastSwitchChange;
                }
                set
                {
                    this.ModelElement.DateLastSwitchChange = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastRippleControlChange property
        /// </summary>
        private sealed class DateLastRippleControlChangeProxy : ModelPropertyChange<IParameterChangesObject, Nullable<DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastRippleControlChangeProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastRippleControlChange")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastRippleControlChange;
                }
                set
                {
                    this.ModelElement.DateLastRippleControlChange = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StatusSecuritySwitches property
        /// </summary>
        private sealed class StatusSecuritySwitchesProxy : ModelPropertyChange<IParameterChangesObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusSecuritySwitchesProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "StatusSecuritySwitches")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.StatusSecuritySwitches;
                }
                set
                {
                    this.ModelElement.StatusSecuritySwitches = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastCalibration property
        /// </summary>
        private sealed class DateLastCalibrationProxy : ModelPropertyChange<IParameterChangesObject, Nullable<DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastCalibrationProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastCalibration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastCalibration;
                }
                set
                {
                    this.ModelElement.DateLastCalibration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateNextConfig property
        /// </summary>
        private sealed class DateNextConfigProxy : ModelPropertyChange<IParameterChangesObject, Nullable<DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateNextConfigProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateNextConfig")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateNextConfig;
                }
                set
                {
                    this.ModelElement.DateNextConfig = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateActivationPassivCalendar property
        /// </summary>
        private sealed class DateActivationPassivCalendarProxy : ModelPropertyChange<IParameterChangesObject, Nullable<DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateActivationPassivCalendarProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateActivationPassivCalendar")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateActivationPassivCalendar;
                }
                set
                {
                    this.ModelElement.DateActivationPassivCalendar = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NumberProtectedConfigChanges property
        /// </summary>
        private sealed class NumberProtectedConfigChangesProxy : ModelPropertyChange<IParameterChangesObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberProtectedConfigChangesProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "NumberProtectedConfigChanges")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.NumberProtectedConfigChanges;
                }
                set
                {
                    this.ModelElement.NumberProtectedConfigChanges = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastProtectedConfigChange property
        /// </summary>
        private sealed class DateLastProtectedConfigChangeProxy : ModelPropertyChange<IParameterChangesObject, Nullable<DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastProtectedConfigChangeProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastProtectedConfigChange")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastProtectedConfigChange;
                }
                set
                {
                    this.ModelElement.DateLastProtectedConfigChange = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastClockSynch property
        /// </summary>
        private sealed class DateLastClockSynchProxy : ModelPropertyChange<IParameterChangesObject, Nullable<DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastClockSynchProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastClockSynch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastClockSynch;
                }
                set
                {
                    this.ModelElement.DateLastClockSynch = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastFirmwareActivation property
        /// </summary>
        private sealed class DateLastFirmwareActivationProxy : ModelPropertyChange<IParameterChangesObject, Nullable<DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastFirmwareActivationProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastFirmwareActivation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastFirmwareActivation;
                }
                set
                {
                    this.ModelElement.DateLastFirmwareActivation = value;
                }
            }
        }
    }
}

