//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the TransformerAndLineLosses class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Tr" +
        "ansformerAndLineLosses")]
    public partial class TransformerAndLineLosses : Data, ITransformerAndLineLosses, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Active_line_losses_P property
        /// </summary>
        private Nullable<double> _active_line_losses_P;
        
        private static Lazy<ITypedElement> _active_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveActive_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Active_line_losses_M property
        /// </summary>
        private Nullable<double> _active_line_losses_M;
        
        private static Lazy<ITypedElement> _active_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveActive_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Active_line_losses property
        /// </summary>
        private Nullable<double> _active_line_losses;
        
        private static Lazy<ITypedElement> _active_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveActive_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Active_transformer_losses_P property
        /// </summary>
        private Nullable<double> _active_transformer_losses_P;
        
        private static Lazy<ITypedElement> _active_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveActive_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Active_transformer_losses_M property
        /// </summary>
        private Nullable<double> _active_transformer_losses_M;
        
        private static Lazy<ITypedElement> _active_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveActive_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Active_transformer_losses property
        /// </summary>
        private Nullable<double> _active_transformer_losses;
        
        private static Lazy<ITypedElement> _active_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveActive_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Active_losses_P property
        /// </summary>
        private Nullable<double> _active_losses_P;
        
        private static Lazy<ITypedElement> _active_losses_PAttribute = new Lazy<ITypedElement>(RetrieveActive_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Active_losses_M property
        /// </summary>
        private Nullable<double> _active_losses_M;
        
        private static Lazy<ITypedElement> _active_losses_MAttribute = new Lazy<ITypedElement>(RetrieveActive_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Active_losses property
        /// </summary>
        private Nullable<double> _active_losses;
        
        private static Lazy<ITypedElement> _active_lossesAttribute = new Lazy<ITypedElement>(RetrieveActive_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_line_losses_P property
        /// </summary>
        private Nullable<double> _reactive_line_losses_P;
        
        private static Lazy<ITypedElement> _reactive_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveReactive_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_line_losses_M property
        /// </summary>
        private Nullable<double> _reactive_line_losses_M;
        
        private static Lazy<ITypedElement> _reactive_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveReactive_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_line_losses property
        /// </summary>
        private Nullable<double> _reactive_line_losses;
        
        private static Lazy<ITypedElement> _reactive_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveReactive_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_transformer_losses_P property
        /// </summary>
        private Nullable<double> _reactive_transformer_losses_P;
        
        private static Lazy<ITypedElement> _reactive_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveReactive_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_transformer_losses_M property
        /// </summary>
        private Nullable<double> _reactive_transformer_losses_M;
        
        private static Lazy<ITypedElement> _reactive_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveReactive_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_transformer_losses property
        /// </summary>
        private Nullable<double> _reactive_transformer_losses;
        
        private static Lazy<ITypedElement> _reactive_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveReactive_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_losses_P property
        /// </summary>
        private Nullable<double> _reactive_losses_P;
        
        private static Lazy<ITypedElement> _reactive_losses_PAttribute = new Lazy<ITypedElement>(RetrieveReactive_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_losses_M property
        /// </summary>
        private Nullable<double> _reactive_losses_M;
        
        private static Lazy<ITypedElement> _reactive_losses_MAttribute = new Lazy<ITypedElement>(RetrieveReactive_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_losses property
        /// </summary>
        private Nullable<double> _reactive_losses;
        
        private static Lazy<ITypedElement> _reactive_lossesAttribute = new Lazy<ITypedElement>(RetrieveReactive_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Total_normalized_transformer_losses property
        /// </summary>
        private Nullable<double> _total_normalized_transformer_losses;
        
        private static Lazy<ITypedElement> _total_normalized_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveTotal_normalized_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Total_normalized_line_losses property
        /// </summary>
        private Nullable<double> _total_normalized_line_losses;
        
        private static Lazy<ITypedElement> _total_normalized_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveTotal_normalized_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_active_gross_P property
        /// </summary>
        private Nullable<double> _compensated_active_gross_P;
        
        private static Lazy<ITypedElement> _compensated_active_gross_PAttribute = new Lazy<ITypedElement>(RetrieveCompensated_active_gross_PAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_active_net_P property
        /// </summary>
        private Nullable<double> _compensated_active_net_P;
        
        private static Lazy<ITypedElement> _compensated_active_net_PAttribute = new Lazy<ITypedElement>(RetrieveCompensated_active_net_PAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_active_gross_M property
        /// </summary>
        private Nullable<double> _compensated_active_gross_M;
        
        private static Lazy<ITypedElement> _compensated_active_gross_MAttribute = new Lazy<ITypedElement>(RetrieveCompensated_active_gross_MAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_active_net_M property
        /// </summary>
        private Nullable<double> _compensated_active_net_M;
        
        private static Lazy<ITypedElement> _compensated_active_net_MAttribute = new Lazy<ITypedElement>(RetrieveCompensated_active_net_MAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_reactive_gross_P property
        /// </summary>
        private Nullable<double> _compensated_reactive_gross_P;
        
        private static Lazy<ITypedElement> _compensated_reactive_gross_PAttribute = new Lazy<ITypedElement>(RetrieveCompensated_reactive_gross_PAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_reactive_net_P property
        /// </summary>
        private Nullable<double> _compensated_reactive_net_P;
        
        private static Lazy<ITypedElement> _compensated_reactive_net_PAttribute = new Lazy<ITypedElement>(RetrieveCompensated_reactive_net_PAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_reactive_gross_M property
        /// </summary>
        private Nullable<double> _compensated_reactive_gross_M;
        
        private static Lazy<ITypedElement> _compensated_reactive_gross_MAttribute = new Lazy<ITypedElement>(RetrieveCompensated_reactive_gross_MAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_reactive_net_M property
        /// </summary>
        private Nullable<double> _compensated_reactive_net_M;
        
        private static Lazy<ITypedElement> _compensated_reactive_net_MAttribute = new Lazy<ITypedElement>(RetrieveCompensated_reactive_net_MAttribute);
        
        /// <summary>
        /// The backing field for the L1active_line_losses property
        /// </summary>
        private Nullable<double> _l1active_line_losses;
        
        private static Lazy<ITypedElement> _l1active_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1active_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1active_line_losses_M property
        /// </summary>
        private Nullable<double> _l1active_line_losses_M;
        
        private static Lazy<ITypedElement> _l1active_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1active_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1active_transformer_losses_P property
        /// </summary>
        private Nullable<double> _l1active_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l1active_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL1active_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L1active_transformer_losses_M property
        /// </summary>
        private Nullable<double> _l1active_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l1active_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1active_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1active_transformer_losses property
        /// </summary>
        private Nullable<double> _l1active_transformer_losses;
        
        private static Lazy<ITypedElement> _l1active_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1active_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1active_losses_P property
        /// </summary>
        private Nullable<double> _l1active_losses_P;
        
        private static Lazy<ITypedElement> _l1active_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL1active_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L1active_losses_M property
        /// </summary>
        private Nullable<double> _l1active_losses_M;
        
        private static Lazy<ITypedElement> _l1active_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1active_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1active_losses property
        /// </summary>
        private Nullable<double> _l1active_losses;
        
        private static Lazy<ITypedElement> _l1active_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1active_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_line_losses_P property
        /// </summary>
        private Nullable<double> _l1reactive_line_losses_P;
        
        private static Lazy<ITypedElement> _l1reactive_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_line_losses_M property
        /// </summary>
        private Nullable<double> _l1reactive_line_losses_M;
        
        private static Lazy<ITypedElement> _l1reactive_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_line_losses property
        /// </summary>
        private Nullable<double> _l1reactive_line_losses;
        
        private static Lazy<ITypedElement> _l1reactive_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_transformer_losses_P property
        /// </summary>
        private Nullable<double> _l1reactive_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l1reactive_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_transformer_losses_M property
        /// </summary>
        private Nullable<double> _l1reactive_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l1reactive_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_transformer_losses property
        /// </summary>
        private Nullable<double> _l1reactive_transformer_losses;
        
        private static Lazy<ITypedElement> _l1reactive_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1Reactive_losses_P property
        /// </summary>
        private Nullable<double> _l1Reactive_losses_P;
        
        private static Lazy<ITypedElement> _l1Reactive_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL1Reactive_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L1Reactive_losses_M property
        /// </summary>
        private Nullable<double> _l1Reactive_losses_M;
        
        private static Lazy<ITypedElement> _l1Reactive_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1Reactive_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1Reactive_losses property
        /// </summary>
        private Nullable<double> _l1Reactive_losses;
        
        private static Lazy<ITypedElement> _l1Reactive_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1Reactive_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1Ampere_squared_hours property
        /// </summary>
        private Nullable<double> _l1Ampere_squared_hours;
        
        private static Lazy<ITypedElement> _l1Ampere_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL1Ampere_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the L1Volt_squared_hours property
        /// </summary>
        private Nullable<double> _l1Volt_squared_hours;
        
        private static Lazy<ITypedElement> _l1Volt_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL1Volt_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the L2active_line_losses_P property
        /// </summary>
        private Nullable<double> _l2active_line_losses_P;
        
        private static Lazy<ITypedElement> _l2active_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2active_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2active_line_losses_M property
        /// </summary>
        private Nullable<double> _l2active_line_losses_M;
        
        private static Lazy<ITypedElement> _l2active_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2active_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2active_transformer_losses_P property
        /// </summary>
        private Nullable<double> _l2active_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l2active_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2active_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2active_transformer_losses_M property
        /// </summary>
        private Nullable<double> _l2active_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l2active_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2active_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2active_transformer_losses property
        /// </summary>
        private Nullable<double> _l2active_transformer_losses;
        
        private static Lazy<ITypedElement> _l2active_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL2active_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L2active_losses_P property
        /// </summary>
        private Nullable<double> _l2active_losses_P;
        
        private static Lazy<ITypedElement> _l2active_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2active_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2active_losses_M property
        /// </summary>
        private Nullable<double> _l2active_losses_M;
        
        private static Lazy<ITypedElement> _l2active_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2active_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2active_losses property
        /// </summary>
        private Nullable<double> _l2active_losses;
        
        private static Lazy<ITypedElement> _l2active_lossesAttribute = new Lazy<ITypedElement>(RetrieveL2active_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_line_losses_P property
        /// </summary>
        private Nullable<double> _l2reactive_line_losses_P;
        
        private static Lazy<ITypedElement> _l2reactive_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_line_losses_M property
        /// </summary>
        private Nullable<double> _l2reactive_line_losses_M;
        
        private static Lazy<ITypedElement> _l2reactive_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_line_losses property
        /// </summary>
        private Nullable<double> _l2reactive_line_losses;
        
        private static Lazy<ITypedElement> _l2reactive_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_transformer_losses property
        /// </summary>
        private Nullable<double> _l2reactive_transformer_losses;
        
        private static Lazy<ITypedElement> _l2reactive_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_transformer_losses_P property
        /// </summary>
        private Nullable<double> _l2reactive_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l2reactive_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_transformer_losses_M property
        /// </summary>
        private Nullable<double> _l2reactive_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l2reactive_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_losses property
        /// </summary>
        private Nullable<double> _l2reactive_losses;
        
        private static Lazy<ITypedElement> _l2reactive_lossesAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_losses_P property
        /// </summary>
        private Nullable<double> _l2reactive_losses_P;
        
        private static Lazy<ITypedElement> _l2reactive_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_losses_M property
        /// </summary>
        private Nullable<double> _l2reactive_losses_M;
        
        private static Lazy<ITypedElement> _l2reactive_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2Ampere_squared_hours property
        /// </summary>
        private Nullable<double> _l2Ampere_squared_hours;
        
        private static Lazy<ITypedElement> _l2Ampere_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL2Ampere_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the L2Volt_squared_hours property
        /// </summary>
        private Nullable<double> _l2Volt_squared_hours;
        
        private static Lazy<ITypedElement> _l2Volt_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL2Volt_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the L3Active_line_losses_P property
        /// </summary>
        private Nullable<double> _l3Active_line_losses_P;
        
        private static Lazy<ITypedElement> _l3Active_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3Active_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3Active_line_losses_M property
        /// </summary>
        private Nullable<double> _l3Active_line_losses_M;
        
        private static Lazy<ITypedElement> _l3Active_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3Active_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3active_transformer_losses_P property
        /// </summary>
        private Nullable<double> _l3active_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l3active_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3active_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3active_transformer_losses_M property
        /// </summary>
        private Nullable<double> _l3active_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l3active_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3active_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3active_transformer_losses property
        /// </summary>
        private Nullable<double> _l3active_transformer_losses;
        
        private static Lazy<ITypedElement> _l3active_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL3active_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L3active_losses_P property
        /// </summary>
        private Nullable<double> _l3active_losses_P;
        
        private static Lazy<ITypedElement> _l3active_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3active_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3active_losses_M property
        /// </summary>
        private Nullable<double> _l3active_losses_M;
        
        private static Lazy<ITypedElement> _l3active_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3active_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3active_losses property
        /// </summary>
        private Nullable<double> _l3active_losses;
        
        private static Lazy<ITypedElement> _l3active_lossesAttribute = new Lazy<ITypedElement>(RetrieveL3active_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_line_losses_P property
        /// </summary>
        private Nullable<double> _l3reactive_line_losses_P;
        
        private static Lazy<ITypedElement> _l3reactive_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_line_losses_M property
        /// </summary>
        private Nullable<double> _l3reactive_line_losses_M;
        
        private static Lazy<ITypedElement> _l3reactive_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_line_losses property
        /// </summary>
        private Nullable<double> _l3reactive_line_losses;
        
        private static Lazy<ITypedElement> _l3reactive_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_transformer_losses_P property
        /// </summary>
        private Nullable<double> _l3reactive_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l3reactive_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_transformer_losses_M property
        /// </summary>
        private Nullable<double> _l3reactive_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l3reactive_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_transformer_losses property
        /// </summary>
        private Nullable<double> _l3reactive_transformer_losses;
        
        private static Lazy<ITypedElement> _l3reactive_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_losses_P property
        /// </summary>
        private Nullable<double> _l3reactive_losses_P;
        
        private static Lazy<ITypedElement> _l3reactive_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_losses_M property
        /// </summary>
        private Nullable<double> _l3reactive_losses_M;
        
        private static Lazy<ITypedElement> _l3reactive_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_losses property
        /// </summary>
        private Nullable<double> _l3reactive_losses;
        
        private static Lazy<ITypedElement> _l3reactive_lossesAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L3Ampere_squared_hours property
        /// </summary>
        private Nullable<double> _l3Ampere_squared_hours;
        
        private static Lazy<ITypedElement> _l3Ampere_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL3Ampere_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the L3Volt_Squared_hours property
        /// </summary>
        private Nullable<double> _l3Volt_Squared_hours;
        
        private static Lazy<ITypedElement> _l3Volt_Squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL3Volt_Squared_hoursAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Active_line_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Active_line_losses_P
        {
            get
            {
                return this._active_line_losses_P;
            }
            set
            {
                if ((this._active_line_losses_P != value))
                {
                    Nullable<double> old = this._active_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_line_losses_PChanging(e);
                    this.OnPropertyChanging("Active_line_losses_P", e, _active_line_losses_PAttribute);
                    this._active_line_losses_P = value;
                    this.OnActive_line_losses_PChanged(e);
                    this.OnPropertyChanged("Active_line_losses_P", e, _active_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_line_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Active_line_losses_M
        {
            get
            {
                return this._active_line_losses_M;
            }
            set
            {
                if ((this._active_line_losses_M != value))
                {
                    Nullable<double> old = this._active_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_line_losses_MChanging(e);
                    this.OnPropertyChanging("Active_line_losses_M", e, _active_line_losses_MAttribute);
                    this._active_line_losses_M = value;
                    this.OnActive_line_losses_MChanged(e);
                    this.OnPropertyChanged("Active_line_losses_M", e, _active_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_line_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Active_line_losses
        {
            get
            {
                return this._active_line_losses;
            }
            set
            {
                if ((this._active_line_losses != value))
                {
                    Nullable<double> old = this._active_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_line_lossesChanging(e);
                    this.OnPropertyChanging("Active_line_losses", e, _active_line_lossesAttribute);
                    this._active_line_losses = value;
                    this.OnActive_line_lossesChanged(e);
                    this.OnPropertyChanged("Active_line_losses", e, _active_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_transformer_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Active_transformer_losses_P
        {
            get
            {
                return this._active_transformer_losses_P;
            }
            set
            {
                if ((this._active_transformer_losses_P != value))
                {
                    Nullable<double> old = this._active_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("Active_transformer_losses_P", e, _active_transformer_losses_PAttribute);
                    this._active_transformer_losses_P = value;
                    this.OnActive_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("Active_transformer_losses_P", e, _active_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_transformer_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Active_transformer_losses_M
        {
            get
            {
                return this._active_transformer_losses_M;
            }
            set
            {
                if ((this._active_transformer_losses_M != value))
                {
                    Nullable<double> old = this._active_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("Active_transformer_losses_M", e, _active_transformer_losses_MAttribute);
                    this._active_transformer_losses_M = value;
                    this.OnActive_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("Active_transformer_losses_M", e, _active_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_transformer_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Active_transformer_losses
        {
            get
            {
                return this._active_transformer_losses;
            }
            set
            {
                if ((this._active_transformer_losses != value))
                {
                    Nullable<double> old = this._active_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_transformer_lossesChanging(e);
                    this.OnPropertyChanging("Active_transformer_losses", e, _active_transformer_lossesAttribute);
                    this._active_transformer_losses = value;
                    this.OnActive_transformer_lossesChanged(e);
                    this.OnPropertyChanged("Active_transformer_losses", e, _active_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Active_losses_P
        {
            get
            {
                return this._active_losses_P;
            }
            set
            {
                if ((this._active_losses_P != value))
                {
                    Nullable<double> old = this._active_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_losses_PChanging(e);
                    this.OnPropertyChanging("Active_losses_P", e, _active_losses_PAttribute);
                    this._active_losses_P = value;
                    this.OnActive_losses_PChanged(e);
                    this.OnPropertyChanged("Active_losses_P", e, _active_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Active_losses_M
        {
            get
            {
                return this._active_losses_M;
            }
            set
            {
                if ((this._active_losses_M != value))
                {
                    Nullable<double> old = this._active_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_losses_MChanging(e);
                    this.OnPropertyChanging("Active_losses_M", e, _active_losses_MAttribute);
                    this._active_losses_M = value;
                    this.OnActive_losses_MChanged(e);
                    this.OnPropertyChanged("Active_losses_M", e, _active_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Active_losses
        {
            get
            {
                return this._active_losses;
            }
            set
            {
                if ((this._active_losses != value))
                {
                    Nullable<double> old = this._active_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_lossesChanging(e);
                    this.OnPropertyChanging("Active_losses", e, _active_lossesAttribute);
                    this._active_losses = value;
                    this.OnActive_lossesChanged(e);
                    this.OnPropertyChanged("Active_losses", e, _active_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_line_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactive_line_losses_P
        {
            get
            {
                return this._reactive_line_losses_P;
            }
            set
            {
                if ((this._reactive_line_losses_P != value))
                {
                    Nullable<double> old = this._reactive_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_line_losses_PChanging(e);
                    this.OnPropertyChanging("Reactive_line_losses_P", e, _reactive_line_losses_PAttribute);
                    this._reactive_line_losses_P = value;
                    this.OnReactive_line_losses_PChanged(e);
                    this.OnPropertyChanged("Reactive_line_losses_P", e, _reactive_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_line_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactive_line_losses_M
        {
            get
            {
                return this._reactive_line_losses_M;
            }
            set
            {
                if ((this._reactive_line_losses_M != value))
                {
                    Nullable<double> old = this._reactive_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_line_losses_MChanging(e);
                    this.OnPropertyChanging("Reactive_line_losses_M", e, _reactive_line_losses_MAttribute);
                    this._reactive_line_losses_M = value;
                    this.OnReactive_line_losses_MChanged(e);
                    this.OnPropertyChanged("Reactive_line_losses_M", e, _reactive_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_line_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactive_line_losses
        {
            get
            {
                return this._reactive_line_losses;
            }
            set
            {
                if ((this._reactive_line_losses != value))
                {
                    Nullable<double> old = this._reactive_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_line_lossesChanging(e);
                    this.OnPropertyChanging("Reactive_line_losses", e, _reactive_line_lossesAttribute);
                    this._reactive_line_losses = value;
                    this.OnReactive_line_lossesChanged(e);
                    this.OnPropertyChanged("Reactive_line_losses", e, _reactive_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_transformer_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactive_transformer_losses_P
        {
            get
            {
                return this._reactive_transformer_losses_P;
            }
            set
            {
                if ((this._reactive_transformer_losses_P != value))
                {
                    Nullable<double> old = this._reactive_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("Reactive_transformer_losses_P", e, _reactive_transformer_losses_PAttribute);
                    this._reactive_transformer_losses_P = value;
                    this.OnReactive_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("Reactive_transformer_losses_P", e, _reactive_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_transformer_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactive_transformer_losses_M
        {
            get
            {
                return this._reactive_transformer_losses_M;
            }
            set
            {
                if ((this._reactive_transformer_losses_M != value))
                {
                    Nullable<double> old = this._reactive_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("Reactive_transformer_losses_M", e, _reactive_transformer_losses_MAttribute);
                    this._reactive_transformer_losses_M = value;
                    this.OnReactive_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("Reactive_transformer_losses_M", e, _reactive_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_transformer_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactive_transformer_losses
        {
            get
            {
                return this._reactive_transformer_losses;
            }
            set
            {
                if ((this._reactive_transformer_losses != value))
                {
                    Nullable<double> old = this._reactive_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_transformer_lossesChanging(e);
                    this.OnPropertyChanging("Reactive_transformer_losses", e, _reactive_transformer_lossesAttribute);
                    this._reactive_transformer_losses = value;
                    this.OnReactive_transformer_lossesChanged(e);
                    this.OnPropertyChanged("Reactive_transformer_losses", e, _reactive_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactive_losses_P
        {
            get
            {
                return this._reactive_losses_P;
            }
            set
            {
                if ((this._reactive_losses_P != value))
                {
                    Nullable<double> old = this._reactive_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_losses_PChanging(e);
                    this.OnPropertyChanging("Reactive_losses_P", e, _reactive_losses_PAttribute);
                    this._reactive_losses_P = value;
                    this.OnReactive_losses_PChanged(e);
                    this.OnPropertyChanged("Reactive_losses_P", e, _reactive_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactive_losses_M
        {
            get
            {
                return this._reactive_losses_M;
            }
            set
            {
                if ((this._reactive_losses_M != value))
                {
                    Nullable<double> old = this._reactive_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_losses_MChanging(e);
                    this.OnPropertyChanging("Reactive_losses_M", e, _reactive_losses_MAttribute);
                    this._reactive_losses_M = value;
                    this.OnReactive_losses_MChanged(e);
                    this.OnPropertyChanged("Reactive_losses_M", e, _reactive_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactive_losses
        {
            get
            {
                return this._reactive_losses;
            }
            set
            {
                if ((this._reactive_losses != value))
                {
                    Nullable<double> old = this._reactive_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_lossesChanging(e);
                    this.OnPropertyChanging("Reactive_losses", e, _reactive_lossesAttribute);
                    this._reactive_losses = value;
                    this.OnReactive_lossesChanged(e);
                    this.OnPropertyChanged("Reactive_losses", e, _reactive_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Total_normalized_transformer_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Total_normalized_transformer_losses
        {
            get
            {
                return this._total_normalized_transformer_losses;
            }
            set
            {
                if ((this._total_normalized_transformer_losses != value))
                {
                    Nullable<double> old = this._total_normalized_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotal_normalized_transformer_lossesChanging(e);
                    this.OnPropertyChanging("Total_normalized_transformer_losses", e, _total_normalized_transformer_lossesAttribute);
                    this._total_normalized_transformer_losses = value;
                    this.OnTotal_normalized_transformer_lossesChanged(e);
                    this.OnPropertyChanged("Total_normalized_transformer_losses", e, _total_normalized_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Total_normalized_line_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Total_normalized_line_losses
        {
            get
            {
                return this._total_normalized_line_losses;
            }
            set
            {
                if ((this._total_normalized_line_losses != value))
                {
                    Nullable<double> old = this._total_normalized_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotal_normalized_line_lossesChanging(e);
                    this.OnPropertyChanging("Total_normalized_line_losses", e, _total_normalized_line_lossesAttribute);
                    this._total_normalized_line_losses = value;
                    this.OnTotal_normalized_line_lossesChanged(e);
                    this.OnPropertyChanged("Total_normalized_line_losses", e, _total_normalized_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_active_gross_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Compensated_active_gross_P
        {
            get
            {
                return this._compensated_active_gross_P;
            }
            set
            {
                if ((this._compensated_active_gross_P != value))
                {
                    Nullable<double> old = this._compensated_active_gross_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_active_gross_PChanging(e);
                    this.OnPropertyChanging("Compensated_active_gross_P", e, _compensated_active_gross_PAttribute);
                    this._compensated_active_gross_P = value;
                    this.OnCompensated_active_gross_PChanged(e);
                    this.OnPropertyChanged("Compensated_active_gross_P", e, _compensated_active_gross_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_active_net_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Compensated_active_net_P
        {
            get
            {
                return this._compensated_active_net_P;
            }
            set
            {
                if ((this._compensated_active_net_P != value))
                {
                    Nullable<double> old = this._compensated_active_net_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_active_net_PChanging(e);
                    this.OnPropertyChanging("Compensated_active_net_P", e, _compensated_active_net_PAttribute);
                    this._compensated_active_net_P = value;
                    this.OnCompensated_active_net_PChanged(e);
                    this.OnPropertyChanged("Compensated_active_net_P", e, _compensated_active_net_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_active_gross_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Compensated_active_gross_M
        {
            get
            {
                return this._compensated_active_gross_M;
            }
            set
            {
                if ((this._compensated_active_gross_M != value))
                {
                    Nullable<double> old = this._compensated_active_gross_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_active_gross_MChanging(e);
                    this.OnPropertyChanging("Compensated_active_gross_M", e, _compensated_active_gross_MAttribute);
                    this._compensated_active_gross_M = value;
                    this.OnCompensated_active_gross_MChanged(e);
                    this.OnPropertyChanged("Compensated_active_gross_M", e, _compensated_active_gross_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_active_net_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Compensated_active_net_M
        {
            get
            {
                return this._compensated_active_net_M;
            }
            set
            {
                if ((this._compensated_active_net_M != value))
                {
                    Nullable<double> old = this._compensated_active_net_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_active_net_MChanging(e);
                    this.OnPropertyChanging("Compensated_active_net_M", e, _compensated_active_net_MAttribute);
                    this._compensated_active_net_M = value;
                    this.OnCompensated_active_net_MChanged(e);
                    this.OnPropertyChanged("Compensated_active_net_M", e, _compensated_active_net_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_reactive_gross_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Compensated_reactive_gross_P
        {
            get
            {
                return this._compensated_reactive_gross_P;
            }
            set
            {
                if ((this._compensated_reactive_gross_P != value))
                {
                    Nullable<double> old = this._compensated_reactive_gross_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_reactive_gross_PChanging(e);
                    this.OnPropertyChanging("Compensated_reactive_gross_P", e, _compensated_reactive_gross_PAttribute);
                    this._compensated_reactive_gross_P = value;
                    this.OnCompensated_reactive_gross_PChanged(e);
                    this.OnPropertyChanged("Compensated_reactive_gross_P", e, _compensated_reactive_gross_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_reactive_net_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Compensated_reactive_net_P
        {
            get
            {
                return this._compensated_reactive_net_P;
            }
            set
            {
                if ((this._compensated_reactive_net_P != value))
                {
                    Nullable<double> old = this._compensated_reactive_net_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_reactive_net_PChanging(e);
                    this.OnPropertyChanging("Compensated_reactive_net_P", e, _compensated_reactive_net_PAttribute);
                    this._compensated_reactive_net_P = value;
                    this.OnCompensated_reactive_net_PChanged(e);
                    this.OnPropertyChanged("Compensated_reactive_net_P", e, _compensated_reactive_net_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_reactive_gross_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Compensated_reactive_gross_M
        {
            get
            {
                return this._compensated_reactive_gross_M;
            }
            set
            {
                if ((this._compensated_reactive_gross_M != value))
                {
                    Nullable<double> old = this._compensated_reactive_gross_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_reactive_gross_MChanging(e);
                    this.OnPropertyChanging("Compensated_reactive_gross_M", e, _compensated_reactive_gross_MAttribute);
                    this._compensated_reactive_gross_M = value;
                    this.OnCompensated_reactive_gross_MChanged(e);
                    this.OnPropertyChanged("Compensated_reactive_gross_M", e, _compensated_reactive_gross_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_reactive_net_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Compensated_reactive_net_M
        {
            get
            {
                return this._compensated_reactive_net_M;
            }
            set
            {
                if ((this._compensated_reactive_net_M != value))
                {
                    Nullable<double> old = this._compensated_reactive_net_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_reactive_net_MChanging(e);
                    this.OnPropertyChanging("Compensated_reactive_net_M", e, _compensated_reactive_net_MAttribute);
                    this._compensated_reactive_net_M = value;
                    this.OnCompensated_reactive_net_MChanged(e);
                    this.OnPropertyChanged("Compensated_reactive_net_M", e, _compensated_reactive_net_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_line_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1active_line_losses
        {
            get
            {
                return this._l1active_line_losses;
            }
            set
            {
                if ((this._l1active_line_losses != value))
                {
                    Nullable<double> old = this._l1active_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_line_lossesChanging(e);
                    this.OnPropertyChanging("L1active_line_losses", e, _l1active_line_lossesAttribute);
                    this._l1active_line_losses = value;
                    this.OnL1active_line_lossesChanged(e);
                    this.OnPropertyChanged("L1active_line_losses", e, _l1active_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_line_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1active_line_losses_M
        {
            get
            {
                return this._l1active_line_losses_M;
            }
            set
            {
                if ((this._l1active_line_losses_M != value))
                {
                    Nullable<double> old = this._l1active_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_line_losses_MChanging(e);
                    this.OnPropertyChanging("L1active_line_losses_M", e, _l1active_line_losses_MAttribute);
                    this._l1active_line_losses_M = value;
                    this.OnL1active_line_losses_MChanged(e);
                    this.OnPropertyChanged("L1active_line_losses_M", e, _l1active_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_transformer_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1active_transformer_losses_P
        {
            get
            {
                return this._l1active_transformer_losses_P;
            }
            set
            {
                if ((this._l1active_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l1active_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L1active_transformer_losses_P", e, _l1active_transformer_losses_PAttribute);
                    this._l1active_transformer_losses_P = value;
                    this.OnL1active_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L1active_transformer_losses_P", e, _l1active_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_transformer_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1active_transformer_losses_M
        {
            get
            {
                return this._l1active_transformer_losses_M;
            }
            set
            {
                if ((this._l1active_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l1active_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L1active_transformer_losses_M", e, _l1active_transformer_losses_MAttribute);
                    this._l1active_transformer_losses_M = value;
                    this.OnL1active_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L1active_transformer_losses_M", e, _l1active_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_transformer_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1active_transformer_losses
        {
            get
            {
                return this._l1active_transformer_losses;
            }
            set
            {
                if ((this._l1active_transformer_losses != value))
                {
                    Nullable<double> old = this._l1active_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L1active_transformer_losses", e, _l1active_transformer_lossesAttribute);
                    this._l1active_transformer_losses = value;
                    this.OnL1active_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L1active_transformer_losses", e, _l1active_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1active_losses_P
        {
            get
            {
                return this._l1active_losses_P;
            }
            set
            {
                if ((this._l1active_losses_P != value))
                {
                    Nullable<double> old = this._l1active_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_losses_PChanging(e);
                    this.OnPropertyChanging("L1active_losses_P", e, _l1active_losses_PAttribute);
                    this._l1active_losses_P = value;
                    this.OnL1active_losses_PChanged(e);
                    this.OnPropertyChanged("L1active_losses_P", e, _l1active_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1active_losses_M
        {
            get
            {
                return this._l1active_losses_M;
            }
            set
            {
                if ((this._l1active_losses_M != value))
                {
                    Nullable<double> old = this._l1active_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_losses_MChanging(e);
                    this.OnPropertyChanging("L1active_losses_M", e, _l1active_losses_MAttribute);
                    this._l1active_losses_M = value;
                    this.OnL1active_losses_MChanged(e);
                    this.OnPropertyChanged("L1active_losses_M", e, _l1active_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1active_losses
        {
            get
            {
                return this._l1active_losses;
            }
            set
            {
                if ((this._l1active_losses != value))
                {
                    Nullable<double> old = this._l1active_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_lossesChanging(e);
                    this.OnPropertyChanging("L1active_losses", e, _l1active_lossesAttribute);
                    this._l1active_losses = value;
                    this.OnL1active_lossesChanged(e);
                    this.OnPropertyChanged("L1active_losses", e, _l1active_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_line_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1reactive_line_losses_P
        {
            get
            {
                return this._l1reactive_line_losses_P;
            }
            set
            {
                if ((this._l1reactive_line_losses_P != value))
                {
                    Nullable<double> old = this._l1reactive_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_line_losses_PChanging(e);
                    this.OnPropertyChanging("L1reactive_line_losses_P", e, _l1reactive_line_losses_PAttribute);
                    this._l1reactive_line_losses_P = value;
                    this.OnL1reactive_line_losses_PChanged(e);
                    this.OnPropertyChanged("L1reactive_line_losses_P", e, _l1reactive_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_line_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1reactive_line_losses_M
        {
            get
            {
                return this._l1reactive_line_losses_M;
            }
            set
            {
                if ((this._l1reactive_line_losses_M != value))
                {
                    Nullable<double> old = this._l1reactive_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_line_losses_MChanging(e);
                    this.OnPropertyChanging("L1reactive_line_losses_M", e, _l1reactive_line_losses_MAttribute);
                    this._l1reactive_line_losses_M = value;
                    this.OnL1reactive_line_losses_MChanged(e);
                    this.OnPropertyChanged("L1reactive_line_losses_M", e, _l1reactive_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_line_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1reactive_line_losses
        {
            get
            {
                return this._l1reactive_line_losses;
            }
            set
            {
                if ((this._l1reactive_line_losses != value))
                {
                    Nullable<double> old = this._l1reactive_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_line_lossesChanging(e);
                    this.OnPropertyChanging("L1reactive_line_losses", e, _l1reactive_line_lossesAttribute);
                    this._l1reactive_line_losses = value;
                    this.OnL1reactive_line_lossesChanged(e);
                    this.OnPropertyChanged("L1reactive_line_losses", e, _l1reactive_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_transformer_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1reactive_transformer_losses_P
        {
            get
            {
                return this._l1reactive_transformer_losses_P;
            }
            set
            {
                if ((this._l1reactive_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l1reactive_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L1reactive_transformer_losses_P", e, _l1reactive_transformer_losses_PAttribute);
                    this._l1reactive_transformer_losses_P = value;
                    this.OnL1reactive_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L1reactive_transformer_losses_P", e, _l1reactive_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_transformer_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1reactive_transformer_losses_M
        {
            get
            {
                return this._l1reactive_transformer_losses_M;
            }
            set
            {
                if ((this._l1reactive_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l1reactive_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L1reactive_transformer_losses_M", e, _l1reactive_transformer_losses_MAttribute);
                    this._l1reactive_transformer_losses_M = value;
                    this.OnL1reactive_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L1reactive_transformer_losses_M", e, _l1reactive_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_transformer_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1reactive_transformer_losses
        {
            get
            {
                return this._l1reactive_transformer_losses;
            }
            set
            {
                if ((this._l1reactive_transformer_losses != value))
                {
                    Nullable<double> old = this._l1reactive_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L1reactive_transformer_losses", e, _l1reactive_transformer_lossesAttribute);
                    this._l1reactive_transformer_losses = value;
                    this.OnL1reactive_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L1reactive_transformer_losses", e, _l1reactive_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1Reactive_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1Reactive_losses_P
        {
            get
            {
                return this._l1Reactive_losses_P;
            }
            set
            {
                if ((this._l1Reactive_losses_P != value))
                {
                    Nullable<double> old = this._l1Reactive_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1Reactive_losses_PChanging(e);
                    this.OnPropertyChanging("L1Reactive_losses_P", e, _l1Reactive_losses_PAttribute);
                    this._l1Reactive_losses_P = value;
                    this.OnL1Reactive_losses_PChanged(e);
                    this.OnPropertyChanged("L1Reactive_losses_P", e, _l1Reactive_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1Reactive_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1Reactive_losses_M
        {
            get
            {
                return this._l1Reactive_losses_M;
            }
            set
            {
                if ((this._l1Reactive_losses_M != value))
                {
                    Nullable<double> old = this._l1Reactive_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1Reactive_losses_MChanging(e);
                    this.OnPropertyChanging("L1Reactive_losses_M", e, _l1Reactive_losses_MAttribute);
                    this._l1Reactive_losses_M = value;
                    this.OnL1Reactive_losses_MChanged(e);
                    this.OnPropertyChanged("L1Reactive_losses_M", e, _l1Reactive_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1Reactive_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1Reactive_losses
        {
            get
            {
                return this._l1Reactive_losses;
            }
            set
            {
                if ((this._l1Reactive_losses != value))
                {
                    Nullable<double> old = this._l1Reactive_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1Reactive_lossesChanging(e);
                    this.OnPropertyChanging("L1Reactive_losses", e, _l1Reactive_lossesAttribute);
                    this._l1Reactive_losses = value;
                    this.OnL1Reactive_lossesChanged(e);
                    this.OnPropertyChanged("L1Reactive_losses", e, _l1Reactive_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1Ampere_squared_hours property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1Ampere_squared_hours
        {
            get
            {
                return this._l1Ampere_squared_hours;
            }
            set
            {
                if ((this._l1Ampere_squared_hours != value))
                {
                    Nullable<double> old = this._l1Ampere_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1Ampere_squared_hoursChanging(e);
                    this.OnPropertyChanging("L1Ampere_squared_hours", e, _l1Ampere_squared_hoursAttribute);
                    this._l1Ampere_squared_hours = value;
                    this.OnL1Ampere_squared_hoursChanged(e);
                    this.OnPropertyChanged("L1Ampere_squared_hours", e, _l1Ampere_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1Volt_squared_hours property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L1Volt_squared_hours
        {
            get
            {
                return this._l1Volt_squared_hours;
            }
            set
            {
                if ((this._l1Volt_squared_hours != value))
                {
                    Nullable<double> old = this._l1Volt_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1Volt_squared_hoursChanging(e);
                    this.OnPropertyChanging("L1Volt_squared_hours", e, _l1Volt_squared_hoursAttribute);
                    this._l1Volt_squared_hours = value;
                    this.OnL1Volt_squared_hoursChanged(e);
                    this.OnPropertyChanged("L1Volt_squared_hours", e, _l1Volt_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_line_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2active_line_losses_P
        {
            get
            {
                return this._l2active_line_losses_P;
            }
            set
            {
                if ((this._l2active_line_losses_P != value))
                {
                    Nullable<double> old = this._l2active_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_line_losses_PChanging(e);
                    this.OnPropertyChanging("L2active_line_losses_P", e, _l2active_line_losses_PAttribute);
                    this._l2active_line_losses_P = value;
                    this.OnL2active_line_losses_PChanged(e);
                    this.OnPropertyChanged("L2active_line_losses_P", e, _l2active_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_line_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2active_line_losses_M
        {
            get
            {
                return this._l2active_line_losses_M;
            }
            set
            {
                if ((this._l2active_line_losses_M != value))
                {
                    Nullable<double> old = this._l2active_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_line_losses_MChanging(e);
                    this.OnPropertyChanging("L2active_line_losses_M", e, _l2active_line_losses_MAttribute);
                    this._l2active_line_losses_M = value;
                    this.OnL2active_line_losses_MChanged(e);
                    this.OnPropertyChanged("L2active_line_losses_M", e, _l2active_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_transformer_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2active_transformer_losses_P
        {
            get
            {
                return this._l2active_transformer_losses_P;
            }
            set
            {
                if ((this._l2active_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l2active_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L2active_transformer_losses_P", e, _l2active_transformer_losses_PAttribute);
                    this._l2active_transformer_losses_P = value;
                    this.OnL2active_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L2active_transformer_losses_P", e, _l2active_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_transformer_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2active_transformer_losses_M
        {
            get
            {
                return this._l2active_transformer_losses_M;
            }
            set
            {
                if ((this._l2active_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l2active_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L2active_transformer_losses_M", e, _l2active_transformer_losses_MAttribute);
                    this._l2active_transformer_losses_M = value;
                    this.OnL2active_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L2active_transformer_losses_M", e, _l2active_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_transformer_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2active_transformer_losses
        {
            get
            {
                return this._l2active_transformer_losses;
            }
            set
            {
                if ((this._l2active_transformer_losses != value))
                {
                    Nullable<double> old = this._l2active_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L2active_transformer_losses", e, _l2active_transformer_lossesAttribute);
                    this._l2active_transformer_losses = value;
                    this.OnL2active_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L2active_transformer_losses", e, _l2active_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2active_losses_P
        {
            get
            {
                return this._l2active_losses_P;
            }
            set
            {
                if ((this._l2active_losses_P != value))
                {
                    Nullable<double> old = this._l2active_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_losses_PChanging(e);
                    this.OnPropertyChanging("L2active_losses_P", e, _l2active_losses_PAttribute);
                    this._l2active_losses_P = value;
                    this.OnL2active_losses_PChanged(e);
                    this.OnPropertyChanged("L2active_losses_P", e, _l2active_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2active_losses_M
        {
            get
            {
                return this._l2active_losses_M;
            }
            set
            {
                if ((this._l2active_losses_M != value))
                {
                    Nullable<double> old = this._l2active_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_losses_MChanging(e);
                    this.OnPropertyChanging("L2active_losses_M", e, _l2active_losses_MAttribute);
                    this._l2active_losses_M = value;
                    this.OnL2active_losses_MChanged(e);
                    this.OnPropertyChanged("L2active_losses_M", e, _l2active_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2active_losses
        {
            get
            {
                return this._l2active_losses;
            }
            set
            {
                if ((this._l2active_losses != value))
                {
                    Nullable<double> old = this._l2active_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_lossesChanging(e);
                    this.OnPropertyChanging("L2active_losses", e, _l2active_lossesAttribute);
                    this._l2active_losses = value;
                    this.OnL2active_lossesChanged(e);
                    this.OnPropertyChanged("L2active_losses", e, _l2active_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_line_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2reactive_line_losses_P
        {
            get
            {
                return this._l2reactive_line_losses_P;
            }
            set
            {
                if ((this._l2reactive_line_losses_P != value))
                {
                    Nullable<double> old = this._l2reactive_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_line_losses_PChanging(e);
                    this.OnPropertyChanging("L2reactive_line_losses_P", e, _l2reactive_line_losses_PAttribute);
                    this._l2reactive_line_losses_P = value;
                    this.OnL2reactive_line_losses_PChanged(e);
                    this.OnPropertyChanged("L2reactive_line_losses_P", e, _l2reactive_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_line_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2reactive_line_losses_M
        {
            get
            {
                return this._l2reactive_line_losses_M;
            }
            set
            {
                if ((this._l2reactive_line_losses_M != value))
                {
                    Nullable<double> old = this._l2reactive_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_line_losses_MChanging(e);
                    this.OnPropertyChanging("L2reactive_line_losses_M", e, _l2reactive_line_losses_MAttribute);
                    this._l2reactive_line_losses_M = value;
                    this.OnL2reactive_line_losses_MChanged(e);
                    this.OnPropertyChanged("L2reactive_line_losses_M", e, _l2reactive_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_line_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2reactive_line_losses
        {
            get
            {
                return this._l2reactive_line_losses;
            }
            set
            {
                if ((this._l2reactive_line_losses != value))
                {
                    Nullable<double> old = this._l2reactive_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_line_lossesChanging(e);
                    this.OnPropertyChanging("L2reactive_line_losses", e, _l2reactive_line_lossesAttribute);
                    this._l2reactive_line_losses = value;
                    this.OnL2reactive_line_lossesChanged(e);
                    this.OnPropertyChanged("L2reactive_line_losses", e, _l2reactive_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_transformer_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2reactive_transformer_losses
        {
            get
            {
                return this._l2reactive_transformer_losses;
            }
            set
            {
                if ((this._l2reactive_transformer_losses != value))
                {
                    Nullable<double> old = this._l2reactive_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L2reactive_transformer_losses", e, _l2reactive_transformer_lossesAttribute);
                    this._l2reactive_transformer_losses = value;
                    this.OnL2reactive_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L2reactive_transformer_losses", e, _l2reactive_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_transformer_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2reactive_transformer_losses_P
        {
            get
            {
                return this._l2reactive_transformer_losses_P;
            }
            set
            {
                if ((this._l2reactive_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l2reactive_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L2reactive_transformer_losses_P", e, _l2reactive_transformer_losses_PAttribute);
                    this._l2reactive_transformer_losses_P = value;
                    this.OnL2reactive_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L2reactive_transformer_losses_P", e, _l2reactive_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_transformer_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2reactive_transformer_losses_M
        {
            get
            {
                return this._l2reactive_transformer_losses_M;
            }
            set
            {
                if ((this._l2reactive_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l2reactive_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L2reactive_transformer_losses_M", e, _l2reactive_transformer_losses_MAttribute);
                    this._l2reactive_transformer_losses_M = value;
                    this.OnL2reactive_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L2reactive_transformer_losses_M", e, _l2reactive_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2reactive_losses
        {
            get
            {
                return this._l2reactive_losses;
            }
            set
            {
                if ((this._l2reactive_losses != value))
                {
                    Nullable<double> old = this._l2reactive_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_lossesChanging(e);
                    this.OnPropertyChanging("L2reactive_losses", e, _l2reactive_lossesAttribute);
                    this._l2reactive_losses = value;
                    this.OnL2reactive_lossesChanged(e);
                    this.OnPropertyChanged("L2reactive_losses", e, _l2reactive_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2reactive_losses_P
        {
            get
            {
                return this._l2reactive_losses_P;
            }
            set
            {
                if ((this._l2reactive_losses_P != value))
                {
                    Nullable<double> old = this._l2reactive_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_losses_PChanging(e);
                    this.OnPropertyChanging("L2reactive_losses_P", e, _l2reactive_losses_PAttribute);
                    this._l2reactive_losses_P = value;
                    this.OnL2reactive_losses_PChanged(e);
                    this.OnPropertyChanged("L2reactive_losses_P", e, _l2reactive_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2reactive_losses_M
        {
            get
            {
                return this._l2reactive_losses_M;
            }
            set
            {
                if ((this._l2reactive_losses_M != value))
                {
                    Nullable<double> old = this._l2reactive_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_losses_MChanging(e);
                    this.OnPropertyChanging("L2reactive_losses_M", e, _l2reactive_losses_MAttribute);
                    this._l2reactive_losses_M = value;
                    this.OnL2reactive_losses_MChanged(e);
                    this.OnPropertyChanged("L2reactive_losses_M", e, _l2reactive_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2Ampere_squared_hours property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2Ampere_squared_hours
        {
            get
            {
                return this._l2Ampere_squared_hours;
            }
            set
            {
                if ((this._l2Ampere_squared_hours != value))
                {
                    Nullable<double> old = this._l2Ampere_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2Ampere_squared_hoursChanging(e);
                    this.OnPropertyChanging("L2Ampere_squared_hours", e, _l2Ampere_squared_hoursAttribute);
                    this._l2Ampere_squared_hours = value;
                    this.OnL2Ampere_squared_hoursChanged(e);
                    this.OnPropertyChanged("L2Ampere_squared_hours", e, _l2Ampere_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2Volt_squared_hours property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L2Volt_squared_hours
        {
            get
            {
                return this._l2Volt_squared_hours;
            }
            set
            {
                if ((this._l2Volt_squared_hours != value))
                {
                    Nullable<double> old = this._l2Volt_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2Volt_squared_hoursChanging(e);
                    this.OnPropertyChanging("L2Volt_squared_hours", e, _l2Volt_squared_hoursAttribute);
                    this._l2Volt_squared_hours = value;
                    this.OnL2Volt_squared_hoursChanged(e);
                    this.OnPropertyChanged("L2Volt_squared_hours", e, _l2Volt_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3Active_line_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3Active_line_losses_P
        {
            get
            {
                return this._l3Active_line_losses_P;
            }
            set
            {
                if ((this._l3Active_line_losses_P != value))
                {
                    Nullable<double> old = this._l3Active_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3Active_line_losses_PChanging(e);
                    this.OnPropertyChanging("L3Active_line_losses_P", e, _l3Active_line_losses_PAttribute);
                    this._l3Active_line_losses_P = value;
                    this.OnL3Active_line_losses_PChanged(e);
                    this.OnPropertyChanged("L3Active_line_losses_P", e, _l3Active_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3Active_line_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3Active_line_losses_M
        {
            get
            {
                return this._l3Active_line_losses_M;
            }
            set
            {
                if ((this._l3Active_line_losses_M != value))
                {
                    Nullable<double> old = this._l3Active_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3Active_line_losses_MChanging(e);
                    this.OnPropertyChanging("L3Active_line_losses_M", e, _l3Active_line_losses_MAttribute);
                    this._l3Active_line_losses_M = value;
                    this.OnL3Active_line_losses_MChanged(e);
                    this.OnPropertyChanged("L3Active_line_losses_M", e, _l3Active_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_transformer_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3active_transformer_losses_P
        {
            get
            {
                return this._l3active_transformer_losses_P;
            }
            set
            {
                if ((this._l3active_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l3active_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L3active_transformer_losses_P", e, _l3active_transformer_losses_PAttribute);
                    this._l3active_transformer_losses_P = value;
                    this.OnL3active_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L3active_transformer_losses_P", e, _l3active_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_transformer_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3active_transformer_losses_M
        {
            get
            {
                return this._l3active_transformer_losses_M;
            }
            set
            {
                if ((this._l3active_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l3active_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L3active_transformer_losses_M", e, _l3active_transformer_losses_MAttribute);
                    this._l3active_transformer_losses_M = value;
                    this.OnL3active_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L3active_transformer_losses_M", e, _l3active_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_transformer_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3active_transformer_losses
        {
            get
            {
                return this._l3active_transformer_losses;
            }
            set
            {
                if ((this._l3active_transformer_losses != value))
                {
                    Nullable<double> old = this._l3active_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L3active_transformer_losses", e, _l3active_transformer_lossesAttribute);
                    this._l3active_transformer_losses = value;
                    this.OnL3active_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L3active_transformer_losses", e, _l3active_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3active_losses_P
        {
            get
            {
                return this._l3active_losses_P;
            }
            set
            {
                if ((this._l3active_losses_P != value))
                {
                    Nullable<double> old = this._l3active_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_losses_PChanging(e);
                    this.OnPropertyChanging("L3active_losses_P", e, _l3active_losses_PAttribute);
                    this._l3active_losses_P = value;
                    this.OnL3active_losses_PChanged(e);
                    this.OnPropertyChanged("L3active_losses_P", e, _l3active_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3active_losses_M
        {
            get
            {
                return this._l3active_losses_M;
            }
            set
            {
                if ((this._l3active_losses_M != value))
                {
                    Nullable<double> old = this._l3active_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_losses_MChanging(e);
                    this.OnPropertyChanging("L3active_losses_M", e, _l3active_losses_MAttribute);
                    this._l3active_losses_M = value;
                    this.OnL3active_losses_MChanged(e);
                    this.OnPropertyChanged("L3active_losses_M", e, _l3active_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3active_losses
        {
            get
            {
                return this._l3active_losses;
            }
            set
            {
                if ((this._l3active_losses != value))
                {
                    Nullable<double> old = this._l3active_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_lossesChanging(e);
                    this.OnPropertyChanging("L3active_losses", e, _l3active_lossesAttribute);
                    this._l3active_losses = value;
                    this.OnL3active_lossesChanged(e);
                    this.OnPropertyChanged("L3active_losses", e, _l3active_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_line_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3reactive_line_losses_P
        {
            get
            {
                return this._l3reactive_line_losses_P;
            }
            set
            {
                if ((this._l3reactive_line_losses_P != value))
                {
                    Nullable<double> old = this._l3reactive_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_line_losses_PChanging(e);
                    this.OnPropertyChanging("L3reactive_line_losses_P", e, _l3reactive_line_losses_PAttribute);
                    this._l3reactive_line_losses_P = value;
                    this.OnL3reactive_line_losses_PChanged(e);
                    this.OnPropertyChanged("L3reactive_line_losses_P", e, _l3reactive_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_line_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3reactive_line_losses_M
        {
            get
            {
                return this._l3reactive_line_losses_M;
            }
            set
            {
                if ((this._l3reactive_line_losses_M != value))
                {
                    Nullable<double> old = this._l3reactive_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_line_losses_MChanging(e);
                    this.OnPropertyChanging("L3reactive_line_losses_M", e, _l3reactive_line_losses_MAttribute);
                    this._l3reactive_line_losses_M = value;
                    this.OnL3reactive_line_losses_MChanged(e);
                    this.OnPropertyChanged("L3reactive_line_losses_M", e, _l3reactive_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_line_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3reactive_line_losses
        {
            get
            {
                return this._l3reactive_line_losses;
            }
            set
            {
                if ((this._l3reactive_line_losses != value))
                {
                    Nullable<double> old = this._l3reactive_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_line_lossesChanging(e);
                    this.OnPropertyChanging("L3reactive_line_losses", e, _l3reactive_line_lossesAttribute);
                    this._l3reactive_line_losses = value;
                    this.OnL3reactive_line_lossesChanged(e);
                    this.OnPropertyChanged("L3reactive_line_losses", e, _l3reactive_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_transformer_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3reactive_transformer_losses_P
        {
            get
            {
                return this._l3reactive_transformer_losses_P;
            }
            set
            {
                if ((this._l3reactive_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l3reactive_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L3reactive_transformer_losses_P", e, _l3reactive_transformer_losses_PAttribute);
                    this._l3reactive_transformer_losses_P = value;
                    this.OnL3reactive_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L3reactive_transformer_losses_P", e, _l3reactive_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_transformer_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3reactive_transformer_losses_M
        {
            get
            {
                return this._l3reactive_transformer_losses_M;
            }
            set
            {
                if ((this._l3reactive_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l3reactive_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L3reactive_transformer_losses_M", e, _l3reactive_transformer_losses_MAttribute);
                    this._l3reactive_transformer_losses_M = value;
                    this.OnL3reactive_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L3reactive_transformer_losses_M", e, _l3reactive_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_transformer_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3reactive_transformer_losses
        {
            get
            {
                return this._l3reactive_transformer_losses;
            }
            set
            {
                if ((this._l3reactive_transformer_losses != value))
                {
                    Nullable<double> old = this._l3reactive_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L3reactive_transformer_losses", e, _l3reactive_transformer_lossesAttribute);
                    this._l3reactive_transformer_losses = value;
                    this.OnL3reactive_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L3reactive_transformer_losses", e, _l3reactive_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_losses_P property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3reactive_losses_P
        {
            get
            {
                return this._l3reactive_losses_P;
            }
            set
            {
                if ((this._l3reactive_losses_P != value))
                {
                    Nullable<double> old = this._l3reactive_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_losses_PChanging(e);
                    this.OnPropertyChanging("L3reactive_losses_P", e, _l3reactive_losses_PAttribute);
                    this._l3reactive_losses_P = value;
                    this.OnL3reactive_losses_PChanged(e);
                    this.OnPropertyChanged("L3reactive_losses_P", e, _l3reactive_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_losses_M property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3reactive_losses_M
        {
            get
            {
                return this._l3reactive_losses_M;
            }
            set
            {
                if ((this._l3reactive_losses_M != value))
                {
                    Nullable<double> old = this._l3reactive_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_losses_MChanging(e);
                    this.OnPropertyChanging("L3reactive_losses_M", e, _l3reactive_losses_MAttribute);
                    this._l3reactive_losses_M = value;
                    this.OnL3reactive_losses_MChanged(e);
                    this.OnPropertyChanged("L3reactive_losses_M", e, _l3reactive_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_losses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3reactive_losses
        {
            get
            {
                return this._l3reactive_losses;
            }
            set
            {
                if ((this._l3reactive_losses != value))
                {
                    Nullable<double> old = this._l3reactive_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_lossesChanging(e);
                    this.OnPropertyChanging("L3reactive_losses", e, _l3reactive_lossesAttribute);
                    this._l3reactive_losses = value;
                    this.OnL3reactive_lossesChanged(e);
                    this.OnPropertyChanged("L3reactive_losses", e, _l3reactive_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3Ampere_squared_hours property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3Ampere_squared_hours
        {
            get
            {
                return this._l3Ampere_squared_hours;
            }
            set
            {
                if ((this._l3Ampere_squared_hours != value))
                {
                    Nullable<double> old = this._l3Ampere_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3Ampere_squared_hoursChanging(e);
                    this.OnPropertyChanging("L3Ampere_squared_hours", e, _l3Ampere_squared_hoursAttribute);
                    this._l3Ampere_squared_hours = value;
                    this.OnL3Ampere_squared_hoursChanged(e);
                    this.OnPropertyChanged("L3Ampere_squared_hours", e, _l3Ampere_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3Volt_Squared_hours property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> L3Volt_Squared_hours
        {
            get
            {
                return this._l3Volt_Squared_hours;
            }
            set
            {
                if ((this._l3Volt_Squared_hours != value))
                {
                    Nullable<double> old = this._l3Volt_Squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3Volt_Squared_hoursChanging(e);
                    this.OnPropertyChanging("L3Volt_Squared_hours", e, _l3Volt_Squared_hoursAttribute);
                    this._l3Volt_Squared_hours = value;
                    this.OnL3Volt_Squared_hoursChanged(e);
                    this.OnPropertyChanged("L3Volt_Squared_hours", e, _l3Volt_Squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Tr" +
                            "ansformerAndLineLosses")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Active_line_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Active_line_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Active_line_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Active_line_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Active_line_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Active_line_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Active_transformer_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Active_transformer_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Active_transformer_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Active_transformer_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Active_transformer_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Active_transformer_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Active_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Active_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Active_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Active_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Active_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Active_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_line_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_line_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_line_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_line_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_line_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_line_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_transformer_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_transformer_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_transformer_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_transformer_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_transformer_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_transformer_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Total_normalized_transformer_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Total_normalized_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Total_normalized_transformer_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Total_normalized_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Total_normalized_line_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Total_normalized_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Total_normalized_line_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Total_normalized_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_gross_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_active_gross_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_gross_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_active_gross_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_net_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_active_net_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_net_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_active_net_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_gross_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_active_gross_MChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_gross_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_active_gross_MChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_net_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_active_net_MChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_net_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_active_net_MChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_gross_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_gross_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_net_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_reactive_net_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_net_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_reactive_net_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_gross_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_MChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_gross_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_MChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_net_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_reactive_net_MChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_net_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compensated_reactive_net_MChanged;
        
        /// <summary>
        /// Gets fired before the L1active_line_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1active_line_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1active_line_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1active_line_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1active_transformer_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1active_transformer_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1active_transformer_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1active_transformer_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1active_transformer_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1active_transformer_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1active_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1active_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1active_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1active_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1active_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1active_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_line_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_line_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_line_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_line_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_line_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_line_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_transformer_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_transformer_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_transformer_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_transformer_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_transformer_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_transformer_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1Reactive_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1Reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1Reactive_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1Reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1Reactive_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1Reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1Reactive_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1Reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1Reactive_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1Reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1Reactive_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1Reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1Ampere_squared_hours property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L1Ampere_squared_hours property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L1Volt_squared_hours property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1Volt_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L1Volt_squared_hours property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L1Volt_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L2active_line_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2active_line_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2active_line_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2active_line_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2active_transformer_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2active_transformer_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2active_transformer_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2active_transformer_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2active_transformer_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2active_transformer_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2active_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2active_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2active_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2active_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2active_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2active_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_line_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_line_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_line_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_line_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_line_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_line_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_transformer_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_transformer_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_transformer_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_transformer_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_transformer_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_transformer_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2Ampere_squared_hours property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L2Ampere_squared_hours property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L2Volt_squared_hours property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2Volt_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L2Volt_squared_hours property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L2Volt_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L3Active_line_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3Active_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3Active_line_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3Active_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3Active_line_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3Active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3Active_line_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3Active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3active_transformer_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3active_transformer_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3active_transformer_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3active_transformer_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3active_transformer_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3active_transformer_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3active_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3active_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3active_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3active_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3active_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3active_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_line_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_line_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_line_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_line_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_line_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_line_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_transformer_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_transformer_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_transformer_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_transformer_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_transformer_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_transformer_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_losses_P property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_losses_P property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_losses_M property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_losses_M property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_losses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_losses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3Ampere_squared_hours property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L3Ampere_squared_hours property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L3Volt_Squared_hours property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3Volt_Squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L3Volt_Squared_hours property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> L3Volt_Squared_hoursChanged;
        
        private static ITypedElement RetrieveActive_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Active_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the Active_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Active_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the Active_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Active_line_losses")));
        }
        
        /// <summary>
        /// Raises the Active_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Active_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the Active_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Active_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the Active_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Active_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the Active_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Active_losses_P")));
        }
        
        /// <summary>
        /// Raises the Active_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Active_losses_M")));
        }
        
        /// <summary>
        /// Raises the Active_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Active_losses")));
        }
        
        /// <summary>
        /// Raises the Active_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the Reactive_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the Reactive_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_line_losses")));
        }
        
        /// <summary>
        /// Raises the Reactive_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_losses_P")));
        }
        
        /// <summary>
        /// Raises the Reactive_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_losses_M")));
        }
        
        /// <summary>
        /// Raises the Reactive_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_losses")));
        }
        
        /// <summary>
        /// Raises the Reactive_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTotal_normalized_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Total_normalized_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the Total_normalized_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_normalized_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Total_normalized_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Total_normalized_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_normalized_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Total_normalized_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTotal_normalized_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Total_normalized_line_losses")));
        }
        
        /// <summary>
        /// Raises the Total_normalized_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_normalized_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Total_normalized_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Total_normalized_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_normalized_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Total_normalized_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_active_gross_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_active_gross_P")));
        }
        
        /// <summary>
        /// Raises the Compensated_active_gross_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_gross_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_gross_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_active_gross_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_gross_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_gross_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_active_net_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_active_net_P")));
        }
        
        /// <summary>
        /// Raises the Compensated_active_net_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_net_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_net_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_active_net_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_net_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_net_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_active_gross_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_active_gross_M")));
        }
        
        /// <summary>
        /// Raises the Compensated_active_gross_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_gross_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_gross_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_active_gross_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_gross_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_gross_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_active_net_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_active_net_M")));
        }
        
        /// <summary>
        /// Raises the Compensated_active_net_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_net_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_net_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_active_net_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_net_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_net_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_reactive_gross_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_reactive_gross_P")));
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_gross_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_gross_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_gross_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_gross_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_gross_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_gross_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_reactive_net_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_reactive_net_P")));
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_net_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_net_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_net_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_net_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_net_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_net_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_reactive_gross_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_reactive_gross_M")));
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_gross_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_gross_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_gross_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_gross_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_gross_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_gross_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_reactive_net_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_reactive_net_M")));
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_net_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_net_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_net_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_net_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_net_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_net_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1active_line_losses")));
        }
        
        /// <summary>
        /// Raises the L1active_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1active_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1active_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1active_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L1active_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1active_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1active_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1active_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L1active_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1active_losses_P")));
        }
        
        /// <summary>
        /// Raises the L1active_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1active_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1active_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1active_losses")));
        }
        
        /// <summary>
        /// Raises the L1active_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1active_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the L1reactive_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1reactive_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_line_losses")));
        }
        
        /// <summary>
        /// Raises the L1reactive_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1Reactive_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1Reactive_losses_P")));
        }
        
        /// <summary>
        /// Raises the L1Reactive_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1Reactive_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1Reactive_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1Reactive_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1Reactive_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1Reactive_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1Reactive_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1Reactive_losses")));
        }
        
        /// <summary>
        /// Raises the L1Reactive_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1Reactive_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1Ampere_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1Ampere_squared_hours")));
        }
        
        /// <summary>
        /// Raises the L1Ampere_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Ampere_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1Ampere_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1Ampere_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Ampere_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1Ampere_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1Volt_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L1Volt_squared_hours")));
        }
        
        /// <summary>
        /// Raises the L1Volt_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Volt_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1Volt_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1Volt_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Volt_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L1Volt_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2active_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2active_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2active_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2active_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2active_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2active_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2active_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2active_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2active_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L2active_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2active_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2active_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2active_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2active_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2active_losses")));
        }
        
        /// <summary>
        /// Raises the L2active_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2active_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2reactive_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2reactive_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_line_losses")));
        }
        
        /// <summary>
        /// Raises the L2reactive_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_losses")));
        }
        
        /// <summary>
        /// Raises the L2reactive_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2reactive_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2reactive_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2reactive_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2Ampere_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2Ampere_squared_hours")));
        }
        
        /// <summary>
        /// Raises the L2Ampere_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2Ampere_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2Ampere_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2Ampere_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2Ampere_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2Ampere_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2Volt_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L2Volt_squared_hours")));
        }
        
        /// <summary>
        /// Raises the L2Volt_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2Volt_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2Volt_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2Volt_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2Volt_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L2Volt_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3Active_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3Active_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3Active_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Active_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3Active_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3Active_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Active_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3Active_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3Active_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3Active_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3Active_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Active_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3Active_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3Active_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Active_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3Active_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3active_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3active_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3active_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3active_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3active_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L3active_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3active_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3active_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3active_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3active_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3active_losses")));
        }
        
        /// <summary>
        /// Raises the L3active_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3active_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3reactive_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3reactive_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_line_losses")));
        }
        
        /// <summary>
        /// Raises the L3reactive_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3reactive_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3reactive_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_losses")));
        }
        
        /// <summary>
        /// Raises the L3reactive_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3reactive_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3Ampere_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3Ampere_squared_hours")));
        }
        
        /// <summary>
        /// Raises the L3Ampere_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Ampere_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3Ampere_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3Ampere_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Ampere_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3Ampere_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3Volt_Squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerAndLineLosses.ClassInstance)).Resolve("L3Volt_Squared_hours")));
        }
        
        /// <summary>
        /// Raises the L3Volt_Squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Volt_Squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3Volt_Squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3Volt_Squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Volt_Squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.L3Volt_Squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVE_LINE_LOSSES_P"))
            {
                return this.Active_line_losses_P;
            }
            if ((attribute == "ACTIVE_LINE_LOSSES_M"))
            {
                return this.Active_line_losses_M;
            }
            if ((attribute == "ACTIVE_LINE_LOSSES"))
            {
                return this.Active_line_losses;
            }
            if ((attribute == "ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.Active_transformer_losses_P;
            }
            if ((attribute == "ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.Active_transformer_losses_M;
            }
            if ((attribute == "ACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.Active_transformer_losses;
            }
            if ((attribute == "ACTIVE_LOSSES_P"))
            {
                return this.Active_losses_P;
            }
            if ((attribute == "ACTIVE_LOSSES_M"))
            {
                return this.Active_losses_M;
            }
            if ((attribute == "ACTIVE_LOSSES"))
            {
                return this.Active_losses;
            }
            if ((attribute == "REACTIVE_LINE_LOSSES_P"))
            {
                return this.Reactive_line_losses_P;
            }
            if ((attribute == "REACTIVE_LINE_LOSSES_M"))
            {
                return this.Reactive_line_losses_M;
            }
            if ((attribute == "REACTIVE_LINE_LOSSES"))
            {
                return this.Reactive_line_losses;
            }
            if ((attribute == "REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.Reactive_transformer_losses_P;
            }
            if ((attribute == "REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.Reactive_transformer_losses_M;
            }
            if ((attribute == "REACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.Reactive_transformer_losses;
            }
            if ((attribute == "REACTIVE_LOSSES_P"))
            {
                return this.Reactive_losses_P;
            }
            if ((attribute == "REACTIVE_LOSSES_M"))
            {
                return this.Reactive_losses_M;
            }
            if ((attribute == "REACTIVE_LOSSES"))
            {
                return this.Reactive_losses;
            }
            if ((attribute == "TOTAL_NORMALIZED_TRANSFORMER_LOSSES"))
            {
                return this.Total_normalized_transformer_losses;
            }
            if ((attribute == "TOTAL_NORMALIZED_LINE_LOSSES"))
            {
                return this.Total_normalized_line_losses;
            }
            if ((attribute == "COMPENSATED_ACTIVE_GROSS_P"))
            {
                return this.Compensated_active_gross_P;
            }
            if ((attribute == "COMPENSATED_ACTIVE_NET_P"))
            {
                return this.Compensated_active_net_P;
            }
            if ((attribute == "COMPENSATED_ACTIVE_GROSS_M"))
            {
                return this.Compensated_active_gross_M;
            }
            if ((attribute == "COMPENSATED_ACTIVE_NET_M"))
            {
                return this.Compensated_active_net_M;
            }
            if ((attribute == "COMPENSATED_REACTIVE_GROSS_P"))
            {
                return this.Compensated_reactive_gross_P;
            }
            if ((attribute == "COMPENSATED_REACTIVE_NET_P"))
            {
                return this.Compensated_reactive_net_P;
            }
            if ((attribute == "COMPENSATED_REACTIVE_GROSS_M"))
            {
                return this.Compensated_reactive_gross_M;
            }
            if ((attribute == "COMPENSATED_REACTIVE_NET_M"))
            {
                return this.Compensated_reactive_net_M;
            }
            if ((attribute == "L1ACTIVE_LINE_LOSSES"))
            {
                return this.L1active_line_losses;
            }
            if ((attribute == "L1ACTIVE_LINE_LOSSES_M"))
            {
                return this.L1active_line_losses_M;
            }
            if ((attribute == "L1ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L1active_transformer_losses_P;
            }
            if ((attribute == "L1ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L1active_transformer_losses_M;
            }
            if ((attribute == "L1ACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L1active_transformer_losses;
            }
            if ((attribute == "L1ACTIVE_LOSSES_P"))
            {
                return this.L1active_losses_P;
            }
            if ((attribute == "L1ACTIVE_LOSSES_M"))
            {
                return this.L1active_losses_M;
            }
            if ((attribute == "L1ACTIVE_LOSSES"))
            {
                return this.L1active_losses;
            }
            if ((attribute == "L1REACTIVE_LINE_LOSSES_P"))
            {
                return this.L1reactive_line_losses_P;
            }
            if ((attribute == "L1REACTIVE_LINE_LOSSES_M"))
            {
                return this.L1reactive_line_losses_M;
            }
            if ((attribute == "L1REACTIVE_LINE_LOSSES"))
            {
                return this.L1reactive_line_losses;
            }
            if ((attribute == "L1REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L1reactive_transformer_losses_P;
            }
            if ((attribute == "L1REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L1reactive_transformer_losses_M;
            }
            if ((attribute == "L1REACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L1reactive_transformer_losses;
            }
            if ((attribute == "L1REACTIVE_LOSSES_P"))
            {
                return this.L1Reactive_losses_P;
            }
            if ((attribute == "L1REACTIVE_LOSSES_M"))
            {
                return this.L1Reactive_losses_M;
            }
            if ((attribute == "L1REACTIVE_LOSSES"))
            {
                return this.L1Reactive_losses;
            }
            if ((attribute == "L1AMPERE_SQUARED_HOURS"))
            {
                return this.L1Ampere_squared_hours;
            }
            if ((attribute == "L1VOLT_SQUARED_HOURS"))
            {
                return this.L1Volt_squared_hours;
            }
            if ((attribute == "L2ACTIVE_LINE_LOSSES_P"))
            {
                return this.L2active_line_losses_P;
            }
            if ((attribute == "L2ACTIVE_LINE_LOSSES_M"))
            {
                return this.L2active_line_losses_M;
            }
            if ((attribute == "L2ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L2active_transformer_losses_P;
            }
            if ((attribute == "L2ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L2active_transformer_losses_M;
            }
            if ((attribute == "L2ACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L2active_transformer_losses;
            }
            if ((attribute == "L2ACTIVE_LOSSES_P"))
            {
                return this.L2active_losses_P;
            }
            if ((attribute == "L2ACTIVE_LOSSES_M"))
            {
                return this.L2active_losses_M;
            }
            if ((attribute == "L2ACTIVE_LOSSES"))
            {
                return this.L2active_losses;
            }
            if ((attribute == "L2REACTIVE_LINE_LOSSES_P"))
            {
                return this.L2reactive_line_losses_P;
            }
            if ((attribute == "L2REACTIVE_LINE_LOSSES_M"))
            {
                return this.L2reactive_line_losses_M;
            }
            if ((attribute == "L2REACTIVE_LINE_LOSSES"))
            {
                return this.L2reactive_line_losses;
            }
            if ((attribute == "L2REACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L2reactive_transformer_losses;
            }
            if ((attribute == "L2REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L2reactive_transformer_losses_P;
            }
            if ((attribute == "L2REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L2reactive_transformer_losses_M;
            }
            if ((attribute == "L2REACTIVE_LOSSES"))
            {
                return this.L2reactive_losses;
            }
            if ((attribute == "L2REACTIVE_LOSSES_P"))
            {
                return this.L2reactive_losses_P;
            }
            if ((attribute == "L2REACTIVE_LOSSES_M"))
            {
                return this.L2reactive_losses_M;
            }
            if ((attribute == "L2AMPERE_SQUARED_HOURS"))
            {
                return this.L2Ampere_squared_hours;
            }
            if ((attribute == "L2VOLT_SQUARED_HOURS"))
            {
                return this.L2Volt_squared_hours;
            }
            if ((attribute == "L3ACTIVE_LINE_LOSSES_P"))
            {
                return this.L3Active_line_losses_P;
            }
            if ((attribute == "L3ACTIVE_LINE_LOSSES_M"))
            {
                return this.L3Active_line_losses_M;
            }
            if ((attribute == "L3ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L3active_transformer_losses_P;
            }
            if ((attribute == "L3ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L3active_transformer_losses_M;
            }
            if ((attribute == "L3ACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L3active_transformer_losses;
            }
            if ((attribute == "L3ACTIVE_LOSSES_P"))
            {
                return this.L3active_losses_P;
            }
            if ((attribute == "L3ACTIVE_LOSSES_M"))
            {
                return this.L3active_losses_M;
            }
            if ((attribute == "L3ACTIVE_LOSSES"))
            {
                return this.L3active_losses;
            }
            if ((attribute == "L3REACTIVE_LINE_LOSSES_P"))
            {
                return this.L3reactive_line_losses_P;
            }
            if ((attribute == "L3REACTIVE_LINE_LOSSES_M"))
            {
                return this.L3reactive_line_losses_M;
            }
            if ((attribute == "L3REACTIVE_LINE_LOSSES"))
            {
                return this.L3reactive_line_losses;
            }
            if ((attribute == "L3REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L3reactive_transformer_losses_P;
            }
            if ((attribute == "L3REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L3reactive_transformer_losses_M;
            }
            if ((attribute == "L3REACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L3reactive_transformer_losses;
            }
            if ((attribute == "L3REACTIVE_LOSSES_P"))
            {
                return this.L3reactive_losses_P;
            }
            if ((attribute == "L3REACTIVE_LOSSES_M"))
            {
                return this.L3reactive_losses_M;
            }
            if ((attribute == "L3REACTIVE_LOSSES"))
            {
                return this.L3reactive_losses;
            }
            if ((attribute == "L3AMPERE_SQUARED_HOURS"))
            {
                return this.L3Ampere_squared_hours;
            }
            if ((attribute == "L3VOLT_SQUARED_HOURS"))
            {
                return this.L3Volt_Squared_hours;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVE_LINE_LOSSES_P"))
            {
                this.Active_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_LINE_LOSSES_M"))
            {
                this.Active_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_LINE_LOSSES"))
            {
                this.Active_line_losses = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.Active_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.Active_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_TRANSFORMER_LOSSES"))
            {
                this.Active_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_LOSSES_P"))
            {
                this.Active_losses_P = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_LOSSES_M"))
            {
                this.Active_losses_M = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_LOSSES"))
            {
                this.Active_losses = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LINE_LOSSES_P"))
            {
                this.Reactive_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LINE_LOSSES_M"))
            {
                this.Reactive_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LINE_LOSSES"))
            {
                this.Reactive_line_losses = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.Reactive_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.Reactive_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_TRANSFORMER_LOSSES"))
            {
                this.Reactive_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LOSSES_P"))
            {
                this.Reactive_losses_P = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LOSSES_M"))
            {
                this.Reactive_losses_M = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LOSSES"))
            {
                this.Reactive_losses = ((double)(value));
                return;
            }
            if ((feature == "TOTAL_NORMALIZED_TRANSFORMER_LOSSES"))
            {
                this.Total_normalized_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "TOTAL_NORMALIZED_LINE_LOSSES"))
            {
                this.Total_normalized_line_losses = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_ACTIVE_GROSS_P"))
            {
                this.Compensated_active_gross_P = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_ACTIVE_NET_P"))
            {
                this.Compensated_active_net_P = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_ACTIVE_GROSS_M"))
            {
                this.Compensated_active_gross_M = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_ACTIVE_NET_M"))
            {
                this.Compensated_active_net_M = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_REACTIVE_GROSS_P"))
            {
                this.Compensated_reactive_gross_P = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_REACTIVE_NET_P"))
            {
                this.Compensated_reactive_net_P = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_REACTIVE_GROSS_M"))
            {
                this.Compensated_reactive_gross_M = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_REACTIVE_NET_M"))
            {
                this.Compensated_reactive_net_M = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_LINE_LOSSES"))
            {
                this.L1active_line_losses = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_LINE_LOSSES_M"))
            {
                this.L1active_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L1active_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L1active_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L1active_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_LOSSES_P"))
            {
                this.L1active_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_LOSSES_M"))
            {
                this.L1active_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_LOSSES"))
            {
                this.L1active_losses = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LINE_LOSSES_P"))
            {
                this.L1reactive_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LINE_LOSSES_M"))
            {
                this.L1reactive_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LINE_LOSSES"))
            {
                this.L1reactive_line_losses = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L1reactive_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L1reactive_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L1reactive_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LOSSES_P"))
            {
                this.L1Reactive_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LOSSES_M"))
            {
                this.L1Reactive_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LOSSES"))
            {
                this.L1Reactive_losses = ((double)(value));
                return;
            }
            if ((feature == "L1AMPERE_SQUARED_HOURS"))
            {
                this.L1Ampere_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "L1VOLT_SQUARED_HOURS"))
            {
                this.L1Volt_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_LINE_LOSSES_P"))
            {
                this.L2active_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_LINE_LOSSES_M"))
            {
                this.L2active_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L2active_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L2active_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L2active_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_LOSSES_P"))
            {
                this.L2active_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_LOSSES_M"))
            {
                this.L2active_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_LOSSES"))
            {
                this.L2active_losses = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LINE_LOSSES_P"))
            {
                this.L2reactive_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LINE_LOSSES_M"))
            {
                this.L2reactive_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LINE_LOSSES"))
            {
                this.L2reactive_line_losses = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L2reactive_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L2reactive_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L2reactive_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LOSSES"))
            {
                this.L2reactive_losses = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LOSSES_P"))
            {
                this.L2reactive_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LOSSES_M"))
            {
                this.L2reactive_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2AMPERE_SQUARED_HOURS"))
            {
                this.L2Ampere_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "L2VOLT_SQUARED_HOURS"))
            {
                this.L2Volt_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_LINE_LOSSES_P"))
            {
                this.L3Active_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_LINE_LOSSES_M"))
            {
                this.L3Active_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L3active_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L3active_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L3active_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_LOSSES_P"))
            {
                this.L3active_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_LOSSES_M"))
            {
                this.L3active_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_LOSSES"))
            {
                this.L3active_losses = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LINE_LOSSES_P"))
            {
                this.L3reactive_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LINE_LOSSES_M"))
            {
                this.L3reactive_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LINE_LOSSES"))
            {
                this.L3reactive_line_losses = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L3reactive_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L3reactive_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L3reactive_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LOSSES_P"))
            {
                this.L3reactive_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LOSSES_M"))
            {
                this.L3reactive_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LOSSES"))
            {
                this.L3reactive_losses = ((double)(value));
                return;
            }
            if ((feature == "L3AMPERE_SQUARED_HOURS"))
            {
                this.L3Ampere_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "L3VOLT_SQUARED_HOURS"))
            {
                this.L3Volt_Squared_hours = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Tr" +
                        "ansformerAndLineLosses")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_line_losses_P property
        /// </summary>
        private sealed class Active_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_line_losses_P;
                }
                set
                {
                    this.ModelElement.Active_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_line_losses_M property
        /// </summary>
        private sealed class Active_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_line_losses_M;
                }
                set
                {
                    this.ModelElement.Active_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_line_losses property
        /// </summary>
        private sealed class Active_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_line_losses;
                }
                set
                {
                    this.ModelElement.Active_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_transformer_losses_P property
        /// </summary>
        private sealed class Active_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.Active_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_transformer_losses_M property
        /// </summary>
        private sealed class Active_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.Active_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_transformer_losses property
        /// </summary>
        private sealed class Active_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_transformer_losses;
                }
                set
                {
                    this.ModelElement.Active_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_losses_P property
        /// </summary>
        private sealed class Active_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_losses_P;
                }
                set
                {
                    this.ModelElement.Active_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_losses_M property
        /// </summary>
        private sealed class Active_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_losses_M;
                }
                set
                {
                    this.ModelElement.Active_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_losses property
        /// </summary>
        private sealed class Active_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_losses;
                }
                set
                {
                    this.ModelElement.Active_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_line_losses_P property
        /// </summary>
        private sealed class Reactive_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_line_losses_P;
                }
                set
                {
                    this.ModelElement.Reactive_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_line_losses_M property
        /// </summary>
        private sealed class Reactive_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_line_losses_M;
                }
                set
                {
                    this.ModelElement.Reactive_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_line_losses property
        /// </summary>
        private sealed class Reactive_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_line_losses;
                }
                set
                {
                    this.ModelElement.Reactive_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_transformer_losses_P property
        /// </summary>
        private sealed class Reactive_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.Reactive_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_transformer_losses_M property
        /// </summary>
        private sealed class Reactive_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.Reactive_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_transformer_losses property
        /// </summary>
        private sealed class Reactive_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_transformer_losses;
                }
                set
                {
                    this.ModelElement.Reactive_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_losses_P property
        /// </summary>
        private sealed class Reactive_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_losses_P;
                }
                set
                {
                    this.ModelElement.Reactive_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_losses_M property
        /// </summary>
        private sealed class Reactive_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_losses_M;
                }
                set
                {
                    this.ModelElement.Reactive_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_losses property
        /// </summary>
        private sealed class Reactive_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_losses;
                }
                set
                {
                    this.ModelElement.Reactive_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Total_normalized_transformer_losses property
        /// </summary>
        private sealed class Total_normalized_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Total_normalized_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Total_normalized_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Total_normalized_transformer_losses;
                }
                set
                {
                    this.ModelElement.Total_normalized_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Total_normalized_line_losses property
        /// </summary>
        private sealed class Total_normalized_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Total_normalized_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Total_normalized_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Total_normalized_line_losses;
                }
                set
                {
                    this.ModelElement.Total_normalized_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_active_gross_P property
        /// </summary>
        private sealed class Compensated_active_gross_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_active_gross_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_active_gross_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_active_gross_P;
                }
                set
                {
                    this.ModelElement.Compensated_active_gross_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_active_net_P property
        /// </summary>
        private sealed class Compensated_active_net_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_active_net_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_active_net_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_active_net_P;
                }
                set
                {
                    this.ModelElement.Compensated_active_net_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_active_gross_M property
        /// </summary>
        private sealed class Compensated_active_gross_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_active_gross_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_active_gross_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_active_gross_M;
                }
                set
                {
                    this.ModelElement.Compensated_active_gross_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_active_net_M property
        /// </summary>
        private sealed class Compensated_active_net_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_active_net_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_active_net_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_active_net_M;
                }
                set
                {
                    this.ModelElement.Compensated_active_net_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_reactive_gross_P property
        /// </summary>
        private sealed class Compensated_reactive_gross_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_reactive_gross_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_reactive_gross_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_reactive_gross_P;
                }
                set
                {
                    this.ModelElement.Compensated_reactive_gross_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_reactive_net_P property
        /// </summary>
        private sealed class Compensated_reactive_net_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_reactive_net_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_reactive_net_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_reactive_net_P;
                }
                set
                {
                    this.ModelElement.Compensated_reactive_net_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_reactive_gross_M property
        /// </summary>
        private sealed class Compensated_reactive_gross_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_reactive_gross_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_reactive_gross_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_reactive_gross_M;
                }
                set
                {
                    this.ModelElement.Compensated_reactive_gross_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_reactive_net_M property
        /// </summary>
        private sealed class Compensated_reactive_net_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_reactive_net_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_reactive_net_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_reactive_net_M;
                }
                set
                {
                    this.ModelElement.Compensated_reactive_net_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_line_losses property
        /// </summary>
        private sealed class L1active_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_line_losses;
                }
                set
                {
                    this.ModelElement.L1active_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_line_losses_M property
        /// </summary>
        private sealed class L1active_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_line_losses_M;
                }
                set
                {
                    this.ModelElement.L1active_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_transformer_losses_P property
        /// </summary>
        private sealed class L1active_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L1active_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_transformer_losses_M property
        /// </summary>
        private sealed class L1active_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L1active_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_transformer_losses property
        /// </summary>
        private sealed class L1active_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_transformer_losses;
                }
                set
                {
                    this.ModelElement.L1active_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_losses_P property
        /// </summary>
        private sealed class L1active_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_losses_P;
                }
                set
                {
                    this.ModelElement.L1active_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_losses_M property
        /// </summary>
        private sealed class L1active_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_losses_M;
                }
                set
                {
                    this.ModelElement.L1active_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_losses property
        /// </summary>
        private sealed class L1active_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_losses;
                }
                set
                {
                    this.ModelElement.L1active_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_line_losses_P property
        /// </summary>
        private sealed class L1reactive_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_line_losses_P;
                }
                set
                {
                    this.ModelElement.L1reactive_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_line_losses_M property
        /// </summary>
        private sealed class L1reactive_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_line_losses_M;
                }
                set
                {
                    this.ModelElement.L1reactive_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_line_losses property
        /// </summary>
        private sealed class L1reactive_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_line_losses;
                }
                set
                {
                    this.ModelElement.L1reactive_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_transformer_losses_P property
        /// </summary>
        private sealed class L1reactive_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L1reactive_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_transformer_losses_M property
        /// </summary>
        private sealed class L1reactive_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L1reactive_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_transformer_losses property
        /// </summary>
        private sealed class L1reactive_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_transformer_losses;
                }
                set
                {
                    this.ModelElement.L1reactive_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1Reactive_losses_P property
        /// </summary>
        private sealed class L1Reactive_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1Reactive_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1Reactive_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1Reactive_losses_P;
                }
                set
                {
                    this.ModelElement.L1Reactive_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1Reactive_losses_M property
        /// </summary>
        private sealed class L1Reactive_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1Reactive_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1Reactive_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1Reactive_losses_M;
                }
                set
                {
                    this.ModelElement.L1Reactive_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1Reactive_losses property
        /// </summary>
        private sealed class L1Reactive_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1Reactive_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1Reactive_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1Reactive_losses;
                }
                set
                {
                    this.ModelElement.L1Reactive_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1Ampere_squared_hours property
        /// </summary>
        private sealed class L1Ampere_squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1Ampere_squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1Ampere_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1Ampere_squared_hours;
                }
                set
                {
                    this.ModelElement.L1Ampere_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1Volt_squared_hours property
        /// </summary>
        private sealed class L1Volt_squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1Volt_squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1Volt_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1Volt_squared_hours;
                }
                set
                {
                    this.ModelElement.L1Volt_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_line_losses_P property
        /// </summary>
        private sealed class L2active_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_line_losses_P;
                }
                set
                {
                    this.ModelElement.L2active_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_line_losses_M property
        /// </summary>
        private sealed class L2active_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_line_losses_M;
                }
                set
                {
                    this.ModelElement.L2active_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_transformer_losses_P property
        /// </summary>
        private sealed class L2active_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L2active_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_transformer_losses_M property
        /// </summary>
        private sealed class L2active_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L2active_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_transformer_losses property
        /// </summary>
        private sealed class L2active_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_transformer_losses;
                }
                set
                {
                    this.ModelElement.L2active_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_losses_P property
        /// </summary>
        private sealed class L2active_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_losses_P;
                }
                set
                {
                    this.ModelElement.L2active_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_losses_M property
        /// </summary>
        private sealed class L2active_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_losses_M;
                }
                set
                {
                    this.ModelElement.L2active_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_losses property
        /// </summary>
        private sealed class L2active_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_losses;
                }
                set
                {
                    this.ModelElement.L2active_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_line_losses_P property
        /// </summary>
        private sealed class L2reactive_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_line_losses_P;
                }
                set
                {
                    this.ModelElement.L2reactive_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_line_losses_M property
        /// </summary>
        private sealed class L2reactive_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_line_losses_M;
                }
                set
                {
                    this.ModelElement.L2reactive_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_line_losses property
        /// </summary>
        private sealed class L2reactive_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_line_losses;
                }
                set
                {
                    this.ModelElement.L2reactive_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_transformer_losses property
        /// </summary>
        private sealed class L2reactive_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_transformer_losses;
                }
                set
                {
                    this.ModelElement.L2reactive_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_transformer_losses_P property
        /// </summary>
        private sealed class L2reactive_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L2reactive_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_transformer_losses_M property
        /// </summary>
        private sealed class L2reactive_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L2reactive_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_losses property
        /// </summary>
        private sealed class L2reactive_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_losses;
                }
                set
                {
                    this.ModelElement.L2reactive_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_losses_P property
        /// </summary>
        private sealed class L2reactive_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_losses_P;
                }
                set
                {
                    this.ModelElement.L2reactive_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_losses_M property
        /// </summary>
        private sealed class L2reactive_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_losses_M;
                }
                set
                {
                    this.ModelElement.L2reactive_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2Ampere_squared_hours property
        /// </summary>
        private sealed class L2Ampere_squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2Ampere_squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2Ampere_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2Ampere_squared_hours;
                }
                set
                {
                    this.ModelElement.L2Ampere_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2Volt_squared_hours property
        /// </summary>
        private sealed class L2Volt_squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2Volt_squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2Volt_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2Volt_squared_hours;
                }
                set
                {
                    this.ModelElement.L2Volt_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3Active_line_losses_P property
        /// </summary>
        private sealed class L3Active_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3Active_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3Active_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3Active_line_losses_P;
                }
                set
                {
                    this.ModelElement.L3Active_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3Active_line_losses_M property
        /// </summary>
        private sealed class L3Active_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3Active_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3Active_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3Active_line_losses_M;
                }
                set
                {
                    this.ModelElement.L3Active_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_transformer_losses_P property
        /// </summary>
        private sealed class L3active_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L3active_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_transformer_losses_M property
        /// </summary>
        private sealed class L3active_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L3active_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_transformer_losses property
        /// </summary>
        private sealed class L3active_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_transformer_losses;
                }
                set
                {
                    this.ModelElement.L3active_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_losses_P property
        /// </summary>
        private sealed class L3active_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_losses_P;
                }
                set
                {
                    this.ModelElement.L3active_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_losses_M property
        /// </summary>
        private sealed class L3active_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_losses_M;
                }
                set
                {
                    this.ModelElement.L3active_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_losses property
        /// </summary>
        private sealed class L3active_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_losses;
                }
                set
                {
                    this.ModelElement.L3active_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_line_losses_P property
        /// </summary>
        private sealed class L3reactive_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_line_losses_P;
                }
                set
                {
                    this.ModelElement.L3reactive_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_line_losses_M property
        /// </summary>
        private sealed class L3reactive_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_line_losses_M;
                }
                set
                {
                    this.ModelElement.L3reactive_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_line_losses property
        /// </summary>
        private sealed class L3reactive_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_line_losses;
                }
                set
                {
                    this.ModelElement.L3reactive_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_transformer_losses_P property
        /// </summary>
        private sealed class L3reactive_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L3reactive_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_transformer_losses_M property
        /// </summary>
        private sealed class L3reactive_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L3reactive_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_transformer_losses property
        /// </summary>
        private sealed class L3reactive_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_transformer_losses;
                }
                set
                {
                    this.ModelElement.L3reactive_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_losses_P property
        /// </summary>
        private sealed class L3reactive_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_losses_P;
                }
                set
                {
                    this.ModelElement.L3reactive_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_losses_M property
        /// </summary>
        private sealed class L3reactive_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_losses_M;
                }
                set
                {
                    this.ModelElement.L3reactive_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_losses property
        /// </summary>
        private sealed class L3reactive_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_losses;
                }
                set
                {
                    this.ModelElement.L3reactive_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3Ampere_squared_hours property
        /// </summary>
        private sealed class L3Ampere_squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3Ampere_squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3Ampere_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3Ampere_squared_hours;
                }
                set
                {
                    this.ModelElement.L3Ampere_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3Volt_Squared_hours property
        /// </summary>
        private sealed class L3Volt_Squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3Volt_Squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3Volt_Squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3Volt_Squared_hours;
                }
                set
                {
                    this.ModelElement.L3Volt_Squared_hours = value;
                }
            }
        }
    }
}

