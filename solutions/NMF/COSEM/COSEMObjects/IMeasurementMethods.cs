//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The public interface for MeasurementMethods
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MeasurementMethods))]
    [XmlDefaultImplementationTypeAttribute(typeof(MeasurementMethods))]
    public interface IMeasurementMethods : IModelElement, IData
    {
        
        /// <summary>
        /// The Algorithm_for_active_power_measurement property
        /// </summary>
        string Algorithm_for_active_power_measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_active_energy_management property
        /// </summary>
        string Algorithm_for_active_energy_management
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_reactive_power_measurement property
        /// </summary>
        string Algorithm_for_reactive_power_measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_reactive_energy_measurement property
        /// </summary>
        string Algorithm_for_reactive_energy_measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_apparent_power_measurement property
        /// </summary>
        string Algorithm_for_apparent_power_measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_apparent_energy_measurement property
        /// </summary>
        string Algorithm_for_apparent_energy_measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_power_factor_calculation property
        /// </summary>
        string Algorithm_for_power_factor_calculation
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Algorithm_for_active_power_measurement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_active_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_active_power_measurement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_active_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_active_energy_management property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_active_energy_managementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_active_energy_management property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_active_energy_managementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_reactive_power_measurement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_reactive_power_measurement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_reactive_energy_measurement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_energy_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_reactive_energy_measurement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_energy_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_apparent_power_measurement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_apparent_power_measurement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_apparent_energy_measurement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_energy_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_apparent_energy_measurement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_energy_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_power_factor_calculation property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_power_factor_calculationChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_power_factor_calculation property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Algorithm_for_power_factor_calculationChanged;
    }
}

