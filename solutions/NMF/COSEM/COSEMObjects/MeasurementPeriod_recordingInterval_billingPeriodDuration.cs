using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the MeasurementPeriod_recordingInterval_billingPeriodDuration class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
        "asurementPeriod_recordingInterval_billingPeriodDuration")]
    public partial class MeasurementPeriod_recordingInterval_billingPeriodDuration : Data, IMeasurementPeriod_recordingInterval_billingPeriodDuration, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Measurement_period_1_for_averaging_scheme_1 property
        /// </summary>
        private string _measurement_period_1_for_averaging_scheme_1;
        
        private static Lazy<ITypedElement> _measurement_period_1_for_averaging_scheme_1Attribute = new Lazy<ITypedElement>(RetrieveMeasurement_period_1_for_averaging_scheme_1Attribute);
        
        /// <summary>
        /// The backing field for the Measurement_period_2_for_averagingscheme_2 property
        /// </summary>
        private string _measurement_period_2_for_averagingscheme_2;
        
        private static Lazy<ITypedElement> _measurement_period_2_for_averagingscheme_2Attribute = new Lazy<ITypedElement>(RetrieveMeasurement_period_2_for_averagingscheme_2Attribute);
        
        /// <summary>
        /// The backing field for the Measurement_period_3_for_instantaneous_value property
        /// </summary>
        private string _measurement_period_3_for_instantaneous_value;
        
        private static Lazy<ITypedElement> _measurement_period_3_for_instantaneous_valueAttribute = new Lazy<ITypedElement>(RetrieveMeasurement_period_3_for_instantaneous_valueAttribute);
        
        /// <summary>
        /// The backing field for the Measurement_period_4_for_test_value property
        /// </summary>
        private string _measurement_period_4_for_test_value;
        
        private static Lazy<ITypedElement> _measurement_period_4_for_test_valueAttribute = new Lazy<ITypedElement>(RetrieveMeasurement_period_4_for_test_valueAttribute);
        
        /// <summary>
        /// The backing field for the Recording_interval_1_for_loadprofile property
        /// </summary>
        private string _recording_interval_1_for_loadprofile;
        
        private static Lazy<ITypedElement> _recording_interval_1_for_loadprofileAttribute = new Lazy<ITypedElement>(RetrieveRecording_interval_1_for_loadprofileAttribute);
        
        /// <summary>
        /// The backing field for the Recording_interval_2_for_loadprofile property
        /// </summary>
        private string _recording_interval_2_for_loadprofile;
        
        private static Lazy<ITypedElement> _recording_interval_2_for_loadprofileAttribute = new Lazy<ITypedElement>(RetrieveRecording_interval_2_for_loadprofileAttribute);
        
        /// <summary>
        /// The backing field for the Billingperiod property
        /// </summary>
        private string _billingperiod;
        
        private static Lazy<ITypedElement> _billingperiodAttribute = new Lazy<ITypedElement>(RetrieveBillingperiodAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Measurement_period_1_for_averaging_scheme_1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Measurement_period_1_for_averaging_scheme_1
        {
            get
            {
                return this._measurement_period_1_for_averaging_scheme_1;
            }
            set
            {
                if ((this._measurement_period_1_for_averaging_scheme_1 != value))
                {
                    string old = this._measurement_period_1_for_averaging_scheme_1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurement_period_1_for_averaging_scheme_1Changing(e);
                    this.OnPropertyChanging("Measurement_period_1_for_averaging_scheme_1", e, _measurement_period_1_for_averaging_scheme_1Attribute);
                    this._measurement_period_1_for_averaging_scheme_1 = value;
                    this.OnMeasurement_period_1_for_averaging_scheme_1Changed(e);
                    this.OnPropertyChanged("Measurement_period_1_for_averaging_scheme_1", e, _measurement_period_1_for_averaging_scheme_1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The Measurement_period_2_for_averagingscheme_2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Measurement_period_2_for_averagingscheme_2
        {
            get
            {
                return this._measurement_period_2_for_averagingscheme_2;
            }
            set
            {
                if ((this._measurement_period_2_for_averagingscheme_2 != value))
                {
                    string old = this._measurement_period_2_for_averagingscheme_2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurement_period_2_for_averagingscheme_2Changing(e);
                    this.OnPropertyChanging("Measurement_period_2_for_averagingscheme_2", e, _measurement_period_2_for_averagingscheme_2Attribute);
                    this._measurement_period_2_for_averagingscheme_2 = value;
                    this.OnMeasurement_period_2_for_averagingscheme_2Changed(e);
                    this.OnPropertyChanged("Measurement_period_2_for_averagingscheme_2", e, _measurement_period_2_for_averagingscheme_2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The Measurement_period_3_for_instantaneous_value property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Measurement_period_3_for_instantaneous_value
        {
            get
            {
                return this._measurement_period_3_for_instantaneous_value;
            }
            set
            {
                if ((this._measurement_period_3_for_instantaneous_value != value))
                {
                    string old = this._measurement_period_3_for_instantaneous_value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurement_period_3_for_instantaneous_valueChanging(e);
                    this.OnPropertyChanging("Measurement_period_3_for_instantaneous_value", e, _measurement_period_3_for_instantaneous_valueAttribute);
                    this._measurement_period_3_for_instantaneous_value = value;
                    this.OnMeasurement_period_3_for_instantaneous_valueChanged(e);
                    this.OnPropertyChanged("Measurement_period_3_for_instantaneous_value", e, _measurement_period_3_for_instantaneous_valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Measurement_period_4_for_test_value property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Measurement_period_4_for_test_value
        {
            get
            {
                return this._measurement_period_4_for_test_value;
            }
            set
            {
                if ((this._measurement_period_4_for_test_value != value))
                {
                    string old = this._measurement_period_4_for_test_value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurement_period_4_for_test_valueChanging(e);
                    this.OnPropertyChanging("Measurement_period_4_for_test_value", e, _measurement_period_4_for_test_valueAttribute);
                    this._measurement_period_4_for_test_value = value;
                    this.OnMeasurement_period_4_for_test_valueChanged(e);
                    this.OnPropertyChanged("Measurement_period_4_for_test_value", e, _measurement_period_4_for_test_valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Recording_interval_1_for_loadprofile property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Recording_interval_1_for_loadprofile
        {
            get
            {
                return this._recording_interval_1_for_loadprofile;
            }
            set
            {
                if ((this._recording_interval_1_for_loadprofile != value))
                {
                    string old = this._recording_interval_1_for_loadprofile;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRecording_interval_1_for_loadprofileChanging(e);
                    this.OnPropertyChanging("Recording_interval_1_for_loadprofile", e, _recording_interval_1_for_loadprofileAttribute);
                    this._recording_interval_1_for_loadprofile = value;
                    this.OnRecording_interval_1_for_loadprofileChanged(e);
                    this.OnPropertyChanged("Recording_interval_1_for_loadprofile", e, _recording_interval_1_for_loadprofileAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Recording_interval_2_for_loadprofile property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Recording_interval_2_for_loadprofile
        {
            get
            {
                return this._recording_interval_2_for_loadprofile;
            }
            set
            {
                if ((this._recording_interval_2_for_loadprofile != value))
                {
                    string old = this._recording_interval_2_for_loadprofile;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRecording_interval_2_for_loadprofileChanging(e);
                    this.OnPropertyChanging("Recording_interval_2_for_loadprofile", e, _recording_interval_2_for_loadprofileAttribute);
                    this._recording_interval_2_for_loadprofile = value;
                    this.OnRecording_interval_2_for_loadprofileChanged(e);
                    this.OnPropertyChanged("Recording_interval_2_for_loadprofile", e, _recording_interval_2_for_loadprofileAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Billingperiod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Billingperiod
        {
            get
            {
                return this._billingperiod;
            }
            set
            {
                if ((this._billingperiod != value))
                {
                    string old = this._billingperiod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingperiodChanging(e);
                    this.OnPropertyChanging("Billingperiod", e, _billingperiodAttribute);
                    this._billingperiod = value;
                    this.OnBillingperiodChanged(e);
                    this.OnPropertyChanged("Billingperiod", e, _billingperiodAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
                            "asurementPeriod_recordingInterval_billingPeriodDuration")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Measurement_period_1_for_averaging_scheme_1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Measurement_period_1_for_averaging_scheme_1Changing;
        
        /// <summary>
        /// Gets fired when the Measurement_period_1_for_averaging_scheme_1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Measurement_period_1_for_averaging_scheme_1Changed;
        
        /// <summary>
        /// Gets fired before the Measurement_period_2_for_averagingscheme_2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Measurement_period_2_for_averagingscheme_2Changing;
        
        /// <summary>
        /// Gets fired when the Measurement_period_2_for_averagingscheme_2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Measurement_period_2_for_averagingscheme_2Changed;
        
        /// <summary>
        /// Gets fired before the Measurement_period_3_for_instantaneous_value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Measurement_period_3_for_instantaneous_valueChanging;
        
        /// <summary>
        /// Gets fired when the Measurement_period_3_for_instantaneous_value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Measurement_period_3_for_instantaneous_valueChanged;
        
        /// <summary>
        /// Gets fired before the Measurement_period_4_for_test_value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Measurement_period_4_for_test_valueChanging;
        
        /// <summary>
        /// Gets fired when the Measurement_period_4_for_test_value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Measurement_period_4_for_test_valueChanged;
        
        /// <summary>
        /// Gets fired before the Recording_interval_1_for_loadprofile property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Recording_interval_1_for_loadprofileChanging;
        
        /// <summary>
        /// Gets fired when the Recording_interval_1_for_loadprofile property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Recording_interval_1_for_loadprofileChanged;
        
        /// <summary>
        /// Gets fired before the Recording_interval_2_for_loadprofile property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Recording_interval_2_for_loadprofileChanging;
        
        /// <summary>
        /// Gets fired when the Recording_interval_2_for_loadprofile property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Recording_interval_2_for_loadprofileChanged;
        
        /// <summary>
        /// Gets fired before the Billingperiod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingperiodChanging;
        
        /// <summary>
        /// Gets fired when the Billingperiod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingperiodChanged;
        
        private static ITypedElement RetrieveMeasurement_period_1_for_averaging_scheme_1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Measurement_period_1_for_averaging_scheme_1")));
        }
        
        /// <summary>
        /// Raises the Measurement_period_1_for_averaging_scheme_1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_1_for_averaging_scheme_1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_1_for_averaging_scheme_1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Measurement_period_1_for_averaging_scheme_1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_1_for_averaging_scheme_1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_1_for_averaging_scheme_1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeasurement_period_2_for_averagingscheme_2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Measurement_period_2_for_averagingscheme_2")));
        }
        
        /// <summary>
        /// Raises the Measurement_period_2_for_averagingscheme_2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_2_for_averagingscheme_2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_2_for_averagingscheme_2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Measurement_period_2_for_averagingscheme_2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_2_for_averagingscheme_2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_2_for_averagingscheme_2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeasurement_period_3_for_instantaneous_valueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Measurement_period_3_for_instantaneous_value")));
        }
        
        /// <summary>
        /// Raises the Measurement_period_3_for_instantaneous_valueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_3_for_instantaneous_valueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_3_for_instantaneous_valueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Measurement_period_3_for_instantaneous_valueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_3_for_instantaneous_valueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_3_for_instantaneous_valueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeasurement_period_4_for_test_valueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Measurement_period_4_for_test_value")));
        }
        
        /// <summary>
        /// Raises the Measurement_period_4_for_test_valueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_4_for_test_valueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_4_for_test_valueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Measurement_period_4_for_test_valueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_4_for_test_valueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_4_for_test_valueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRecording_interval_1_for_loadprofileAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Recording_interval_1_for_loadprofile")));
        }
        
        /// <summary>
        /// Raises the Recording_interval_1_for_loadprofileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecording_interval_1_for_loadprofileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Recording_interval_1_for_loadprofileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Recording_interval_1_for_loadprofileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecording_interval_1_for_loadprofileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Recording_interval_1_for_loadprofileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRecording_interval_2_for_loadprofileAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Recording_interval_2_for_loadprofile")));
        }
        
        /// <summary>
        /// Raises the Recording_interval_2_for_loadprofileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecording_interval_2_for_loadprofileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Recording_interval_2_for_loadprofileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Recording_interval_2_for_loadprofileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecording_interval_2_for_loadprofileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Recording_interval_2_for_loadprofileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBillingperiodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Billingperiod")));
        }
        
        /// <summary>
        /// Raises the BillingperiodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingperiodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingperiodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingperiodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingperiodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingperiodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MEASUREMENT_PERIOD_1_FOR_AVERAGING_SCHEME_1"))
            {
                return this.Measurement_period_1_for_averaging_scheme_1;
            }
            if ((attribute == "MEASUREMENT_PERIOD_2_FOR_AVERAGINGSCHEME_2"))
            {
                return this.Measurement_period_2_for_averagingscheme_2;
            }
            if ((attribute == "MEASUREMENT_PERIOD_3_FOR_INSTANTANEOUS_VALUE"))
            {
                return this.Measurement_period_3_for_instantaneous_value;
            }
            if ((attribute == "MEASUREMENT_PERIOD_4_FOR_TEST_VALUE"))
            {
                return this.Measurement_period_4_for_test_value;
            }
            if ((attribute == "RECORDING_INTERVAL_1_FOR_LOADPROFILE"))
            {
                return this.Recording_interval_1_for_loadprofile;
            }
            if ((attribute == "RECORDING_INTERVAL_2_FOR_LOADPROFILE"))
            {
                return this.Recording_interval_2_for_loadprofile;
            }
            if ((attribute == "BILLINGPERIOD"))
            {
                return this.Billingperiod;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MEASUREMENT_PERIOD_1_FOR_AVERAGING_SCHEME_1"))
            {
                this.Measurement_period_1_for_averaging_scheme_1 = ((string)(value));
                return;
            }
            if ((feature == "MEASUREMENT_PERIOD_2_FOR_AVERAGINGSCHEME_2"))
            {
                this.Measurement_period_2_for_averagingscheme_2 = ((string)(value));
                return;
            }
            if ((feature == "MEASUREMENT_PERIOD_3_FOR_INSTANTANEOUS_VALUE"))
            {
                this.Measurement_period_3_for_instantaneous_value = ((string)(value));
                return;
            }
            if ((feature == "MEASUREMENT_PERIOD_4_FOR_TEST_VALUE"))
            {
                this.Measurement_period_4_for_test_value = ((string)(value));
                return;
            }
            if ((feature == "RECORDING_INTERVAL_1_FOR_LOADPROFILE"))
            {
                this.Recording_interval_1_for_loadprofile = ((string)(value));
                return;
            }
            if ((feature == "RECORDING_INTERVAL_2_FOR_LOADPROFILE"))
            {
                this.Recording_interval_2_for_loadprofile = ((string)(value));
                return;
            }
            if ((feature == "BILLINGPERIOD"))
            {
                this.Billingperiod = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
                        "asurementPeriod_recordingInterval_billingPeriodDuration")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Measurement_period_1_for_averaging_scheme_1 property
        /// </summary>
        private sealed class Measurement_period_1_for_averaging_scheme_1Proxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Measurement_period_1_for_averaging_scheme_1Proxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Measurement_period_1_for_averaging_scheme_1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Measurement_period_1_for_averaging_scheme_1;
                }
                set
                {
                    this.ModelElement.Measurement_period_1_for_averaging_scheme_1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Measurement_period_2_for_averagingscheme_2 property
        /// </summary>
        private sealed class Measurement_period_2_for_averagingscheme_2Proxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Measurement_period_2_for_averagingscheme_2Proxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Measurement_period_2_for_averagingscheme_2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Measurement_period_2_for_averagingscheme_2;
                }
                set
                {
                    this.ModelElement.Measurement_period_2_for_averagingscheme_2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Measurement_period_3_for_instantaneous_value property
        /// </summary>
        private sealed class Measurement_period_3_for_instantaneous_valueProxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Measurement_period_3_for_instantaneous_valueProxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Measurement_period_3_for_instantaneous_value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Measurement_period_3_for_instantaneous_value;
                }
                set
                {
                    this.ModelElement.Measurement_period_3_for_instantaneous_value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Measurement_period_4_for_test_value property
        /// </summary>
        private sealed class Measurement_period_4_for_test_valueProxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Measurement_period_4_for_test_valueProxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Measurement_period_4_for_test_value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Measurement_period_4_for_test_value;
                }
                set
                {
                    this.ModelElement.Measurement_period_4_for_test_value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Recording_interval_1_for_loadprofile property
        /// </summary>
        private sealed class Recording_interval_1_for_loadprofileProxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Recording_interval_1_for_loadprofileProxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Recording_interval_1_for_loadprofile")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Recording_interval_1_for_loadprofile;
                }
                set
                {
                    this.ModelElement.Recording_interval_1_for_loadprofile = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Recording_interval_2_for_loadprofile property
        /// </summary>
        private sealed class Recording_interval_2_for_loadprofileProxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Recording_interval_2_for_loadprofileProxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Recording_interval_2_for_loadprofile")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Recording_interval_2_for_loadprofile;
                }
                set
                {
                    this.ModelElement.Recording_interval_2_for_loadprofile = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Billingperiod property
        /// </summary>
        private sealed class BillingperiodProxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingperiodProxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Billingperiod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Billingperiod;
                }
                set
                {
                    this.ModelElement.Billingperiod = value;
                }
            }
        }
    }
}

