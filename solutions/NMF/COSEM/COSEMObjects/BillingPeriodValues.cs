using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the BillingPeriodValues class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Bi" +
        "llingPeriodValues")]
    public partial class BillingPeriodValues : Data, IBillingPeriodValues, IModelElement
    {
        
        /// <summary>
        /// The backing field for the BillingPeriodCounter property
        /// </summary>
        private Nullable<int> _billingPeriodCounter;
        
        private static Lazy<ITypedElement> _billingPeriodCounterAttribute = new Lazy<ITypedElement>(RetrieveBillingPeriodCounterAttribute);
        
        /// <summary>
        /// The backing field for the NumberAvailableBillingPeriods property
        /// </summary>
        private Nullable<int> _numberAvailableBillingPeriods;
        
        private static Lazy<ITypedElement> _numberAvailableBillingPeriodsAttribute = new Lazy<ITypedElement>(RetrieveNumberAvailableBillingPeriodsAttribute);
        
        /// <summary>
        /// The backing field for the TimestampRecentBillingPeriod property
        /// </summary>
        private string _timestampRecentBillingPeriod;
        
        private static Lazy<ITypedElement> _timestampRecentBillingPeriodAttribute = new Lazy<ITypedElement>(RetrieveTimestampRecentBillingPeriodAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The BillingPeriodCounter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> BillingPeriodCounter
        {
            get
            {
                return this._billingPeriodCounter;
            }
            set
            {
                if ((this._billingPeriodCounter != value))
                {
                    Nullable<int> old = this._billingPeriodCounter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingPeriodCounterChanging(e);
                    this.OnPropertyChanging("BillingPeriodCounter", e, _billingPeriodCounterAttribute);
                    this._billingPeriodCounter = value;
                    this.OnBillingPeriodCounterChanged(e);
                    this.OnPropertyChanged("BillingPeriodCounter", e, _billingPeriodCounterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The NumberAvailableBillingPeriods property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> NumberAvailableBillingPeriods
        {
            get
            {
                return this._numberAvailableBillingPeriods;
            }
            set
            {
                if ((this._numberAvailableBillingPeriods != value))
                {
                    Nullable<int> old = this._numberAvailableBillingPeriods;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberAvailableBillingPeriodsChanging(e);
                    this.OnPropertyChanging("NumberAvailableBillingPeriods", e, _numberAvailableBillingPeriodsAttribute);
                    this._numberAvailableBillingPeriods = value;
                    this.OnNumberAvailableBillingPeriodsChanged(e);
                    this.OnPropertyChanged("NumberAvailableBillingPeriods", e, _numberAvailableBillingPeriodsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TimestampRecentBillingPeriod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string TimestampRecentBillingPeriod
        {
            get
            {
                return this._timestampRecentBillingPeriod;
            }
            set
            {
                if ((this._timestampRecentBillingPeriod != value))
                {
                    string old = this._timestampRecentBillingPeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimestampRecentBillingPeriodChanging(e);
                    this.OnPropertyChanging("TimestampRecentBillingPeriod", e, _timestampRecentBillingPeriodAttribute);
                    this._timestampRecentBillingPeriod = value;
                    this.OnTimestampRecentBillingPeriodChanged(e);
                    this.OnPropertyChanged("TimestampRecentBillingPeriod", e, _timestampRecentBillingPeriodAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Bi" +
                            "llingPeriodValues")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the BillingPeriodCounter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingPeriodCounterChanging;
        
        /// <summary>
        /// Gets fired when the BillingPeriodCounter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingPeriodCounterChanged;
        
        /// <summary>
        /// Gets fired before the NumberAvailableBillingPeriods property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberAvailableBillingPeriodsChanging;
        
        /// <summary>
        /// Gets fired when the NumberAvailableBillingPeriods property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberAvailableBillingPeriodsChanged;
        
        /// <summary>
        /// Gets fired before the TimestampRecentBillingPeriod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimestampRecentBillingPeriodChanging;
        
        /// <summary>
        /// Gets fired when the TimestampRecentBillingPeriod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimestampRecentBillingPeriodChanged;
        
        private static ITypedElement RetrieveBillingPeriodCounterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BillingPeriodValues.ClassInstance)).Resolve("BillingPeriodCounter")));
        }
        
        /// <summary>
        /// Raises the BillingPeriodCounterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodCounterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodCounterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingPeriodCounterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodCounterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodCounterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNumberAvailableBillingPeriodsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BillingPeriodValues.ClassInstance)).Resolve("NumberAvailableBillingPeriods")));
        }
        
        /// <summary>
        /// Raises the NumberAvailableBillingPeriodsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberAvailableBillingPeriodsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberAvailableBillingPeriodsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberAvailableBillingPeriodsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberAvailableBillingPeriodsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberAvailableBillingPeriodsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimestampRecentBillingPeriodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BillingPeriodValues.ClassInstance)).Resolve("TimestampRecentBillingPeriod")));
        }
        
        /// <summary>
        /// Raises the TimestampRecentBillingPeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimestampRecentBillingPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimestampRecentBillingPeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimestampRecentBillingPeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimestampRecentBillingPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimestampRecentBillingPeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BILLINGPERIODCOUNTER"))
            {
                return this.BillingPeriodCounter;
            }
            if ((attribute == "NUMBERAVAILABLEBILLINGPERIODS"))
            {
                return this.NumberAvailableBillingPeriods;
            }
            if ((attribute == "TIMESTAMPRECENTBILLINGPERIOD"))
            {
                return this.TimestampRecentBillingPeriod;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BILLINGPERIODCOUNTER"))
            {
                this.BillingPeriodCounter = ((int)(value));
                return;
            }
            if ((feature == "NUMBERAVAILABLEBILLINGPERIODS"))
            {
                this.NumberAvailableBillingPeriods = ((int)(value));
                return;
            }
            if ((feature == "TIMESTAMPRECENTBILLINGPERIOD"))
            {
                this.TimestampRecentBillingPeriod = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Bi" +
                        "llingPeriodValues")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BillingPeriodCounter property
        /// </summary>
        private sealed class BillingPeriodCounterProxy : ModelPropertyChange<IBillingPeriodValues, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingPeriodCounterProxy(IBillingPeriodValues modelElement) : 
                    base(modelElement, "BillingPeriodCounter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.BillingPeriodCounter;
                }
                set
                {
                    this.ModelElement.BillingPeriodCounter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NumberAvailableBillingPeriods property
        /// </summary>
        private sealed class NumberAvailableBillingPeriodsProxy : ModelPropertyChange<IBillingPeriodValues, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberAvailableBillingPeriodsProxy(IBillingPeriodValues modelElement) : 
                    base(modelElement, "NumberAvailableBillingPeriods")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.NumberAvailableBillingPeriods;
                }
                set
                {
                    this.ModelElement.NumberAvailableBillingPeriods = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimestampRecentBillingPeriod property
        /// </summary>
        private sealed class TimestampRecentBillingPeriodProxy : ModelPropertyChange<IBillingPeriodValues, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimestampRecentBillingPeriodProxy(IBillingPeriodValues modelElement) : 
                    base(modelElement, "TimestampRecentBillingPeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimestampRecentBillingPeriod;
                }
                set
                {
                    this.ModelElement.TimestampRecentBillingPeriod = value;
                }
            }
        }
    }
}

