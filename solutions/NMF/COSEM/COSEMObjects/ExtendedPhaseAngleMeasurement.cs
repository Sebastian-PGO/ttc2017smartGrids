using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the ExtendedPhaseAngleMeasurement class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ex" +
        "tendedPhaseAngleMeasurement")]
    public partial class ExtendedPhaseAngleMeasurement : Data, IExtendedPhaseAngleMeasurement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FromUL1toUL2 property
        /// </summary>
        private Nullable<double> _fromUL1toUL2;
        
        private static Lazy<ITypedElement> _fromUL1toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromUL1toUL3 property
        /// </summary>
        private Nullable<double> _fromUL1toUL3;
        
        private static Lazy<ITypedElement> _fromUL1toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromUL1toIL1 property
        /// </summary>
        private Nullable<double> _fromUL1toIL1;
        
        private static Lazy<ITypedElement> _fromUL1toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromUL1toIL2 property
        /// </summary>
        private Nullable<double> _fromUL1toIL2;
        
        private static Lazy<ITypedElement> _fromUL1toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromUL1toIL3 property
        /// </summary>
        private Nullable<double> _fromUL1toIL3;
        
        private static Lazy<ITypedElement> _fromUL1toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toIL3Attribute);
        
        /// <summary>
        /// The backing field for the FromUL1toIL0 property
        /// </summary>
        private Nullable<double> _fromUL1toIL0;
        
        private static Lazy<ITypedElement> _fromUL1toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toUL1 property
        /// </summary>
        private Nullable<double> _fromUL2toUL1;
        
        private static Lazy<ITypedElement> _fromUL2toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toUL3 property
        /// </summary>
        private Nullable<double> _fromUL2toUL3;
        
        private static Lazy<ITypedElement> _fromUL2toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toIL1 property
        /// </summary>
        private Nullable<double> _fromUL2toIL1;
        
        private static Lazy<ITypedElement> _fromUL2toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toIL2 property
        /// </summary>
        private Nullable<double> _fromUL2toIL2;
        
        private static Lazy<ITypedElement> _fromUL2toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toIL3 property
        /// </summary>
        private Nullable<double> _fromUL2toIL3;
        
        private static Lazy<ITypedElement> _fromUL2toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toIL3Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toIL0 property
        /// </summary>
        private Nullable<double> _fromUL2toIL0;
        
        private static Lazy<ITypedElement> _fromUL2toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toUL1 property
        /// </summary>
        private Nullable<double> _fromUL3toUL1;
        
        private static Lazy<ITypedElement> _fromUL3toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toUL2 property
        /// </summary>
        private Nullable<double> _fromUL3toUL2;
        
        private static Lazy<ITypedElement> _fromUL3toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toIL1 property
        /// </summary>
        private Nullable<double> _fromUL3toIL1;
        
        private static Lazy<ITypedElement> _fromUL3toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toIL2 property
        /// </summary>
        private Nullable<double> _fromUL3toIL2;
        
        private static Lazy<ITypedElement> _fromUL3toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toIL3 property
        /// </summary>
        private Nullable<double> _fromUL3toIL3;
        
        private static Lazy<ITypedElement> _fromUL3toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toIL3Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toIL0 property
        /// </summary>
        private Nullable<double> _fromUL3toIL0;
        
        private static Lazy<ITypedElement> _fromUL3toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toUL1 property
        /// </summary>
        private Nullable<double> _fromIL1toUL1;
        
        private static Lazy<ITypedElement> _fromIL1toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toUL2 property
        /// </summary>
        private Nullable<double> _fromIL1toUL2;
        
        private static Lazy<ITypedElement> _fromIL1toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toUL3 property
        /// </summary>
        private Nullable<double> _fromIL1toUL3;
        
        private static Lazy<ITypedElement> _fromIL1toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toIL2 property
        /// </summary>
        private Nullable<double> _fromIL1toIL2;
        
        private static Lazy<ITypedElement> _fromIL1toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toIL3 property
        /// </summary>
        private Nullable<double> _fromIL1toIL3;
        
        private static Lazy<ITypedElement> _fromIL1toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toIL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toIL0 property
        /// </summary>
        private Nullable<double> _fromIL1toIL0;
        
        private static Lazy<ITypedElement> _fromIL1toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toUL1 property
        /// </summary>
        private Nullable<double> _fromIL2toUL1;
        
        private static Lazy<ITypedElement> _fromIL2toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toUL2 property
        /// </summary>
        private Nullable<double> _fromIL2toUL2;
        
        private static Lazy<ITypedElement> _fromIL2toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toUL3 property
        /// </summary>
        private Nullable<double> _fromIL2toUL3;
        
        private static Lazy<ITypedElement> _fromIL2toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toIL1 property
        /// </summary>
        private Nullable<double> _fromIL2toIL1;
        
        private static Lazy<ITypedElement> _fromIL2toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toIL3 property
        /// </summary>
        private Nullable<double> _fromIL2toIL3;
        
        private static Lazy<ITypedElement> _fromIL2toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toIL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toIL0 property
        /// </summary>
        private Nullable<double> _fromIL2toIL0;
        
        private static Lazy<ITypedElement> _fromIL2toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toUL1 property
        /// </summary>
        private Nullable<double> _fromIL3toUL1;
        
        private static Lazy<ITypedElement> _fromIL3toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toUL2 property
        /// </summary>
        private Nullable<double> _fromIL3toUL2;
        
        private static Lazy<ITypedElement> _fromIL3toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toUL3 property
        /// </summary>
        private Nullable<double> _fromIL3toUL3;
        
        private static Lazy<ITypedElement> _fromIL3toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toIL1 property
        /// </summary>
        private Nullable<double> _fromIL3toIL1;
        
        private static Lazy<ITypedElement> _fromIL3toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toIL2 property
        /// </summary>
        private Nullable<double> _fromIL3toIL2;
        
        private static Lazy<ITypedElement> _fromIL3toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toIL0 property
        /// </summary>
        private Nullable<double> _fromIL3toIL0;
        
        private static Lazy<ITypedElement> _fromIL3toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toUL1 property
        /// </summary>
        private Nullable<double> _fromIL0toUL1;
        
        private static Lazy<ITypedElement> _fromIL0toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toUL2 property
        /// </summary>
        private Nullable<double> _fromIL0toUL2;
        
        private static Lazy<ITypedElement> _fromIL0toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toUL3 property
        /// </summary>
        private Nullable<double> _fromIL0toUL3;
        
        private static Lazy<ITypedElement> _fromIL0toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toIL1 property
        /// </summary>
        private Nullable<double> _fromIL0toIL1;
        
        private static Lazy<ITypedElement> _fromIL0toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toIL2 property
        /// </summary>
        private Nullable<double> _fromIL0toIL2;
        
        private static Lazy<ITypedElement> _fromIL0toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toIL3 property
        /// </summary>
        private Nullable<double> _fromIL0toIL3;
        
        private static Lazy<ITypedElement> _fromIL0toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toIL3Attribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The FromUL1toUL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL1toUL2
        {
            get
            {
                return this._fromUL1toUL2;
            }
            set
            {
                if ((this._fromUL1toUL2 != value))
                {
                    Nullable<double> old = this._fromUL1toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toUL2Changing(e);
                    this.OnPropertyChanging("FromUL1toUL2", e, _fromUL1toUL2Attribute);
                    this._fromUL1toUL2 = value;
                    this.OnFromUL1toUL2Changed(e);
                    this.OnPropertyChanged("FromUL1toUL2", e, _fromUL1toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL1toUL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL1toUL3
        {
            get
            {
                return this._fromUL1toUL3;
            }
            set
            {
                if ((this._fromUL1toUL3 != value))
                {
                    Nullable<double> old = this._fromUL1toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toUL3Changing(e);
                    this.OnPropertyChanging("FromUL1toUL3", e, _fromUL1toUL3Attribute);
                    this._fromUL1toUL3 = value;
                    this.OnFromUL1toUL3Changed(e);
                    this.OnPropertyChanged("FromUL1toUL3", e, _fromUL1toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL1toIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL1toIL1
        {
            get
            {
                return this._fromUL1toIL1;
            }
            set
            {
                if ((this._fromUL1toIL1 != value))
                {
                    Nullable<double> old = this._fromUL1toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toIL1Changing(e);
                    this.OnPropertyChanging("FromUL1toIL1", e, _fromUL1toIL1Attribute);
                    this._fromUL1toIL1 = value;
                    this.OnFromUL1toIL1Changed(e);
                    this.OnPropertyChanged("FromUL1toIL1", e, _fromUL1toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL1toIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL1toIL2
        {
            get
            {
                return this._fromUL1toIL2;
            }
            set
            {
                if ((this._fromUL1toIL2 != value))
                {
                    Nullable<double> old = this._fromUL1toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toIL2Changing(e);
                    this.OnPropertyChanging("FromUL1toIL2", e, _fromUL1toIL2Attribute);
                    this._fromUL1toIL2 = value;
                    this.OnFromUL1toIL2Changed(e);
                    this.OnPropertyChanged("FromUL1toIL2", e, _fromUL1toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL1toIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL1toIL3
        {
            get
            {
                return this._fromUL1toIL3;
            }
            set
            {
                if ((this._fromUL1toIL3 != value))
                {
                    Nullable<double> old = this._fromUL1toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toIL3Changing(e);
                    this.OnPropertyChanging("FromUL1toIL3", e, _fromUL1toIL3Attribute);
                    this._fromUL1toIL3 = value;
                    this.OnFromUL1toIL3Changed(e);
                    this.OnPropertyChanged("FromUL1toIL3", e, _fromUL1toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL1toIL0 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL1toIL0
        {
            get
            {
                return this._fromUL1toIL0;
            }
            set
            {
                if ((this._fromUL1toIL0 != value))
                {
                    Nullable<double> old = this._fromUL1toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toIL0Changing(e);
                    this.OnPropertyChanging("FromUL1toIL0", e, _fromUL1toIL0Attribute);
                    this._fromUL1toIL0 = value;
                    this.OnFromUL1toIL0Changed(e);
                    this.OnPropertyChanged("FromUL1toIL0", e, _fromUL1toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toUL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL2toUL1
        {
            get
            {
                return this._fromUL2toUL1;
            }
            set
            {
                if ((this._fromUL2toUL1 != value))
                {
                    Nullable<double> old = this._fromUL2toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toUL1Changing(e);
                    this.OnPropertyChanging("FromUL2toUL1", e, _fromUL2toUL1Attribute);
                    this._fromUL2toUL1 = value;
                    this.OnFromUL2toUL1Changed(e);
                    this.OnPropertyChanged("FromUL2toUL1", e, _fromUL2toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toUL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL2toUL3
        {
            get
            {
                return this._fromUL2toUL3;
            }
            set
            {
                if ((this._fromUL2toUL3 != value))
                {
                    Nullable<double> old = this._fromUL2toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toUL3Changing(e);
                    this.OnPropertyChanging("FromUL2toUL3", e, _fromUL2toUL3Attribute);
                    this._fromUL2toUL3 = value;
                    this.OnFromUL2toUL3Changed(e);
                    this.OnPropertyChanged("FromUL2toUL3", e, _fromUL2toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL2toIL1
        {
            get
            {
                return this._fromUL2toIL1;
            }
            set
            {
                if ((this._fromUL2toIL1 != value))
                {
                    Nullable<double> old = this._fromUL2toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toIL1Changing(e);
                    this.OnPropertyChanging("FromUL2toIL1", e, _fromUL2toIL1Attribute);
                    this._fromUL2toIL1 = value;
                    this.OnFromUL2toIL1Changed(e);
                    this.OnPropertyChanged("FromUL2toIL1", e, _fromUL2toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL2toIL2
        {
            get
            {
                return this._fromUL2toIL2;
            }
            set
            {
                if ((this._fromUL2toIL2 != value))
                {
                    Nullable<double> old = this._fromUL2toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toIL2Changing(e);
                    this.OnPropertyChanging("FromUL2toIL2", e, _fromUL2toIL2Attribute);
                    this._fromUL2toIL2 = value;
                    this.OnFromUL2toIL2Changed(e);
                    this.OnPropertyChanged("FromUL2toIL2", e, _fromUL2toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL2toIL3
        {
            get
            {
                return this._fromUL2toIL3;
            }
            set
            {
                if ((this._fromUL2toIL3 != value))
                {
                    Nullable<double> old = this._fromUL2toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toIL3Changing(e);
                    this.OnPropertyChanging("FromUL2toIL3", e, _fromUL2toIL3Attribute);
                    this._fromUL2toIL3 = value;
                    this.OnFromUL2toIL3Changed(e);
                    this.OnPropertyChanged("FromUL2toIL3", e, _fromUL2toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toIL0 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL2toIL0
        {
            get
            {
                return this._fromUL2toIL0;
            }
            set
            {
                if ((this._fromUL2toIL0 != value))
                {
                    Nullable<double> old = this._fromUL2toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toIL0Changing(e);
                    this.OnPropertyChanging("FromUL2toIL0", e, _fromUL2toIL0Attribute);
                    this._fromUL2toIL0 = value;
                    this.OnFromUL2toIL0Changed(e);
                    this.OnPropertyChanged("FromUL2toIL0", e, _fromUL2toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toUL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL3toUL1
        {
            get
            {
                return this._fromUL3toUL1;
            }
            set
            {
                if ((this._fromUL3toUL1 != value))
                {
                    Nullable<double> old = this._fromUL3toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toUL1Changing(e);
                    this.OnPropertyChanging("FromUL3toUL1", e, _fromUL3toUL1Attribute);
                    this._fromUL3toUL1 = value;
                    this.OnFromUL3toUL1Changed(e);
                    this.OnPropertyChanged("FromUL3toUL1", e, _fromUL3toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toUL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL3toUL2
        {
            get
            {
                return this._fromUL3toUL2;
            }
            set
            {
                if ((this._fromUL3toUL2 != value))
                {
                    Nullable<double> old = this._fromUL3toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toUL2Changing(e);
                    this.OnPropertyChanging("FromUL3toUL2", e, _fromUL3toUL2Attribute);
                    this._fromUL3toUL2 = value;
                    this.OnFromUL3toUL2Changed(e);
                    this.OnPropertyChanged("FromUL3toUL2", e, _fromUL3toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL3toIL1
        {
            get
            {
                return this._fromUL3toIL1;
            }
            set
            {
                if ((this._fromUL3toIL1 != value))
                {
                    Nullable<double> old = this._fromUL3toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toIL1Changing(e);
                    this.OnPropertyChanging("FromUL3toIL1", e, _fromUL3toIL1Attribute);
                    this._fromUL3toIL1 = value;
                    this.OnFromUL3toIL1Changed(e);
                    this.OnPropertyChanged("FromUL3toIL1", e, _fromUL3toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL3toIL2
        {
            get
            {
                return this._fromUL3toIL2;
            }
            set
            {
                if ((this._fromUL3toIL2 != value))
                {
                    Nullable<double> old = this._fromUL3toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toIL2Changing(e);
                    this.OnPropertyChanging("FromUL3toIL2", e, _fromUL3toIL2Attribute);
                    this._fromUL3toIL2 = value;
                    this.OnFromUL3toIL2Changed(e);
                    this.OnPropertyChanged("FromUL3toIL2", e, _fromUL3toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL3toIL3
        {
            get
            {
                return this._fromUL3toIL3;
            }
            set
            {
                if ((this._fromUL3toIL3 != value))
                {
                    Nullable<double> old = this._fromUL3toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toIL3Changing(e);
                    this.OnPropertyChanging("FromUL3toIL3", e, _fromUL3toIL3Attribute);
                    this._fromUL3toIL3 = value;
                    this.OnFromUL3toIL3Changed(e);
                    this.OnPropertyChanged("FromUL3toIL3", e, _fromUL3toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toIL0 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromUL3toIL0
        {
            get
            {
                return this._fromUL3toIL0;
            }
            set
            {
                if ((this._fromUL3toIL0 != value))
                {
                    Nullable<double> old = this._fromUL3toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toIL0Changing(e);
                    this.OnPropertyChanging("FromUL3toIL0", e, _fromUL3toIL0Attribute);
                    this._fromUL3toIL0 = value;
                    this.OnFromUL3toIL0Changed(e);
                    this.OnPropertyChanged("FromUL3toIL0", e, _fromUL3toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toUL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL1toUL1
        {
            get
            {
                return this._fromIL1toUL1;
            }
            set
            {
                if ((this._fromIL1toUL1 != value))
                {
                    Nullable<double> old = this._fromIL1toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toUL1Changing(e);
                    this.OnPropertyChanging("FromIL1toUL1", e, _fromIL1toUL1Attribute);
                    this._fromIL1toUL1 = value;
                    this.OnFromIL1toUL1Changed(e);
                    this.OnPropertyChanged("FromIL1toUL1", e, _fromIL1toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toUL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL1toUL2
        {
            get
            {
                return this._fromIL1toUL2;
            }
            set
            {
                if ((this._fromIL1toUL2 != value))
                {
                    Nullable<double> old = this._fromIL1toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toUL2Changing(e);
                    this.OnPropertyChanging("FromIL1toUL2", e, _fromIL1toUL2Attribute);
                    this._fromIL1toUL2 = value;
                    this.OnFromIL1toUL2Changed(e);
                    this.OnPropertyChanged("FromIL1toUL2", e, _fromIL1toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toUL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL1toUL3
        {
            get
            {
                return this._fromIL1toUL3;
            }
            set
            {
                if ((this._fromIL1toUL3 != value))
                {
                    Nullable<double> old = this._fromIL1toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toUL3Changing(e);
                    this.OnPropertyChanging("FromIL1toUL3", e, _fromIL1toUL3Attribute);
                    this._fromIL1toUL3 = value;
                    this.OnFromIL1toUL3Changed(e);
                    this.OnPropertyChanged("FromIL1toUL3", e, _fromIL1toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL1toIL2
        {
            get
            {
                return this._fromIL1toIL2;
            }
            set
            {
                if ((this._fromIL1toIL2 != value))
                {
                    Nullable<double> old = this._fromIL1toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toIL2Changing(e);
                    this.OnPropertyChanging("FromIL1toIL2", e, _fromIL1toIL2Attribute);
                    this._fromIL1toIL2 = value;
                    this.OnFromIL1toIL2Changed(e);
                    this.OnPropertyChanged("FromIL1toIL2", e, _fromIL1toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL1toIL3
        {
            get
            {
                return this._fromIL1toIL3;
            }
            set
            {
                if ((this._fromIL1toIL3 != value))
                {
                    Nullable<double> old = this._fromIL1toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toIL3Changing(e);
                    this.OnPropertyChanging("FromIL1toIL3", e, _fromIL1toIL3Attribute);
                    this._fromIL1toIL3 = value;
                    this.OnFromIL1toIL3Changed(e);
                    this.OnPropertyChanged("FromIL1toIL3", e, _fromIL1toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toIL0 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL1toIL0
        {
            get
            {
                return this._fromIL1toIL0;
            }
            set
            {
                if ((this._fromIL1toIL0 != value))
                {
                    Nullable<double> old = this._fromIL1toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toIL0Changing(e);
                    this.OnPropertyChanging("FromIL1toIL0", e, _fromIL1toIL0Attribute);
                    this._fromIL1toIL0 = value;
                    this.OnFromIL1toIL0Changed(e);
                    this.OnPropertyChanged("FromIL1toIL0", e, _fromIL1toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toUL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL2toUL1
        {
            get
            {
                return this._fromIL2toUL1;
            }
            set
            {
                if ((this._fromIL2toUL1 != value))
                {
                    Nullable<double> old = this._fromIL2toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toUL1Changing(e);
                    this.OnPropertyChanging("FromIL2toUL1", e, _fromIL2toUL1Attribute);
                    this._fromIL2toUL1 = value;
                    this.OnFromIL2toUL1Changed(e);
                    this.OnPropertyChanged("FromIL2toUL1", e, _fromIL2toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toUL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL2toUL2
        {
            get
            {
                return this._fromIL2toUL2;
            }
            set
            {
                if ((this._fromIL2toUL2 != value))
                {
                    Nullable<double> old = this._fromIL2toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toUL2Changing(e);
                    this.OnPropertyChanging("FromIL2toUL2", e, _fromIL2toUL2Attribute);
                    this._fromIL2toUL2 = value;
                    this.OnFromIL2toUL2Changed(e);
                    this.OnPropertyChanged("FromIL2toUL2", e, _fromIL2toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toUL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL2toUL3
        {
            get
            {
                return this._fromIL2toUL3;
            }
            set
            {
                if ((this._fromIL2toUL3 != value))
                {
                    Nullable<double> old = this._fromIL2toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toUL3Changing(e);
                    this.OnPropertyChanging("FromIL2toUL3", e, _fromIL2toUL3Attribute);
                    this._fromIL2toUL3 = value;
                    this.OnFromIL2toUL3Changed(e);
                    this.OnPropertyChanged("FromIL2toUL3", e, _fromIL2toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL2toIL1
        {
            get
            {
                return this._fromIL2toIL1;
            }
            set
            {
                if ((this._fromIL2toIL1 != value))
                {
                    Nullable<double> old = this._fromIL2toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toIL1Changing(e);
                    this.OnPropertyChanging("FromIL2toIL1", e, _fromIL2toIL1Attribute);
                    this._fromIL2toIL1 = value;
                    this.OnFromIL2toIL1Changed(e);
                    this.OnPropertyChanged("FromIL2toIL1", e, _fromIL2toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL2toIL3
        {
            get
            {
                return this._fromIL2toIL3;
            }
            set
            {
                if ((this._fromIL2toIL3 != value))
                {
                    Nullable<double> old = this._fromIL2toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toIL3Changing(e);
                    this.OnPropertyChanging("FromIL2toIL3", e, _fromIL2toIL3Attribute);
                    this._fromIL2toIL3 = value;
                    this.OnFromIL2toIL3Changed(e);
                    this.OnPropertyChanged("FromIL2toIL3", e, _fromIL2toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toIL0 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL2toIL0
        {
            get
            {
                return this._fromIL2toIL0;
            }
            set
            {
                if ((this._fromIL2toIL0 != value))
                {
                    Nullable<double> old = this._fromIL2toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toIL0Changing(e);
                    this.OnPropertyChanging("FromIL2toIL0", e, _fromIL2toIL0Attribute);
                    this._fromIL2toIL0 = value;
                    this.OnFromIL2toIL0Changed(e);
                    this.OnPropertyChanged("FromIL2toIL0", e, _fromIL2toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toUL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL3toUL1
        {
            get
            {
                return this._fromIL3toUL1;
            }
            set
            {
                if ((this._fromIL3toUL1 != value))
                {
                    Nullable<double> old = this._fromIL3toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toUL1Changing(e);
                    this.OnPropertyChanging("FromIL3toUL1", e, _fromIL3toUL1Attribute);
                    this._fromIL3toUL1 = value;
                    this.OnFromIL3toUL1Changed(e);
                    this.OnPropertyChanged("FromIL3toUL1", e, _fromIL3toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toUL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL3toUL2
        {
            get
            {
                return this._fromIL3toUL2;
            }
            set
            {
                if ((this._fromIL3toUL2 != value))
                {
                    Nullable<double> old = this._fromIL3toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toUL2Changing(e);
                    this.OnPropertyChanging("FromIL3toUL2", e, _fromIL3toUL2Attribute);
                    this._fromIL3toUL2 = value;
                    this.OnFromIL3toUL2Changed(e);
                    this.OnPropertyChanged("FromIL3toUL2", e, _fromIL3toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toUL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL3toUL3
        {
            get
            {
                return this._fromIL3toUL3;
            }
            set
            {
                if ((this._fromIL3toUL3 != value))
                {
                    Nullable<double> old = this._fromIL3toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toUL3Changing(e);
                    this.OnPropertyChanging("FromIL3toUL3", e, _fromIL3toUL3Attribute);
                    this._fromIL3toUL3 = value;
                    this.OnFromIL3toUL3Changed(e);
                    this.OnPropertyChanged("FromIL3toUL3", e, _fromIL3toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL3toIL1
        {
            get
            {
                return this._fromIL3toIL1;
            }
            set
            {
                if ((this._fromIL3toIL1 != value))
                {
                    Nullable<double> old = this._fromIL3toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toIL1Changing(e);
                    this.OnPropertyChanging("FromIL3toIL1", e, _fromIL3toIL1Attribute);
                    this._fromIL3toIL1 = value;
                    this.OnFromIL3toIL1Changed(e);
                    this.OnPropertyChanged("FromIL3toIL1", e, _fromIL3toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL3toIL2
        {
            get
            {
                return this._fromIL3toIL2;
            }
            set
            {
                if ((this._fromIL3toIL2 != value))
                {
                    Nullable<double> old = this._fromIL3toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toIL2Changing(e);
                    this.OnPropertyChanging("FromIL3toIL2", e, _fromIL3toIL2Attribute);
                    this._fromIL3toIL2 = value;
                    this.OnFromIL3toIL2Changed(e);
                    this.OnPropertyChanged("FromIL3toIL2", e, _fromIL3toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toIL0 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL3toIL0
        {
            get
            {
                return this._fromIL3toIL0;
            }
            set
            {
                if ((this._fromIL3toIL0 != value))
                {
                    Nullable<double> old = this._fromIL3toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toIL0Changing(e);
                    this.OnPropertyChanging("FromIL3toIL0", e, _fromIL3toIL0Attribute);
                    this._fromIL3toIL0 = value;
                    this.OnFromIL3toIL0Changed(e);
                    this.OnPropertyChanged("FromIL3toIL0", e, _fromIL3toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toUL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL0toUL1
        {
            get
            {
                return this._fromIL0toUL1;
            }
            set
            {
                if ((this._fromIL0toUL1 != value))
                {
                    Nullable<double> old = this._fromIL0toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toUL1Changing(e);
                    this.OnPropertyChanging("FromIL0toUL1", e, _fromIL0toUL1Attribute);
                    this._fromIL0toUL1 = value;
                    this.OnFromIL0toUL1Changed(e);
                    this.OnPropertyChanged("FromIL0toUL1", e, _fromIL0toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toUL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL0toUL2
        {
            get
            {
                return this._fromIL0toUL2;
            }
            set
            {
                if ((this._fromIL0toUL2 != value))
                {
                    Nullable<double> old = this._fromIL0toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toUL2Changing(e);
                    this.OnPropertyChanging("FromIL0toUL2", e, _fromIL0toUL2Attribute);
                    this._fromIL0toUL2 = value;
                    this.OnFromIL0toUL2Changed(e);
                    this.OnPropertyChanged("FromIL0toUL2", e, _fromIL0toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toUL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL0toUL3
        {
            get
            {
                return this._fromIL0toUL3;
            }
            set
            {
                if ((this._fromIL0toUL3 != value))
                {
                    Nullable<double> old = this._fromIL0toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toUL3Changing(e);
                    this.OnPropertyChanging("FromIL0toUL3", e, _fromIL0toUL3Attribute);
                    this._fromIL0toUL3 = value;
                    this.OnFromIL0toUL3Changed(e);
                    this.OnPropertyChanged("FromIL0toUL3", e, _fromIL0toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL0toIL1
        {
            get
            {
                return this._fromIL0toIL1;
            }
            set
            {
                if ((this._fromIL0toIL1 != value))
                {
                    Nullable<double> old = this._fromIL0toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toIL1Changing(e);
                    this.OnPropertyChanging("FromIL0toIL1", e, _fromIL0toIL1Attribute);
                    this._fromIL0toIL1 = value;
                    this.OnFromIL0toIL1Changed(e);
                    this.OnPropertyChanged("FromIL0toIL1", e, _fromIL0toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL0toIL2
        {
            get
            {
                return this._fromIL0toIL2;
            }
            set
            {
                if ((this._fromIL0toIL2 != value))
                {
                    Nullable<double> old = this._fromIL0toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toIL2Changing(e);
                    this.OnPropertyChanging("FromIL0toIL2", e, _fromIL0toIL2Attribute);
                    this._fromIL0toIL2 = value;
                    this.OnFromIL0toIL2Changed(e);
                    this.OnPropertyChanged("FromIL0toIL2", e, _fromIL0toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> FromIL0toIL3
        {
            get
            {
                return this._fromIL0toIL3;
            }
            set
            {
                if ((this._fromIL0toIL3 != value))
                {
                    Nullable<double> old = this._fromIL0toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toIL3Changing(e);
                    this.OnPropertyChanging("FromIL0toIL3", e, _fromIL0toIL3Attribute);
                    this._fromIL0toIL3 = value;
                    this.OnFromIL0toIL3Changed(e);
                    this.OnPropertyChanged("FromIL0toIL3", e, _fromIL0toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ex" +
                            "tendedPhaseAngleMeasurement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the FromUL1toUL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toUL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toUL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toUL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL1toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toUL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toUL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toUL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toUL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL2toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toUL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toUL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toUL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toUL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromUL3toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toUL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toUL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toUL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toUL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toUL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toUL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toIL0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toIL0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL1toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toUL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toUL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toUL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toUL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toUL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toUL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toIL0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toIL0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL2toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toUL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toUL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toUL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toUL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toUL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toUL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toIL0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toIL0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL3toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toUL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toUL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toUL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toUL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toUL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toUL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromIL0toIL3Changed;
        
        private static ITypedElement RetrieveFromUL1toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toUL2")));
        }
        
        /// <summary>
        /// Raises the FromUL1toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL1toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toUL3")));
        }
        
        /// <summary>
        /// Raises the FromUL1toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL1toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toIL1")));
        }
        
        /// <summary>
        /// Raises the FromUL1toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL1toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toIL2")));
        }
        
        /// <summary>
        /// Raises the FromUL1toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL1toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toIL3")));
        }
        
        /// <summary>
        /// Raises the FromUL1toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL1toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toIL0")));
        }
        
        /// <summary>
        /// Raises the FromUL1toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toUL1")));
        }
        
        /// <summary>
        /// Raises the FromUL2toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toUL3")));
        }
        
        /// <summary>
        /// Raises the FromUL2toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toIL1")));
        }
        
        /// <summary>
        /// Raises the FromUL2toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toIL2")));
        }
        
        /// <summary>
        /// Raises the FromUL2toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toIL3")));
        }
        
        /// <summary>
        /// Raises the FromUL2toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toIL0")));
        }
        
        /// <summary>
        /// Raises the FromUL2toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toUL1")));
        }
        
        /// <summary>
        /// Raises the FromUL3toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toUL2")));
        }
        
        /// <summary>
        /// Raises the FromUL3toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toIL1")));
        }
        
        /// <summary>
        /// Raises the FromUL3toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toIL2")));
        }
        
        /// <summary>
        /// Raises the FromUL3toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toIL3")));
        }
        
        /// <summary>
        /// Raises the FromUL3toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toIL0")));
        }
        
        /// <summary>
        /// Raises the FromUL3toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toUL1")));
        }
        
        /// <summary>
        /// Raises the FromIL1toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toUL2")));
        }
        
        /// <summary>
        /// Raises the FromIL1toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toUL3")));
        }
        
        /// <summary>
        /// Raises the FromIL1toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toIL2")));
        }
        
        /// <summary>
        /// Raises the FromIL1toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toIL3")));
        }
        
        /// <summary>
        /// Raises the FromIL1toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toIL0")));
        }
        
        /// <summary>
        /// Raises the FromIL1toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toUL1")));
        }
        
        /// <summary>
        /// Raises the FromIL2toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toUL2")));
        }
        
        /// <summary>
        /// Raises the FromIL2toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toUL3")));
        }
        
        /// <summary>
        /// Raises the FromIL2toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toIL1")));
        }
        
        /// <summary>
        /// Raises the FromIL2toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toIL3")));
        }
        
        /// <summary>
        /// Raises the FromIL2toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toIL0")));
        }
        
        /// <summary>
        /// Raises the FromIL2toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toUL1")));
        }
        
        /// <summary>
        /// Raises the FromIL3toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toUL2")));
        }
        
        /// <summary>
        /// Raises the FromIL3toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toUL3")));
        }
        
        /// <summary>
        /// Raises the FromIL3toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toIL1")));
        }
        
        /// <summary>
        /// Raises the FromIL3toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toIL2")));
        }
        
        /// <summary>
        /// Raises the FromIL3toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toIL0")));
        }
        
        /// <summary>
        /// Raises the FromIL3toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toUL1")));
        }
        
        /// <summary>
        /// Raises the FromIL0toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toUL2")));
        }
        
        /// <summary>
        /// Raises the FromIL0toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toUL3")));
        }
        
        /// <summary>
        /// Raises the FromIL0toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toIL1")));
        }
        
        /// <summary>
        /// Raises the FromIL0toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toIL2")));
        }
        
        /// <summary>
        /// Raises the FromIL0toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toIL3")));
        }
        
        /// <summary>
        /// Raises the FromIL0toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FROMUL1TOUL2"))
            {
                return this.FromUL1toUL2;
            }
            if ((attribute == "FROMUL1TOUL3"))
            {
                return this.FromUL1toUL3;
            }
            if ((attribute == "FROMUL1TOIL1"))
            {
                return this.FromUL1toIL1;
            }
            if ((attribute == "FROMUL1TOIL2"))
            {
                return this.FromUL1toIL2;
            }
            if ((attribute == "FROMUL1TOIL3"))
            {
                return this.FromUL1toIL3;
            }
            if ((attribute == "FROMUL1TOIL0"))
            {
                return this.FromUL1toIL0;
            }
            if ((attribute == "FROMUL2TOUL1"))
            {
                return this.FromUL2toUL1;
            }
            if ((attribute == "FROMUL2TOUL3"))
            {
                return this.FromUL2toUL3;
            }
            if ((attribute == "FROMUL2TOIL1"))
            {
                return this.FromUL2toIL1;
            }
            if ((attribute == "FROMUL2TOIL2"))
            {
                return this.FromUL2toIL2;
            }
            if ((attribute == "FROMUL2TOIL3"))
            {
                return this.FromUL2toIL3;
            }
            if ((attribute == "FROMUL2TOIL0"))
            {
                return this.FromUL2toIL0;
            }
            if ((attribute == "FROMUL3TOUL1"))
            {
                return this.FromUL3toUL1;
            }
            if ((attribute == "FROMUL3TOUL2"))
            {
                return this.FromUL3toUL2;
            }
            if ((attribute == "FROMUL3TOIL1"))
            {
                return this.FromUL3toIL1;
            }
            if ((attribute == "FROMUL3TOIL2"))
            {
                return this.FromUL3toIL2;
            }
            if ((attribute == "FROMUL3TOIL3"))
            {
                return this.FromUL3toIL3;
            }
            if ((attribute == "FROMUL3TOIL0"))
            {
                return this.FromUL3toIL0;
            }
            if ((attribute == "FROMIL1TOUL1"))
            {
                return this.FromIL1toUL1;
            }
            if ((attribute == "FROMIL1TOUL2"))
            {
                return this.FromIL1toUL2;
            }
            if ((attribute == "FROMIL1TOUL3"))
            {
                return this.FromIL1toUL3;
            }
            if ((attribute == "FROMIL1TOIL2"))
            {
                return this.FromIL1toIL2;
            }
            if ((attribute == "FROMIL1TOIL3"))
            {
                return this.FromIL1toIL3;
            }
            if ((attribute == "FROMIL1TOIL0"))
            {
                return this.FromIL1toIL0;
            }
            if ((attribute == "FROMIL2TOUL1"))
            {
                return this.FromIL2toUL1;
            }
            if ((attribute == "FROMIL2TOUL2"))
            {
                return this.FromIL2toUL2;
            }
            if ((attribute == "FROMIL2TOUL3"))
            {
                return this.FromIL2toUL3;
            }
            if ((attribute == "FROMIL2TOIL1"))
            {
                return this.FromIL2toIL1;
            }
            if ((attribute == "FROMIL2TOIL3"))
            {
                return this.FromIL2toIL3;
            }
            if ((attribute == "FROMIL2TOIL0"))
            {
                return this.FromIL2toIL0;
            }
            if ((attribute == "FROMIL3TOUL1"))
            {
                return this.FromIL3toUL1;
            }
            if ((attribute == "FROMIL3TOUL2"))
            {
                return this.FromIL3toUL2;
            }
            if ((attribute == "FROMIL3TOUL3"))
            {
                return this.FromIL3toUL3;
            }
            if ((attribute == "FROMIL3TOIL1"))
            {
                return this.FromIL3toIL1;
            }
            if ((attribute == "FROMIL3TOIL2"))
            {
                return this.FromIL3toIL2;
            }
            if ((attribute == "FROMIL3TOIL0"))
            {
                return this.FromIL3toIL0;
            }
            if ((attribute == "FROMIL0TOUL1"))
            {
                return this.FromIL0toUL1;
            }
            if ((attribute == "FROMIL0TOUL2"))
            {
                return this.FromIL0toUL2;
            }
            if ((attribute == "FROMIL0TOUL3"))
            {
                return this.FromIL0toUL3;
            }
            if ((attribute == "FROMIL0TOIL1"))
            {
                return this.FromIL0toIL1;
            }
            if ((attribute == "FROMIL0TOIL2"))
            {
                return this.FromIL0toIL2;
            }
            if ((attribute == "FROMIL0TOIL3"))
            {
                return this.FromIL0toIL3;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FROMUL1TOUL2"))
            {
                this.FromUL1toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL1TOUL3"))
            {
                this.FromUL1toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL1TOIL1"))
            {
                this.FromUL1toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL1TOIL2"))
            {
                this.FromUL1toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL1TOIL3"))
            {
                this.FromUL1toIL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL1TOIL0"))
            {
                this.FromUL1toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOUL1"))
            {
                this.FromUL2toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOUL3"))
            {
                this.FromUL2toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOIL1"))
            {
                this.FromUL2toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOIL2"))
            {
                this.FromUL2toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOIL3"))
            {
                this.FromUL2toIL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOIL0"))
            {
                this.FromUL2toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOUL1"))
            {
                this.FromUL3toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOUL2"))
            {
                this.FromUL3toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOIL1"))
            {
                this.FromUL3toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOIL2"))
            {
                this.FromUL3toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOIL3"))
            {
                this.FromUL3toIL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOIL0"))
            {
                this.FromUL3toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOUL1"))
            {
                this.FromIL1toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOUL2"))
            {
                this.FromIL1toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOUL3"))
            {
                this.FromIL1toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOIL2"))
            {
                this.FromIL1toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOIL3"))
            {
                this.FromIL1toIL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOIL0"))
            {
                this.FromIL1toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOUL1"))
            {
                this.FromIL2toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOUL2"))
            {
                this.FromIL2toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOUL3"))
            {
                this.FromIL2toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOIL1"))
            {
                this.FromIL2toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOIL3"))
            {
                this.FromIL2toIL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOIL0"))
            {
                this.FromIL2toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOUL1"))
            {
                this.FromIL3toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOUL2"))
            {
                this.FromIL3toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOUL3"))
            {
                this.FromIL3toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOIL1"))
            {
                this.FromIL3toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOIL2"))
            {
                this.FromIL3toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOIL0"))
            {
                this.FromIL3toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOUL1"))
            {
                this.FromIL0toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOUL2"))
            {
                this.FromIL0toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOUL3"))
            {
                this.FromIL0toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOIL1"))
            {
                this.FromIL0toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOIL2"))
            {
                this.FromIL0toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOIL3"))
            {
                this.FromIL0toIL3 = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ex" +
                        "tendedPhaseAngleMeasurement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toUL2 property
        /// </summary>
        private sealed class FromUL1toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toUL2;
                }
                set
                {
                    this.ModelElement.FromUL1toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toUL3 property
        /// </summary>
        private sealed class FromUL1toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toUL3;
                }
                set
                {
                    this.ModelElement.FromUL1toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toIL1 property
        /// </summary>
        private sealed class FromUL1toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toIL1;
                }
                set
                {
                    this.ModelElement.FromUL1toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toIL2 property
        /// </summary>
        private sealed class FromUL1toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toIL2;
                }
                set
                {
                    this.ModelElement.FromUL1toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toIL3 property
        /// </summary>
        private sealed class FromUL1toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toIL3;
                }
                set
                {
                    this.ModelElement.FromUL1toIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toIL0 property
        /// </summary>
        private sealed class FromUL1toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toIL0;
                }
                set
                {
                    this.ModelElement.FromUL1toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toUL1 property
        /// </summary>
        private sealed class FromUL2toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toUL1;
                }
                set
                {
                    this.ModelElement.FromUL2toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toUL3 property
        /// </summary>
        private sealed class FromUL2toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toUL3;
                }
                set
                {
                    this.ModelElement.FromUL2toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toIL1 property
        /// </summary>
        private sealed class FromUL2toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toIL1;
                }
                set
                {
                    this.ModelElement.FromUL2toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toIL2 property
        /// </summary>
        private sealed class FromUL2toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toIL2;
                }
                set
                {
                    this.ModelElement.FromUL2toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toIL3 property
        /// </summary>
        private sealed class FromUL2toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toIL3;
                }
                set
                {
                    this.ModelElement.FromUL2toIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toIL0 property
        /// </summary>
        private sealed class FromUL2toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toIL0;
                }
                set
                {
                    this.ModelElement.FromUL2toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toUL1 property
        /// </summary>
        private sealed class FromUL3toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toUL1;
                }
                set
                {
                    this.ModelElement.FromUL3toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toUL2 property
        /// </summary>
        private sealed class FromUL3toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toUL2;
                }
                set
                {
                    this.ModelElement.FromUL3toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toIL1 property
        /// </summary>
        private sealed class FromUL3toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toIL1;
                }
                set
                {
                    this.ModelElement.FromUL3toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toIL2 property
        /// </summary>
        private sealed class FromUL3toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toIL2;
                }
                set
                {
                    this.ModelElement.FromUL3toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toIL3 property
        /// </summary>
        private sealed class FromUL3toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toIL3;
                }
                set
                {
                    this.ModelElement.FromUL3toIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toIL0 property
        /// </summary>
        private sealed class FromUL3toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toIL0;
                }
                set
                {
                    this.ModelElement.FromUL3toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toUL1 property
        /// </summary>
        private sealed class FromIL1toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toUL1;
                }
                set
                {
                    this.ModelElement.FromIL1toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toUL2 property
        /// </summary>
        private sealed class FromIL1toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toUL2;
                }
                set
                {
                    this.ModelElement.FromIL1toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toUL3 property
        /// </summary>
        private sealed class FromIL1toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toUL3;
                }
                set
                {
                    this.ModelElement.FromIL1toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toIL2 property
        /// </summary>
        private sealed class FromIL1toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toIL2;
                }
                set
                {
                    this.ModelElement.FromIL1toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toIL3 property
        /// </summary>
        private sealed class FromIL1toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toIL3;
                }
                set
                {
                    this.ModelElement.FromIL1toIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toIL0 property
        /// </summary>
        private sealed class FromIL1toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toIL0;
                }
                set
                {
                    this.ModelElement.FromIL1toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toUL1 property
        /// </summary>
        private sealed class FromIL2toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toUL1;
                }
                set
                {
                    this.ModelElement.FromIL2toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toUL2 property
        /// </summary>
        private sealed class FromIL2toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toUL2;
                }
                set
                {
                    this.ModelElement.FromIL2toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toUL3 property
        /// </summary>
        private sealed class FromIL2toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toUL3;
                }
                set
                {
                    this.ModelElement.FromIL2toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toIL1 property
        /// </summary>
        private sealed class FromIL2toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toIL1;
                }
                set
                {
                    this.ModelElement.FromIL2toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toIL3 property
        /// </summary>
        private sealed class FromIL2toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toIL3;
                }
                set
                {
                    this.ModelElement.FromIL2toIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toIL0 property
        /// </summary>
        private sealed class FromIL2toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toIL0;
                }
                set
                {
                    this.ModelElement.FromIL2toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toUL1 property
        /// </summary>
        private sealed class FromIL3toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toUL1;
                }
                set
                {
                    this.ModelElement.FromIL3toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toUL2 property
        /// </summary>
        private sealed class FromIL3toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toUL2;
                }
                set
                {
                    this.ModelElement.FromIL3toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toUL3 property
        /// </summary>
        private sealed class FromIL3toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toUL3;
                }
                set
                {
                    this.ModelElement.FromIL3toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toIL1 property
        /// </summary>
        private sealed class FromIL3toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toIL1;
                }
                set
                {
                    this.ModelElement.FromIL3toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toIL2 property
        /// </summary>
        private sealed class FromIL3toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toIL2;
                }
                set
                {
                    this.ModelElement.FromIL3toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toIL0 property
        /// </summary>
        private sealed class FromIL3toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toIL0;
                }
                set
                {
                    this.ModelElement.FromIL3toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toUL1 property
        /// </summary>
        private sealed class FromIL0toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toUL1;
                }
                set
                {
                    this.ModelElement.FromIL0toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toUL2 property
        /// </summary>
        private sealed class FromIL0toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toUL2;
                }
                set
                {
                    this.ModelElement.FromIL0toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toUL3 property
        /// </summary>
        private sealed class FromIL0toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toUL3;
                }
                set
                {
                    this.ModelElement.FromIL0toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toIL1 property
        /// </summary>
        private sealed class FromIL0toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toIL1;
                }
                set
                {
                    this.ModelElement.FromIL0toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toIL2 property
        /// </summary>
        private sealed class FromIL0toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toIL2;
                }
                set
                {
                    this.ModelElement.FromIL0toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toIL3 property
        /// </summary>
        private sealed class FromIL0toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toIL3;
                }
                set
                {
                    this.ModelElement.FromIL0toIL3 = value;
                }
            }
        }
    }
}

