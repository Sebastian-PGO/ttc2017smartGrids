using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the MeterTemperEventRelatedObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
        "terTemperEventRelatedObject")]
    public partial class MeterTemperEventRelatedObject : Data, IMeterTemperEventRelatedObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Meter_open_event_counter property
        /// </summary>
        private Nullable<int> _meter_open_event_counter;
        
        private static Lazy<ITypedElement> _meter_open_event_counterAttribute = new Lazy<ITypedElement>(RetrieveMeter_open_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Meter_open_event_timestamp property
        /// </summary>
        private string _meter_open_event_timestamp;
        
        private static Lazy<ITypedElement> _meter_open_event_timestampAttribute = new Lazy<ITypedElement>(RetrieveMeter_open_event_timestampAttribute);
        
        /// <summary>
        /// The backing field for the Meter_open_event_duration property
        /// </summary>
        private Nullable<int> _meter_open_event_duration;
        
        private static Lazy<ITypedElement> _meter_open_event_durationAttribute = new Lazy<ITypedElement>(RetrieveMeter_open_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Meter_open_event_cumulative_duration property
        /// </summary>
        private Nullable<int> _meter_open_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _meter_open_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveMeter_open_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Terminal_cover_open_event_counter property
        /// </summary>
        private Nullable<int> _terminal_cover_open_event_counter;
        
        private static Lazy<ITypedElement> _terminal_cover_open_event_counterAttribute = new Lazy<ITypedElement>(RetrieveTerminal_cover_open_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Terminal_cover_open_event_time property
        /// </summary>
        private string _terminal_cover_open_event_time;
        
        private static Lazy<ITypedElement> _terminal_cover_open_event_timeAttribute = new Lazy<ITypedElement>(RetrieveTerminal_cover_open_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Terminal_cover_open_event_duration property
        /// </summary>
        private Nullable<int> _terminal_cover_open_event_duration;
        
        private static Lazy<ITypedElement> _terminal_cover_open_event_durationAttribute = new Lazy<ITypedElement>(RetrieveTerminal_cover_open_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Terminal_cover_open_event_cumulative_duration property
        /// </summary>
        private Nullable<int> _terminal_cover_open_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _terminal_cover_open_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveTerminal_cover_open_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Tilt_event_counter property
        /// </summary>
        private Nullable<int> _tilt_event_counter;
        
        private static Lazy<ITypedElement> _tilt_event_counterAttribute = new Lazy<ITypedElement>(RetrieveTilt_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Tilt_event_time property
        /// </summary>
        private string _tilt_event_time;
        
        private static Lazy<ITypedElement> _tilt_event_timeAttribute = new Lazy<ITypedElement>(RetrieveTilt_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Tilt_event_duration property
        /// </summary>
        private Nullable<int> _tilt_event_duration;
        
        private static Lazy<ITypedElement> _tilt_event_durationAttribute = new Lazy<ITypedElement>(RetrieveTilt_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Tilt_event_cumulative_duration property
        /// </summary>
        private Nullable<int> _tilt_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _tilt_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveTilt_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Strong_DC_magnetic_field_event_counter property
        /// </summary>
        private Nullable<int> _strong_DC_magnetic_field_event_counter;
        
        private static Lazy<ITypedElement> _strong_DC_magnetic_field_event_counterAttribute = new Lazy<ITypedElement>(RetrieveStrong_DC_magnetic_field_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Strong_DC_magnetic_field_event_time property
        /// </summary>
        private string _strong_DC_magnetic_field_event_time;
        
        private static Lazy<ITypedElement> _strong_DC_magnetic_field_event_timeAttribute = new Lazy<ITypedElement>(RetrieveStrong_DC_magnetic_field_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Strong_DC_magnetic_field_event_duration property
        /// </summary>
        private Nullable<int> _strong_DC_magnetic_field_event_duration;
        
        private static Lazy<ITypedElement> _strong_DC_magnetic_field_event_durationAttribute = new Lazy<ITypedElement>(RetrieveStrong_DC_magnetic_field_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Strong_DC_magnetic_field_event_cumulative_duration property
        /// </summary>
        private Nullable<int> _strong_DC_magnetic_field_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _strong_DC_magnetic_field_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveStrong_DC_magnetic_field_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Supply_control_switch_event_counter property
        /// </summary>
        private Nullable<int> _supply_control_switch_event_counter;
        
        private static Lazy<ITypedElement> _supply_control_switch_event_counterAttribute = new Lazy<ITypedElement>(RetrieveSupply_control_switch_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Supply_control_switch_event_time property
        /// </summary>
        private string _supply_control_switch_event_time;
        
        private static Lazy<ITypedElement> _supply_control_switch_event_timeAttribute = new Lazy<ITypedElement>(RetrieveSupply_control_switch_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Supply_control_switch_event_duration property
        /// </summary>
        private Nullable<int> _supply_control_switch_event_duration;
        
        private static Lazy<ITypedElement> _supply_control_switch_event_durationAttribute = new Lazy<ITypedElement>(RetrieveSupply_control_switch_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Supply_control_switch_event_cumulative_duration property
        /// </summary>
        private Nullable<int> _supply_control_switch_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _supply_control_switch_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveSupply_control_switch_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Metrology_tamper_event_counter property
        /// </summary>
        private Nullable<int> _metrology_tamper_event_counter;
        
        private static Lazy<ITypedElement> _metrology_tamper_event_counterAttribute = new Lazy<ITypedElement>(RetrieveMetrology_tamper_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Metrology_tamper_event_time property
        /// </summary>
        private string _metrology_tamper_event_time;
        
        private static Lazy<ITypedElement> _metrology_tamper_event_timeAttribute = new Lazy<ITypedElement>(RetrieveMetrology_tamper_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Metrology_tamper_event_duration property
        /// </summary>
        private Nullable<int> _metrology_tamper_event_duration;
        
        private static Lazy<ITypedElement> _metrology_tamper_event_durationAttribute = new Lazy<ITypedElement>(RetrieveMetrology_tamper_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Metrology_tamper_event_cumulative_duration property
        /// </summary>
        private Nullable<int> _metrology_tamper_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _metrology_tamper_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveMetrology_tamper_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Communication_tamper_event_counter property
        /// </summary>
        private Nullable<int> _communication_tamper_event_counter;
        
        private static Lazy<ITypedElement> _communication_tamper_event_counterAttribute = new Lazy<ITypedElement>(RetrieveCommunication_tamper_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Communication_tamper_event_time property
        /// </summary>
        private string _communication_tamper_event_time;
        
        private static Lazy<ITypedElement> _communication_tamper_event_timeAttribute = new Lazy<ITypedElement>(RetrieveCommunication_tamper_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Communication_tamper_event_duration property
        /// </summary>
        private Nullable<int> _communication_tamper_event_duration;
        
        private static Lazy<ITypedElement> _communication_tamper_event_durationAttribute = new Lazy<ITypedElement>(RetrieveCommunication_tamper_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Communication_tamper_event_cumulative_duration property
        /// </summary>
        private Nullable<int> _communication_tamper_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _communication_tamper_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveCommunication_tamper_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Manufacturer_specific property
        /// </summary>
        private string _manufacturer_specific;
        
        private static Lazy<ITypedElement> _manufacturer_specificAttribute = new Lazy<ITypedElement>(RetrieveManufacturer_specificAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Meter_open_event_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Meter_open_event_counter
        {
            get
            {
                return this._meter_open_event_counter;
            }
            set
            {
                if ((this._meter_open_event_counter != value))
                {
                    Nullable<int> old = this._meter_open_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeter_open_event_counterChanging(e);
                    this.OnPropertyChanging("Meter_open_event_counter", e, _meter_open_event_counterAttribute);
                    this._meter_open_event_counter = value;
                    this.OnMeter_open_event_counterChanged(e);
                    this.OnPropertyChanged("Meter_open_event_counter", e, _meter_open_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Meter_open_event_timestamp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Meter_open_event_timestamp
        {
            get
            {
                return this._meter_open_event_timestamp;
            }
            set
            {
                if ((this._meter_open_event_timestamp != value))
                {
                    string old = this._meter_open_event_timestamp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeter_open_event_timestampChanging(e);
                    this.OnPropertyChanging("Meter_open_event_timestamp", e, _meter_open_event_timestampAttribute);
                    this._meter_open_event_timestamp = value;
                    this.OnMeter_open_event_timestampChanged(e);
                    this.OnPropertyChanged("Meter_open_event_timestamp", e, _meter_open_event_timestampAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Meter_open_event_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Meter_open_event_duration
        {
            get
            {
                return this._meter_open_event_duration;
            }
            set
            {
                if ((this._meter_open_event_duration != value))
                {
                    Nullable<int> old = this._meter_open_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeter_open_event_durationChanging(e);
                    this.OnPropertyChanging("Meter_open_event_duration", e, _meter_open_event_durationAttribute);
                    this._meter_open_event_duration = value;
                    this.OnMeter_open_event_durationChanged(e);
                    this.OnPropertyChanged("Meter_open_event_duration", e, _meter_open_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Meter_open_event_cumulative_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Meter_open_event_cumulative_duration
        {
            get
            {
                return this._meter_open_event_cumulative_duration;
            }
            set
            {
                if ((this._meter_open_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._meter_open_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeter_open_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Meter_open_event_cumulative_duration", e, _meter_open_event_cumulative_durationAttribute);
                    this._meter_open_event_cumulative_duration = value;
                    this.OnMeter_open_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Meter_open_event_cumulative_duration", e, _meter_open_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Terminal_cover_open_event_counter
        {
            get
            {
                return this._terminal_cover_open_event_counter;
            }
            set
            {
                if ((this._terminal_cover_open_event_counter != value))
                {
                    Nullable<int> old = this._terminal_cover_open_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminal_cover_open_event_counterChanging(e);
                    this.OnPropertyChanging("Terminal_cover_open_event_counter", e, _terminal_cover_open_event_counterAttribute);
                    this._terminal_cover_open_event_counter = value;
                    this.OnTerminal_cover_open_event_counterChanged(e);
                    this.OnPropertyChanged("Terminal_cover_open_event_counter", e, _terminal_cover_open_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_time property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Terminal_cover_open_event_time
        {
            get
            {
                return this._terminal_cover_open_event_time;
            }
            set
            {
                if ((this._terminal_cover_open_event_time != value))
                {
                    string old = this._terminal_cover_open_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminal_cover_open_event_timeChanging(e);
                    this.OnPropertyChanging("Terminal_cover_open_event_time", e, _terminal_cover_open_event_timeAttribute);
                    this._terminal_cover_open_event_time = value;
                    this.OnTerminal_cover_open_event_timeChanged(e);
                    this.OnPropertyChanged("Terminal_cover_open_event_time", e, _terminal_cover_open_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Terminal_cover_open_event_duration
        {
            get
            {
                return this._terminal_cover_open_event_duration;
            }
            set
            {
                if ((this._terminal_cover_open_event_duration != value))
                {
                    Nullable<int> old = this._terminal_cover_open_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminal_cover_open_event_durationChanging(e);
                    this.OnPropertyChanging("Terminal_cover_open_event_duration", e, _terminal_cover_open_event_durationAttribute);
                    this._terminal_cover_open_event_duration = value;
                    this.OnTerminal_cover_open_event_durationChanged(e);
                    this.OnPropertyChanged("Terminal_cover_open_event_duration", e, _terminal_cover_open_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_cumulative_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Terminal_cover_open_event_cumulative_duration
        {
            get
            {
                return this._terminal_cover_open_event_cumulative_duration;
            }
            set
            {
                if ((this._terminal_cover_open_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._terminal_cover_open_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminal_cover_open_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Terminal_cover_open_event_cumulative_duration", e, _terminal_cover_open_event_cumulative_durationAttribute);
                    this._terminal_cover_open_event_cumulative_duration = value;
                    this.OnTerminal_cover_open_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Terminal_cover_open_event_cumulative_duration", e, _terminal_cover_open_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Tilt_event_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Tilt_event_counter
        {
            get
            {
                return this._tilt_event_counter;
            }
            set
            {
                if ((this._tilt_event_counter != value))
                {
                    Nullable<int> old = this._tilt_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTilt_event_counterChanging(e);
                    this.OnPropertyChanging("Tilt_event_counter", e, _tilt_event_counterAttribute);
                    this._tilt_event_counter = value;
                    this.OnTilt_event_counterChanged(e);
                    this.OnPropertyChanged("Tilt_event_counter", e, _tilt_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Tilt_event_time property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Tilt_event_time
        {
            get
            {
                return this._tilt_event_time;
            }
            set
            {
                if ((this._tilt_event_time != value))
                {
                    string old = this._tilt_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTilt_event_timeChanging(e);
                    this.OnPropertyChanging("Tilt_event_time", e, _tilt_event_timeAttribute);
                    this._tilt_event_time = value;
                    this.OnTilt_event_timeChanged(e);
                    this.OnPropertyChanged("Tilt_event_time", e, _tilt_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Tilt_event_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Tilt_event_duration
        {
            get
            {
                return this._tilt_event_duration;
            }
            set
            {
                if ((this._tilt_event_duration != value))
                {
                    Nullable<int> old = this._tilt_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTilt_event_durationChanging(e);
                    this.OnPropertyChanging("Tilt_event_duration", e, _tilt_event_durationAttribute);
                    this._tilt_event_duration = value;
                    this.OnTilt_event_durationChanged(e);
                    this.OnPropertyChanged("Tilt_event_duration", e, _tilt_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Tilt_event_cumulative_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Tilt_event_cumulative_duration
        {
            get
            {
                return this._tilt_event_cumulative_duration;
            }
            set
            {
                if ((this._tilt_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._tilt_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTilt_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Tilt_event_cumulative_duration", e, _tilt_event_cumulative_durationAttribute);
                    this._tilt_event_cumulative_duration = value;
                    this.OnTilt_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Tilt_event_cumulative_duration", e, _tilt_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Strong_DC_magnetic_field_event_counter
        {
            get
            {
                return this._strong_DC_magnetic_field_event_counter;
            }
            set
            {
                if ((this._strong_DC_magnetic_field_event_counter != value))
                {
                    Nullable<int> old = this._strong_DC_magnetic_field_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrong_DC_magnetic_field_event_counterChanging(e);
                    this.OnPropertyChanging("Strong_DC_magnetic_field_event_counter", e, _strong_DC_magnetic_field_event_counterAttribute);
                    this._strong_DC_magnetic_field_event_counter = value;
                    this.OnStrong_DC_magnetic_field_event_counterChanged(e);
                    this.OnPropertyChanged("Strong_DC_magnetic_field_event_counter", e, _strong_DC_magnetic_field_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_time property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Strong_DC_magnetic_field_event_time
        {
            get
            {
                return this._strong_DC_magnetic_field_event_time;
            }
            set
            {
                if ((this._strong_DC_magnetic_field_event_time != value))
                {
                    string old = this._strong_DC_magnetic_field_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrong_DC_magnetic_field_event_timeChanging(e);
                    this.OnPropertyChanging("Strong_DC_magnetic_field_event_time", e, _strong_DC_magnetic_field_event_timeAttribute);
                    this._strong_DC_magnetic_field_event_time = value;
                    this.OnStrong_DC_magnetic_field_event_timeChanged(e);
                    this.OnPropertyChanged("Strong_DC_magnetic_field_event_time", e, _strong_DC_magnetic_field_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Strong_DC_magnetic_field_event_duration
        {
            get
            {
                return this._strong_DC_magnetic_field_event_duration;
            }
            set
            {
                if ((this._strong_DC_magnetic_field_event_duration != value))
                {
                    Nullable<int> old = this._strong_DC_magnetic_field_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrong_DC_magnetic_field_event_durationChanging(e);
                    this.OnPropertyChanging("Strong_DC_magnetic_field_event_duration", e, _strong_DC_magnetic_field_event_durationAttribute);
                    this._strong_DC_magnetic_field_event_duration = value;
                    this.OnStrong_DC_magnetic_field_event_durationChanged(e);
                    this.OnPropertyChanged("Strong_DC_magnetic_field_event_duration", e, _strong_DC_magnetic_field_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_cumulative_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Strong_DC_magnetic_field_event_cumulative_duration
        {
            get
            {
                return this._strong_DC_magnetic_field_event_cumulative_duration;
            }
            set
            {
                if ((this._strong_DC_magnetic_field_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._strong_DC_magnetic_field_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrong_DC_magnetic_field_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Strong_DC_magnetic_field_event_cumulative_duration", e, _strong_DC_magnetic_field_event_cumulative_durationAttribute);
                    this._strong_DC_magnetic_field_event_cumulative_duration = value;
                    this.OnStrong_DC_magnetic_field_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Strong_DC_magnetic_field_event_cumulative_duration", e, _strong_DC_magnetic_field_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Supply_control_switch_event_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Supply_control_switch_event_counter
        {
            get
            {
                return this._supply_control_switch_event_counter;
            }
            set
            {
                if ((this._supply_control_switch_event_counter != value))
                {
                    Nullable<int> old = this._supply_control_switch_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupply_control_switch_event_counterChanging(e);
                    this.OnPropertyChanging("Supply_control_switch_event_counter", e, _supply_control_switch_event_counterAttribute);
                    this._supply_control_switch_event_counter = value;
                    this.OnSupply_control_switch_event_counterChanged(e);
                    this.OnPropertyChanged("Supply_control_switch_event_counter", e, _supply_control_switch_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Supply_control_switch_event_time property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Supply_control_switch_event_time
        {
            get
            {
                return this._supply_control_switch_event_time;
            }
            set
            {
                if ((this._supply_control_switch_event_time != value))
                {
                    string old = this._supply_control_switch_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupply_control_switch_event_timeChanging(e);
                    this.OnPropertyChanging("Supply_control_switch_event_time", e, _supply_control_switch_event_timeAttribute);
                    this._supply_control_switch_event_time = value;
                    this.OnSupply_control_switch_event_timeChanged(e);
                    this.OnPropertyChanged("Supply_control_switch_event_time", e, _supply_control_switch_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Supply_control_switch_event_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Supply_control_switch_event_duration
        {
            get
            {
                return this._supply_control_switch_event_duration;
            }
            set
            {
                if ((this._supply_control_switch_event_duration != value))
                {
                    Nullable<int> old = this._supply_control_switch_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupply_control_switch_event_durationChanging(e);
                    this.OnPropertyChanging("Supply_control_switch_event_duration", e, _supply_control_switch_event_durationAttribute);
                    this._supply_control_switch_event_duration = value;
                    this.OnSupply_control_switch_event_durationChanged(e);
                    this.OnPropertyChanged("Supply_control_switch_event_duration", e, _supply_control_switch_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Supply_control_switch_event_cumulative_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Supply_control_switch_event_cumulative_duration
        {
            get
            {
                return this._supply_control_switch_event_cumulative_duration;
            }
            set
            {
                if ((this._supply_control_switch_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._supply_control_switch_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupply_control_switch_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Supply_control_switch_event_cumulative_duration", e, _supply_control_switch_event_cumulative_durationAttribute);
                    this._supply_control_switch_event_cumulative_duration = value;
                    this.OnSupply_control_switch_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Supply_control_switch_event_cumulative_duration", e, _supply_control_switch_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Metrology_tamper_event_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Metrology_tamper_event_counter
        {
            get
            {
                return this._metrology_tamper_event_counter;
            }
            set
            {
                if ((this._metrology_tamper_event_counter != value))
                {
                    Nullable<int> old = this._metrology_tamper_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMetrology_tamper_event_counterChanging(e);
                    this.OnPropertyChanging("Metrology_tamper_event_counter", e, _metrology_tamper_event_counterAttribute);
                    this._metrology_tamper_event_counter = value;
                    this.OnMetrology_tamper_event_counterChanged(e);
                    this.OnPropertyChanged("Metrology_tamper_event_counter", e, _metrology_tamper_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Metrology_tamper_event_time property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Metrology_tamper_event_time
        {
            get
            {
                return this._metrology_tamper_event_time;
            }
            set
            {
                if ((this._metrology_tamper_event_time != value))
                {
                    string old = this._metrology_tamper_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMetrology_tamper_event_timeChanging(e);
                    this.OnPropertyChanging("Metrology_tamper_event_time", e, _metrology_tamper_event_timeAttribute);
                    this._metrology_tamper_event_time = value;
                    this.OnMetrology_tamper_event_timeChanged(e);
                    this.OnPropertyChanged("Metrology_tamper_event_time", e, _metrology_tamper_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Metrology_tamper_event_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Metrology_tamper_event_duration
        {
            get
            {
                return this._metrology_tamper_event_duration;
            }
            set
            {
                if ((this._metrology_tamper_event_duration != value))
                {
                    Nullable<int> old = this._metrology_tamper_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMetrology_tamper_event_durationChanging(e);
                    this.OnPropertyChanging("Metrology_tamper_event_duration", e, _metrology_tamper_event_durationAttribute);
                    this._metrology_tamper_event_duration = value;
                    this.OnMetrology_tamper_event_durationChanged(e);
                    this.OnPropertyChanged("Metrology_tamper_event_duration", e, _metrology_tamper_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Metrology_tamper_event_cumulative_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Metrology_tamper_event_cumulative_duration
        {
            get
            {
                return this._metrology_tamper_event_cumulative_duration;
            }
            set
            {
                if ((this._metrology_tamper_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._metrology_tamper_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMetrology_tamper_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Metrology_tamper_event_cumulative_duration", e, _metrology_tamper_event_cumulative_durationAttribute);
                    this._metrology_tamper_event_cumulative_duration = value;
                    this.OnMetrology_tamper_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Metrology_tamper_event_cumulative_duration", e, _metrology_tamper_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Communication_tamper_event_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Communication_tamper_event_counter
        {
            get
            {
                return this._communication_tamper_event_counter;
            }
            set
            {
                if ((this._communication_tamper_event_counter != value))
                {
                    Nullable<int> old = this._communication_tamper_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunication_tamper_event_counterChanging(e);
                    this.OnPropertyChanging("Communication_tamper_event_counter", e, _communication_tamper_event_counterAttribute);
                    this._communication_tamper_event_counter = value;
                    this.OnCommunication_tamper_event_counterChanged(e);
                    this.OnPropertyChanged("Communication_tamper_event_counter", e, _communication_tamper_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Communication_tamper_event_time property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Communication_tamper_event_time
        {
            get
            {
                return this._communication_tamper_event_time;
            }
            set
            {
                if ((this._communication_tamper_event_time != value))
                {
                    string old = this._communication_tamper_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunication_tamper_event_timeChanging(e);
                    this.OnPropertyChanging("Communication_tamper_event_time", e, _communication_tamper_event_timeAttribute);
                    this._communication_tamper_event_time = value;
                    this.OnCommunication_tamper_event_timeChanged(e);
                    this.OnPropertyChanged("Communication_tamper_event_time", e, _communication_tamper_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Communication_tamper_event_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Communication_tamper_event_duration
        {
            get
            {
                return this._communication_tamper_event_duration;
            }
            set
            {
                if ((this._communication_tamper_event_duration != value))
                {
                    Nullable<int> old = this._communication_tamper_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunication_tamper_event_durationChanging(e);
                    this.OnPropertyChanging("Communication_tamper_event_duration", e, _communication_tamper_event_durationAttribute);
                    this._communication_tamper_event_duration = value;
                    this.OnCommunication_tamper_event_durationChanged(e);
                    this.OnPropertyChanged("Communication_tamper_event_duration", e, _communication_tamper_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Communication_tamper_event_cumulative_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Communication_tamper_event_cumulative_duration
        {
            get
            {
                return this._communication_tamper_event_cumulative_duration;
            }
            set
            {
                if ((this._communication_tamper_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._communication_tamper_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunication_tamper_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Communication_tamper_event_cumulative_duration", e, _communication_tamper_event_cumulative_durationAttribute);
                    this._communication_tamper_event_cumulative_duration = value;
                    this.OnCommunication_tamper_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Communication_tamper_event_cumulative_duration", e, _communication_tamper_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Manufacturer_specific property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Manufacturer_specific
        {
            get
            {
                return this._manufacturer_specific;
            }
            set
            {
                if ((this._manufacturer_specific != value))
                {
                    string old = this._manufacturer_specific;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnManufacturer_specificChanging(e);
                    this.OnPropertyChanging("Manufacturer_specific", e, _manufacturer_specificAttribute);
                    this._manufacturer_specific = value;
                    this.OnManufacturer_specificChanged(e);
                    this.OnPropertyChanged("Manufacturer_specific", e, _manufacturer_specificAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
                            "terTemperEventRelatedObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Meter_open_event_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Meter_open_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Meter_open_event_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Meter_open_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Meter_open_event_timestamp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Meter_open_event_timestampChanging;
        
        /// <summary>
        /// Gets fired when the Meter_open_event_timestamp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Meter_open_event_timestampChanged;
        
        /// <summary>
        /// Gets fired before the Meter_open_event_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Meter_open_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Meter_open_event_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Meter_open_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Meter_open_event_cumulative_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Meter_open_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Meter_open_event_cumulative_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Meter_open_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_time property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_time property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_cumulative_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_cumulative_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Tilt_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Tilt_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_time property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Tilt_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_time property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Tilt_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Tilt_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Tilt_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_cumulative_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Tilt_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_cumulative_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Tilt_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_time property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_time property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_cumulative_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_cumulative_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Supply_control_switch_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Supply_control_switch_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_time property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Supply_control_switch_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_time property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Supply_control_switch_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Supply_control_switch_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Supply_control_switch_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_cumulative_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Supply_control_switch_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_cumulative_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Supply_control_switch_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Metrology_tamper_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Metrology_tamper_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_time property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Metrology_tamper_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_time property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Metrology_tamper_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Metrology_tamper_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Metrology_tamper_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_cumulative_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Metrology_tamper_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_cumulative_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Metrology_tamper_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Communication_tamper_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Communication_tamper_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_time property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Communication_tamper_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_time property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Communication_tamper_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Communication_tamper_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Communication_tamper_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_cumulative_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Communication_tamper_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_cumulative_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Communication_tamper_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Manufacturer_specific property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Manufacturer_specificChanging;
        
        /// <summary>
        /// Gets fired when the Manufacturer_specific property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Manufacturer_specificChanged;
        
        private static ITypedElement RetrieveMeter_open_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Meter_open_event_counter")));
        }
        
        /// <summary>
        /// Raises the Meter_open_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Meter_open_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeter_open_event_timestampAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Meter_open_event_timestamp")));
        }
        
        /// <summary>
        /// Raises the Meter_open_event_timestampChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_timestampChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_timestampChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Meter_open_event_timestampChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_timestampChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_timestampChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeter_open_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Meter_open_event_duration")));
        }
        
        /// <summary>
        /// Raises the Meter_open_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Meter_open_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeter_open_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Meter_open_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Meter_open_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Meter_open_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTerminal_cover_open_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Terminal_cover_open_event_counter")));
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTerminal_cover_open_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Terminal_cover_open_event_time")));
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTerminal_cover_open_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Terminal_cover_open_event_duration")));
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTerminal_cover_open_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Terminal_cover_open_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTilt_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Tilt_event_counter")));
        }
        
        /// <summary>
        /// Raises the Tilt_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Tilt_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTilt_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Tilt_event_time")));
        }
        
        /// <summary>
        /// Raises the Tilt_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Tilt_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTilt_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Tilt_event_duration")));
        }
        
        /// <summary>
        /// Raises the Tilt_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Tilt_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTilt_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Tilt_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Tilt_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Tilt_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStrong_DC_magnetic_field_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Strong_DC_magnetic_field_event_counter")));
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStrong_DC_magnetic_field_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Strong_DC_magnetic_field_event_time")));
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStrong_DC_magnetic_field_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Strong_DC_magnetic_field_event_duration")));
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStrong_DC_magnetic_field_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Strong_DC_magnetic_field_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupply_control_switch_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Supply_control_switch_event_counter")));
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupply_control_switch_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Supply_control_switch_event_time")));
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupply_control_switch_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Supply_control_switch_event_duration")));
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupply_control_switch_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Supply_control_switch_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMetrology_tamper_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Metrology_tamper_event_counter")));
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMetrology_tamper_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Metrology_tamper_event_time")));
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMetrology_tamper_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Metrology_tamper_event_duration")));
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMetrology_tamper_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Metrology_tamper_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCommunication_tamper_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Communication_tamper_event_counter")));
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCommunication_tamper_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Communication_tamper_event_time")));
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCommunication_tamper_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Communication_tamper_event_duration")));
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCommunication_tamper_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Communication_tamper_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveManufacturer_specificAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterTemperEventRelatedObject.ClassInstance)).Resolve("Manufacturer_specific")));
        }
        
        /// <summary>
        /// Raises the Manufacturer_specificChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManufacturer_specificChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Manufacturer_specificChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Manufacturer_specificChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManufacturer_specificChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Manufacturer_specificChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "METER_OPEN_EVENT_COUNTER"))
            {
                return this.Meter_open_event_counter;
            }
            if ((attribute == "METER_OPEN_EVENT_TIMESTAMP"))
            {
                return this.Meter_open_event_timestamp;
            }
            if ((attribute == "METER_OPEN_EVENT_DURATION"))
            {
                return this.Meter_open_event_duration;
            }
            if ((attribute == "METER_OPEN_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Meter_open_event_cumulative_duration;
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_COUNTER"))
            {
                return this.Terminal_cover_open_event_counter;
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_TIME"))
            {
                return this.Terminal_cover_open_event_time;
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_DURATION"))
            {
                return this.Terminal_cover_open_event_duration;
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Terminal_cover_open_event_cumulative_duration;
            }
            if ((attribute == "TILT_EVENT_COUNTER"))
            {
                return this.Tilt_event_counter;
            }
            if ((attribute == "TILT_EVENT_TIME"))
            {
                return this.Tilt_event_time;
            }
            if ((attribute == "TILT_EVENT_DURATION"))
            {
                return this.Tilt_event_duration;
            }
            if ((attribute == "TILT_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Tilt_event_cumulative_duration;
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_COUNTER"))
            {
                return this.Strong_DC_magnetic_field_event_counter;
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_TIME"))
            {
                return this.Strong_DC_magnetic_field_event_time;
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_DURATION"))
            {
                return this.Strong_DC_magnetic_field_event_duration;
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Strong_DC_magnetic_field_event_cumulative_duration;
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_COUNTER"))
            {
                return this.Supply_control_switch_event_counter;
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_TIME"))
            {
                return this.Supply_control_switch_event_time;
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_DURATION"))
            {
                return this.Supply_control_switch_event_duration;
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Supply_control_switch_event_cumulative_duration;
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_COUNTER"))
            {
                return this.Metrology_tamper_event_counter;
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_TIME"))
            {
                return this.Metrology_tamper_event_time;
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_DURATION"))
            {
                return this.Metrology_tamper_event_duration;
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Metrology_tamper_event_cumulative_duration;
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_COUNTER"))
            {
                return this.Communication_tamper_event_counter;
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_TIME"))
            {
                return this.Communication_tamper_event_time;
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_DURATION"))
            {
                return this.Communication_tamper_event_duration;
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Communication_tamper_event_cumulative_duration;
            }
            if ((attribute == "MANUFACTURER_SPECIFIC"))
            {
                return this.Manufacturer_specific;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "METER_OPEN_EVENT_COUNTER"))
            {
                this.Meter_open_event_counter = ((int)(value));
                return;
            }
            if ((feature == "METER_OPEN_EVENT_TIMESTAMP"))
            {
                this.Meter_open_event_timestamp = ((string)(value));
                return;
            }
            if ((feature == "METER_OPEN_EVENT_DURATION"))
            {
                this.Meter_open_event_duration = ((int)(value));
                return;
            }
            if ((feature == "METER_OPEN_EVENT_CUMULATIVE_DURATION"))
            {
                this.Meter_open_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "TERMINAL_COVER_OPEN_EVENT_COUNTER"))
            {
                this.Terminal_cover_open_event_counter = ((int)(value));
                return;
            }
            if ((feature == "TERMINAL_COVER_OPEN_EVENT_TIME"))
            {
                this.Terminal_cover_open_event_time = ((string)(value));
                return;
            }
            if ((feature == "TERMINAL_COVER_OPEN_EVENT_DURATION"))
            {
                this.Terminal_cover_open_event_duration = ((int)(value));
                return;
            }
            if ((feature == "TERMINAL_COVER_OPEN_EVENT_CUMULATIVE_DURATION"))
            {
                this.Terminal_cover_open_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "TILT_EVENT_COUNTER"))
            {
                this.Tilt_event_counter = ((int)(value));
                return;
            }
            if ((feature == "TILT_EVENT_TIME"))
            {
                this.Tilt_event_time = ((string)(value));
                return;
            }
            if ((feature == "TILT_EVENT_DURATION"))
            {
                this.Tilt_event_duration = ((int)(value));
                return;
            }
            if ((feature == "TILT_EVENT_CUMULATIVE_DURATION"))
            {
                this.Tilt_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "STRONG_DC_MAGNETIC_FIELD_EVENT_COUNTER"))
            {
                this.Strong_DC_magnetic_field_event_counter = ((int)(value));
                return;
            }
            if ((feature == "STRONG_DC_MAGNETIC_FIELD_EVENT_TIME"))
            {
                this.Strong_DC_magnetic_field_event_time = ((string)(value));
                return;
            }
            if ((feature == "STRONG_DC_MAGNETIC_FIELD_EVENT_DURATION"))
            {
                this.Strong_DC_magnetic_field_event_duration = ((int)(value));
                return;
            }
            if ((feature == "STRONG_DC_MAGNETIC_FIELD_EVENT_CUMULATIVE_DURATION"))
            {
                this.Strong_DC_magnetic_field_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "SUPPLY_CONTROL_SWITCH_EVENT_COUNTER"))
            {
                this.Supply_control_switch_event_counter = ((int)(value));
                return;
            }
            if ((feature == "SUPPLY_CONTROL_SWITCH_EVENT_TIME"))
            {
                this.Supply_control_switch_event_time = ((string)(value));
                return;
            }
            if ((feature == "SUPPLY_CONTROL_SWITCH_EVENT_DURATION"))
            {
                this.Supply_control_switch_event_duration = ((int)(value));
                return;
            }
            if ((feature == "SUPPLY_CONTROL_SWITCH_EVENT_CUMULATIVE_DURATION"))
            {
                this.Supply_control_switch_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "METROLOGY_TAMPER_EVENT_COUNTER"))
            {
                this.Metrology_tamper_event_counter = ((int)(value));
                return;
            }
            if ((feature == "METROLOGY_TAMPER_EVENT_TIME"))
            {
                this.Metrology_tamper_event_time = ((string)(value));
                return;
            }
            if ((feature == "METROLOGY_TAMPER_EVENT_DURATION"))
            {
                this.Metrology_tamper_event_duration = ((int)(value));
                return;
            }
            if ((feature == "METROLOGY_TAMPER_EVENT_CUMULATIVE_DURATION"))
            {
                this.Metrology_tamper_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "COMMUNICATION_TAMPER_EVENT_COUNTER"))
            {
                this.Communication_tamper_event_counter = ((int)(value));
                return;
            }
            if ((feature == "COMMUNICATION_TAMPER_EVENT_TIME"))
            {
                this.Communication_tamper_event_time = ((string)(value));
                return;
            }
            if ((feature == "COMMUNICATION_TAMPER_EVENT_DURATION"))
            {
                this.Communication_tamper_event_duration = ((int)(value));
                return;
            }
            if ((feature == "COMMUNICATION_TAMPER_EVENT_CUMULATIVE_DURATION"))
            {
                this.Communication_tamper_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "MANUFACTURER_SPECIFIC"))
            {
                this.Manufacturer_specific = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
                        "terTemperEventRelatedObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Meter_open_event_counter property
        /// </summary>
        private sealed class Meter_open_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Meter_open_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Meter_open_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Meter_open_event_counter;
                }
                set
                {
                    this.ModelElement.Meter_open_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Meter_open_event_timestamp property
        /// </summary>
        private sealed class Meter_open_event_timestampProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Meter_open_event_timestampProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Meter_open_event_timestamp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Meter_open_event_timestamp;
                }
                set
                {
                    this.ModelElement.Meter_open_event_timestamp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Meter_open_event_duration property
        /// </summary>
        private sealed class Meter_open_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Meter_open_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Meter_open_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Meter_open_event_duration;
                }
                set
                {
                    this.ModelElement.Meter_open_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Meter_open_event_cumulative_duration property
        /// </summary>
        private sealed class Meter_open_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Meter_open_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Meter_open_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Meter_open_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Meter_open_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal_cover_open_event_counter property
        /// </summary>
        private sealed class Terminal_cover_open_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Terminal_cover_open_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Terminal_cover_open_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Terminal_cover_open_event_counter;
                }
                set
                {
                    this.ModelElement.Terminal_cover_open_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal_cover_open_event_time property
        /// </summary>
        private sealed class Terminal_cover_open_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Terminal_cover_open_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Terminal_cover_open_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Terminal_cover_open_event_time;
                }
                set
                {
                    this.ModelElement.Terminal_cover_open_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal_cover_open_event_duration property
        /// </summary>
        private sealed class Terminal_cover_open_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Terminal_cover_open_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Terminal_cover_open_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Terminal_cover_open_event_duration;
                }
                set
                {
                    this.ModelElement.Terminal_cover_open_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal_cover_open_event_cumulative_duration property
        /// </summary>
        private sealed class Terminal_cover_open_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Terminal_cover_open_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Terminal_cover_open_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Terminal_cover_open_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Terminal_cover_open_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tilt_event_counter property
        /// </summary>
        private sealed class Tilt_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Tilt_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Tilt_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Tilt_event_counter;
                }
                set
                {
                    this.ModelElement.Tilt_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tilt_event_time property
        /// </summary>
        private sealed class Tilt_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Tilt_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Tilt_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Tilt_event_time;
                }
                set
                {
                    this.ModelElement.Tilt_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tilt_event_duration property
        /// </summary>
        private sealed class Tilt_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Tilt_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Tilt_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Tilt_event_duration;
                }
                set
                {
                    this.ModelElement.Tilt_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tilt_event_cumulative_duration property
        /// </summary>
        private sealed class Tilt_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Tilt_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Tilt_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Tilt_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Tilt_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Strong_DC_magnetic_field_event_counter property
        /// </summary>
        private sealed class Strong_DC_magnetic_field_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Strong_DC_magnetic_field_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Strong_DC_magnetic_field_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Strong_DC_magnetic_field_event_counter;
                }
                set
                {
                    this.ModelElement.Strong_DC_magnetic_field_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Strong_DC_magnetic_field_event_time property
        /// </summary>
        private sealed class Strong_DC_magnetic_field_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Strong_DC_magnetic_field_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Strong_DC_magnetic_field_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Strong_DC_magnetic_field_event_time;
                }
                set
                {
                    this.ModelElement.Strong_DC_magnetic_field_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Strong_DC_magnetic_field_event_duration property
        /// </summary>
        private sealed class Strong_DC_magnetic_field_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Strong_DC_magnetic_field_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Strong_DC_magnetic_field_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Strong_DC_magnetic_field_event_duration;
                }
                set
                {
                    this.ModelElement.Strong_DC_magnetic_field_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Strong_DC_magnetic_field_event_cumulative_duration property
        /// </summary>
        private sealed class Strong_DC_magnetic_field_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Strong_DC_magnetic_field_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Strong_DC_magnetic_field_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Strong_DC_magnetic_field_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Strong_DC_magnetic_field_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Supply_control_switch_event_counter property
        /// </summary>
        private sealed class Supply_control_switch_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Supply_control_switch_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Supply_control_switch_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Supply_control_switch_event_counter;
                }
                set
                {
                    this.ModelElement.Supply_control_switch_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Supply_control_switch_event_time property
        /// </summary>
        private sealed class Supply_control_switch_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Supply_control_switch_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Supply_control_switch_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Supply_control_switch_event_time;
                }
                set
                {
                    this.ModelElement.Supply_control_switch_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Supply_control_switch_event_duration property
        /// </summary>
        private sealed class Supply_control_switch_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Supply_control_switch_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Supply_control_switch_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Supply_control_switch_event_duration;
                }
                set
                {
                    this.ModelElement.Supply_control_switch_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Supply_control_switch_event_cumulative_duration property
        /// </summary>
        private sealed class Supply_control_switch_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Supply_control_switch_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Supply_control_switch_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Supply_control_switch_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Supply_control_switch_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Metrology_tamper_event_counter property
        /// </summary>
        private sealed class Metrology_tamper_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Metrology_tamper_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Metrology_tamper_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Metrology_tamper_event_counter;
                }
                set
                {
                    this.ModelElement.Metrology_tamper_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Metrology_tamper_event_time property
        /// </summary>
        private sealed class Metrology_tamper_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Metrology_tamper_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Metrology_tamper_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Metrology_tamper_event_time;
                }
                set
                {
                    this.ModelElement.Metrology_tamper_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Metrology_tamper_event_duration property
        /// </summary>
        private sealed class Metrology_tamper_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Metrology_tamper_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Metrology_tamper_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Metrology_tamper_event_duration;
                }
                set
                {
                    this.ModelElement.Metrology_tamper_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Metrology_tamper_event_cumulative_duration property
        /// </summary>
        private sealed class Metrology_tamper_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Metrology_tamper_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Metrology_tamper_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Metrology_tamper_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Metrology_tamper_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Communication_tamper_event_counter property
        /// </summary>
        private sealed class Communication_tamper_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Communication_tamper_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Communication_tamper_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Communication_tamper_event_counter;
                }
                set
                {
                    this.ModelElement.Communication_tamper_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Communication_tamper_event_time property
        /// </summary>
        private sealed class Communication_tamper_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Communication_tamper_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Communication_tamper_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Communication_tamper_event_time;
                }
                set
                {
                    this.ModelElement.Communication_tamper_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Communication_tamper_event_duration property
        /// </summary>
        private sealed class Communication_tamper_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Communication_tamper_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Communication_tamper_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Communication_tamper_event_duration;
                }
                set
                {
                    this.ModelElement.Communication_tamper_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Communication_tamper_event_cumulative_duration property
        /// </summary>
        private sealed class Communication_tamper_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Communication_tamper_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Communication_tamper_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Communication_tamper_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Communication_tamper_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Manufacturer_specific property
        /// </summary>
        private sealed class Manufacturer_specificProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Manufacturer_specificProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Manufacturer_specific")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Manufacturer_specific;
                }
                set
                {
                    this.ModelElement.Manufacturer_specific = value;
                }
            }
        }
    }
}

