//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The public interface for ScriptTable
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ScriptTable))]
    [XmlDefaultImplementationTypeAttribute(typeof(ScriptTable))]
    public interface IScriptTable : IModelElement, IScripttable
    {
        
        /// <summary>
        /// The globalMeterReset property
        /// </summary>
        IGlobalMeterReset GlobalMeterReset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MDIReset property
        /// </summary>
        IMDIReset MDIReset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Tariffication property
        /// </summary>
        ITariffication Tariffication
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AcitvateTest property
        /// </summary>
        IActivateTestMode AcitvateTest
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivateNormal property
        /// </summary>
        IActivateNormalMode ActivateNormal
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SetOutput property
        /// </summary>
        ISetOutputSignal SetOutput
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SwitchOptical property
        /// </summary>
        ISwitchOpticalTestOutput SwitchOptical
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PowerQuality property
        /// </summary>
        IPowerQualityMeasurementManagement PowerQuality
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Disconnect property
        /// </summary>
        IDisconnectControl Disconnect
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Image property
        /// </summary>
        IImageActivation Image
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Push property
        /// </summary>
        IPush Push
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Broadcast property
        /// </summary>
        IBroadcast Broadcast
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the GlobalMeterReset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GlobalMeterResetChanging;
        
        /// <summary>
        /// Gets fired when the GlobalMeterReset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GlobalMeterResetChanged;
        
        /// <summary>
        /// Gets fired before the MDIReset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MDIResetChanging;
        
        /// <summary>
        /// Gets fired when the MDIReset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MDIResetChanged;
        
        /// <summary>
        /// Gets fired before the Tariffication property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TarifficationChanging;
        
        /// <summary>
        /// Gets fired when the Tariffication property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TarifficationChanged;
        
        /// <summary>
        /// Gets fired before the AcitvateTest property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AcitvateTestChanging;
        
        /// <summary>
        /// Gets fired when the AcitvateTest property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AcitvateTestChanged;
        
        /// <summary>
        /// Gets fired before the ActivateNormal property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActivateNormalChanging;
        
        /// <summary>
        /// Gets fired when the ActivateNormal property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActivateNormalChanged;
        
        /// <summary>
        /// Gets fired before the SetOutput property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SetOutputChanging;
        
        /// <summary>
        /// Gets fired when the SetOutput property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SetOutputChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOptical property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchOpticalChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOptical property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchOpticalChanged;
        
        /// <summary>
        /// Gets fired before the PowerQuality property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerQualityChanging;
        
        /// <summary>
        /// Gets fired when the PowerQuality property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerQualityChanged;
        
        /// <summary>
        /// Gets fired before the Disconnect property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DisconnectChanging;
        
        /// <summary>
        /// Gets fired when the Disconnect property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DisconnectChanged;
        
        /// <summary>
        /// Gets fired before the Image property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImageChanging;
        
        /// <summary>
        /// Gets fired when the Image property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImageChanged;
        
        /// <summary>
        /// Gets fired before the Push property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PushChanging;
        
        /// <summary>
        /// Gets fired when the Push property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PushChanged;
        
        /// <summary>
        /// Gets fired before the Broadcast property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BroadcastChanging;
        
        /// <summary>
        /// Gets fired when the Broadcast property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BroadcastChanged;
    }
}

