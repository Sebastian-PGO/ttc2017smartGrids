using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the ElectricityProgramEntries class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
        "ectricityProgramEntries")]
    public partial class ElectricityProgramEntries : Data, IElectricityProgramEntries, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Activefirmwareidentifier property
        /// </summary>
        private string _activefirmwareidentifier;
        
        private static Lazy<ITypedElement> _activefirmwareidentifierAttribute = new Lazy<ITypedElement>(RetrieveActivefirmwareidentifierAttribute);
        
        /// <summary>
        /// The backing field for the Parameterrecordnumber property
        /// </summary>
        private Nullable<int> _parameterrecordnumber;
        
        private static Lazy<ITypedElement> _parameterrecordnumberAttribute = new Lazy<ITypedElement>(RetrieveParameterrecordnumberAttribute);
        
        /// <summary>
        /// The backing field for the Timeswitchprogramnumber property
        /// </summary>
        private Nullable<int> _timeswitchprogramnumber;
        
        private static Lazy<ITypedElement> _timeswitchprogramnumberAttribute = new Lazy<ITypedElement>(RetrieveTimeswitchprogramnumberAttribute);
        
        /// <summary>
        /// The backing field for the RCRprogramnumber property
        /// </summary>
        private Nullable<int> _rCRprogramnumber;
        
        private static Lazy<ITypedElement> _rCRprogramnumberAttribute = new Lazy<ITypedElement>(RetrieveRCRprogramnumberAttribute);
        
        /// <summary>
        /// The backing field for the MeterconnectiondiagramID property
        /// </summary>
        private string _meterconnectiondiagramID;
        
        private static Lazy<ITypedElement> _meterconnectiondiagramIDAttribute = new Lazy<ITypedElement>(RetrieveMeterconnectiondiagramIDAttribute);
        
        /// <summary>
        /// The backing field for the Passivecalendarname property
        /// </summary>
        private string _passivecalendarname;
        
        private static Lazy<ITypedElement> _passivecalendarnameAttribute = new Lazy<ITypedElement>(RetrievePassivecalendarnameAttribute);
        
        /// <summary>
        /// The backing field for the Activefirmwaresignature property
        /// </summary>
        private string _activefirmwaresignature;
        
        private static Lazy<ITypedElement> _activefirmwaresignatureAttribute = new Lazy<ITypedElement>(RetrieveActivefirmwaresignatureAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Activefirmwareidentifier property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Activefirmwareidentifier
        {
            get
            {
                return this._activefirmwareidentifier;
            }
            set
            {
                if ((this._activefirmwareidentifier != value))
                {
                    string old = this._activefirmwareidentifier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivefirmwareidentifierChanging(e);
                    this.OnPropertyChanging("Activefirmwareidentifier", e, _activefirmwareidentifierAttribute);
                    this._activefirmwareidentifier = value;
                    this.OnActivefirmwareidentifierChanged(e);
                    this.OnPropertyChanged("Activefirmwareidentifier", e, _activefirmwareidentifierAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Parameterrecordnumber property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Parameterrecordnumber
        {
            get
            {
                return this._parameterrecordnumber;
            }
            set
            {
                if ((this._parameterrecordnumber != value))
                {
                    Nullable<int> old = this._parameterrecordnumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnParameterrecordnumberChanging(e);
                    this.OnPropertyChanging("Parameterrecordnumber", e, _parameterrecordnumberAttribute);
                    this._parameterrecordnumber = value;
                    this.OnParameterrecordnumberChanged(e);
                    this.OnPropertyChanged("Parameterrecordnumber", e, _parameterrecordnumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Timeswitchprogramnumber property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Timeswitchprogramnumber
        {
            get
            {
                return this._timeswitchprogramnumber;
            }
            set
            {
                if ((this._timeswitchprogramnumber != value))
                {
                    Nullable<int> old = this._timeswitchprogramnumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeswitchprogramnumberChanging(e);
                    this.OnPropertyChanging("Timeswitchprogramnumber", e, _timeswitchprogramnumberAttribute);
                    this._timeswitchprogramnumber = value;
                    this.OnTimeswitchprogramnumberChanged(e);
                    this.OnPropertyChanged("Timeswitchprogramnumber", e, _timeswitchprogramnumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The RCRprogramnumber property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> RCRprogramnumber
        {
            get
            {
                return this._rCRprogramnumber;
            }
            set
            {
                if ((this._rCRprogramnumber != value))
                {
                    Nullable<int> old = this._rCRprogramnumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRCRprogramnumberChanging(e);
                    this.OnPropertyChanging("RCRprogramnumber", e, _rCRprogramnumberAttribute);
                    this._rCRprogramnumber = value;
                    this.OnRCRprogramnumberChanged(e);
                    this.OnPropertyChanged("RCRprogramnumber", e, _rCRprogramnumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MeterconnectiondiagramID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string MeterconnectiondiagramID
        {
            get
            {
                return this._meterconnectiondiagramID;
            }
            set
            {
                if ((this._meterconnectiondiagramID != value))
                {
                    string old = this._meterconnectiondiagramID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeterconnectiondiagramIDChanging(e);
                    this.OnPropertyChanging("MeterconnectiondiagramID", e, _meterconnectiondiagramIDAttribute);
                    this._meterconnectiondiagramID = value;
                    this.OnMeterconnectiondiagramIDChanged(e);
                    this.OnPropertyChanged("MeterconnectiondiagramID", e, _meterconnectiondiagramIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Passivecalendarname property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Passivecalendarname
        {
            get
            {
                return this._passivecalendarname;
            }
            set
            {
                if ((this._passivecalendarname != value))
                {
                    string old = this._passivecalendarname;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPassivecalendarnameChanging(e);
                    this.OnPropertyChanging("Passivecalendarname", e, _passivecalendarnameAttribute);
                    this._passivecalendarname = value;
                    this.OnPassivecalendarnameChanged(e);
                    this.OnPropertyChanged("Passivecalendarname", e, _passivecalendarnameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Activefirmwaresignature property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Activefirmwaresignature
        {
            get
            {
                return this._activefirmwaresignature;
            }
            set
            {
                if ((this._activefirmwaresignature != value))
                {
                    string old = this._activefirmwaresignature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivefirmwaresignatureChanging(e);
                    this.OnPropertyChanging("Activefirmwaresignature", e, _activefirmwaresignatureAttribute);
                    this._activefirmwaresignature = value;
                    this.OnActivefirmwaresignatureChanged(e);
                    this.OnPropertyChanged("Activefirmwaresignature", e, _activefirmwaresignatureAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
                            "ectricityProgramEntries")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Activefirmwareidentifier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivefirmwareidentifierChanging;
        
        /// <summary>
        /// Gets fired when the Activefirmwareidentifier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivefirmwareidentifierChanged;
        
        /// <summary>
        /// Gets fired before the Parameterrecordnumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParameterrecordnumberChanging;
        
        /// <summary>
        /// Gets fired when the Parameterrecordnumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParameterrecordnumberChanged;
        
        /// <summary>
        /// Gets fired before the Timeswitchprogramnumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeswitchprogramnumberChanging;
        
        /// <summary>
        /// Gets fired when the Timeswitchprogramnumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeswitchprogramnumberChanged;
        
        /// <summary>
        /// Gets fired before the RCRprogramnumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RCRprogramnumberChanging;
        
        /// <summary>
        /// Gets fired when the RCRprogramnumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RCRprogramnumberChanged;
        
        /// <summary>
        /// Gets fired before the MeterconnectiondiagramID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterconnectiondiagramIDChanging;
        
        /// <summary>
        /// Gets fired when the MeterconnectiondiagramID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterconnectiondiagramIDChanged;
        
        /// <summary>
        /// Gets fired before the Passivecalendarname property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PassivecalendarnameChanging;
        
        /// <summary>
        /// Gets fired when the Passivecalendarname property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PassivecalendarnameChanged;
        
        /// <summary>
        /// Gets fired before the Activefirmwaresignature property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivefirmwaresignatureChanging;
        
        /// <summary>
        /// Gets fired when the Activefirmwaresignature property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivefirmwaresignatureChanged;
        
        private static ITypedElement RetrieveActivefirmwareidentifierAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityProgramEntries.ClassInstance)).Resolve("Activefirmwareidentifier")));
        }
        
        /// <summary>
        /// Raises the ActivefirmwareidentifierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivefirmwareidentifierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivefirmwareidentifierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivefirmwareidentifierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivefirmwareidentifierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivefirmwareidentifierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveParameterrecordnumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityProgramEntries.ClassInstance)).Resolve("Parameterrecordnumber")));
        }
        
        /// <summary>
        /// Raises the ParameterrecordnumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParameterrecordnumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParameterrecordnumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParameterrecordnumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParameterrecordnumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParameterrecordnumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeswitchprogramnumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityProgramEntries.ClassInstance)).Resolve("Timeswitchprogramnumber")));
        }
        
        /// <summary>
        /// Raises the TimeswitchprogramnumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeswitchprogramnumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeswitchprogramnumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeswitchprogramnumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeswitchprogramnumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeswitchprogramnumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRCRprogramnumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityProgramEntries.ClassInstance)).Resolve("RCRprogramnumber")));
        }
        
        /// <summary>
        /// Raises the RCRprogramnumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRCRprogramnumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RCRprogramnumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RCRprogramnumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRCRprogramnumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RCRprogramnumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeterconnectiondiagramIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityProgramEntries.ClassInstance)).Resolve("MeterconnectiondiagramID")));
        }
        
        /// <summary>
        /// Raises the MeterconnectiondiagramIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterconnectiondiagramIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterconnectiondiagramIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeterconnectiondiagramIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterconnectiondiagramIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterconnectiondiagramIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePassivecalendarnameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityProgramEntries.ClassInstance)).Resolve("Passivecalendarname")));
        }
        
        /// <summary>
        /// Raises the PassivecalendarnameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassivecalendarnameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PassivecalendarnameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PassivecalendarnameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassivecalendarnameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PassivecalendarnameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivefirmwaresignatureAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityProgramEntries.ClassInstance)).Resolve("Activefirmwaresignature")));
        }
        
        /// <summary>
        /// Raises the ActivefirmwaresignatureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivefirmwaresignatureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivefirmwaresignatureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivefirmwaresignatureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivefirmwaresignatureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivefirmwaresignatureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVEFIRMWAREIDENTIFIER"))
            {
                return this.Activefirmwareidentifier;
            }
            if ((attribute == "PARAMETERRECORDNUMBER"))
            {
                return this.Parameterrecordnumber;
            }
            if ((attribute == "TIMESWITCHPROGRAMNUMBER"))
            {
                return this.Timeswitchprogramnumber;
            }
            if ((attribute == "RCRPROGRAMNUMBER"))
            {
                return this.RCRprogramnumber;
            }
            if ((attribute == "METERCONNECTIONDIAGRAMID"))
            {
                return this.MeterconnectiondiagramID;
            }
            if ((attribute == "PASSIVECALENDARNAME"))
            {
                return this.Passivecalendarname;
            }
            if ((attribute == "ACTIVEFIRMWARESIGNATURE"))
            {
                return this.Activefirmwaresignature;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVEFIRMWAREIDENTIFIER"))
            {
                this.Activefirmwareidentifier = ((string)(value));
                return;
            }
            if ((feature == "PARAMETERRECORDNUMBER"))
            {
                this.Parameterrecordnumber = ((int)(value));
                return;
            }
            if ((feature == "TIMESWITCHPROGRAMNUMBER"))
            {
                this.Timeswitchprogramnumber = ((int)(value));
                return;
            }
            if ((feature == "RCRPROGRAMNUMBER"))
            {
                this.RCRprogramnumber = ((int)(value));
                return;
            }
            if ((feature == "METERCONNECTIONDIAGRAMID"))
            {
                this.MeterconnectiondiagramID = ((string)(value));
                return;
            }
            if ((feature == "PASSIVECALENDARNAME"))
            {
                this.Passivecalendarname = ((string)(value));
                return;
            }
            if ((feature == "ACTIVEFIRMWARESIGNATURE"))
            {
                this.Activefirmwaresignature = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
                        "ectricityProgramEntries")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Activefirmwareidentifier property
        /// </summary>
        private sealed class ActivefirmwareidentifierProxy : ModelPropertyChange<IElectricityProgramEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivefirmwareidentifierProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "Activefirmwareidentifier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Activefirmwareidentifier;
                }
                set
                {
                    this.ModelElement.Activefirmwareidentifier = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Parameterrecordnumber property
        /// </summary>
        private sealed class ParameterrecordnumberProxy : ModelPropertyChange<IElectricityProgramEntries, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParameterrecordnumberProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "Parameterrecordnumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Parameterrecordnumber;
                }
                set
                {
                    this.ModelElement.Parameterrecordnumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Timeswitchprogramnumber property
        /// </summary>
        private sealed class TimeswitchprogramnumberProxy : ModelPropertyChange<IElectricityProgramEntries, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeswitchprogramnumberProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "Timeswitchprogramnumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Timeswitchprogramnumber;
                }
                set
                {
                    this.ModelElement.Timeswitchprogramnumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RCRprogramnumber property
        /// </summary>
        private sealed class RCRprogramnumberProxy : ModelPropertyChange<IElectricityProgramEntries, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RCRprogramnumberProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "RCRprogramnumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.RCRprogramnumber;
                }
                set
                {
                    this.ModelElement.RCRprogramnumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeterconnectiondiagramID property
        /// </summary>
        private sealed class MeterconnectiondiagramIDProxy : ModelPropertyChange<IElectricityProgramEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeterconnectiondiagramIDProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "MeterconnectiondiagramID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MeterconnectiondiagramID;
                }
                set
                {
                    this.ModelElement.MeterconnectiondiagramID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Passivecalendarname property
        /// </summary>
        private sealed class PassivecalendarnameProxy : ModelPropertyChange<IElectricityProgramEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PassivecalendarnameProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "Passivecalendarname")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Passivecalendarname;
                }
                set
                {
                    this.ModelElement.Passivecalendarname = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Activefirmwaresignature property
        /// </summary>
        private sealed class ActivefirmwaresignatureProxy : ModelPropertyChange<IElectricityProgramEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivefirmwaresignatureProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "Activefirmwaresignature")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Activefirmwaresignature;
                }
                set
                {
                    this.ModelElement.Activefirmwaresignature = value;
                }
            }
        }
    }
}

