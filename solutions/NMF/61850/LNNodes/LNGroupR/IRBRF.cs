using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR
{
    
    
    /// <summary>
    /// The public interface for RBRF
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RBRF))]
    [XmlDefaultImplementationTypeAttribute(typeof(RBRF))]
    public interface IRBRF : IModelElement, IGroupR
    {
        
        /// <summary>
        /// The OpCntRs property
        /// </summary>
        IINC OpCntRs
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Str property
        /// </summary>
        IACD Str
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OpEx property
        /// </summary>
        IACT OpEx
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OpIn property
        /// </summary>
        IACT OpIn
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FailMod property
        /// </summary>
        IING FailMod
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FailTmms property
        /// </summary>
        IING FailTmms
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SPlTrTmms property
        /// </summary>
        IING SPlTrTmms
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TPTrTmms property
        /// </summary>
        IING TPTrTmms
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DetValA property
        /// </summary>
        IASG DetValA
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReTrMod property
        /// </summary>
        IING ReTrMod
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the OpCntRs property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpCntRsChanging;
        
        /// <summary>
        /// Gets fired when the OpCntRs property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpCntRsChanged;
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the OpEx property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpExChanging;
        
        /// <summary>
        /// Gets fired when the OpEx property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpExChanged;
        
        /// <summary>
        /// Gets fired before the OpIn property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpInChanging;
        
        /// <summary>
        /// Gets fired when the OpIn property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpInChanged;
        
        /// <summary>
        /// Gets fired before the FailMod property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailModChanging;
        
        /// <summary>
        /// Gets fired when the FailMod property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailModChanged;
        
        /// <summary>
        /// Gets fired before the FailTmms property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailTmmsChanging;
        
        /// <summary>
        /// Gets fired when the FailTmms property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailTmmsChanged;
        
        /// <summary>
        /// Gets fired before the SPlTrTmms property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SPlTrTmmsChanging;
        
        /// <summary>
        /// Gets fired when the SPlTrTmms property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SPlTrTmmsChanged;
        
        /// <summary>
        /// Gets fired before the TPTrTmms property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TPTrTmmsChanging;
        
        /// <summary>
        /// Gets fired when the TPTrTmms property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TPTrTmmsChanged;
        
        /// <summary>
        /// Gets fired before the DetValA property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DetValAChanging;
        
        /// <summary>
        /// Gets fired when the DetValA property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DetValAChanged;
        
        /// <summary>
        /// Gets fired before the ReTrMod property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReTrModChanging;
        
        /// <summary>
        /// Gets fired when the ReTrMod property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReTrModChanged;
    }
}

