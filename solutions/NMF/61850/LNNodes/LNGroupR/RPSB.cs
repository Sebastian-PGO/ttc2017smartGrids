using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR
{
    
    
    /// <summary>
    /// The default implementation of the RPSB class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pR")]
    [XmlNamespacePrefixAttribute("groupr")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupR/RPSB")]
    public partial class RPSB : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR.GroupR, IRPSB, IModelElement
    {
        
        private static Lazy<ITypedElement> _opCntRsReference = new Lazy<ITypedElement>(RetrieveOpCntRsReference);
        
        /// <summary>
        /// The backing field for the OpCntRs property
        /// </summary>
        private IINC _opCntRs;
        
        private static Lazy<ITypedElement> _strReference = new Lazy<ITypedElement>(RetrieveStrReference);
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        private static Lazy<ITypedElement> _opReference = new Lazy<ITypedElement>(RetrieveOpReference);
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        private static Lazy<ITypedElement> _blkZnReference = new Lazy<ITypedElement>(RetrieveBlkZnReference);
        
        /// <summary>
        /// The backing field for the BlkZn property
        /// </summary>
        private ISPS _blkZn;
        
        private static Lazy<ITypedElement> _zeroEnaReference = new Lazy<ITypedElement>(RetrieveZeroEnaReference);
        
        /// <summary>
        /// The backing field for the ZeroEna property
        /// </summary>
        private ISPG _zeroEna;
        
        private static Lazy<ITypedElement> _ngEnaReference = new Lazy<ITypedElement>(RetrieveNgEnaReference);
        
        /// <summary>
        /// The backing field for the NgEna property
        /// </summary>
        private ISPG _ngEna;
        
        private static Lazy<ITypedElement> _maxEnaReference = new Lazy<ITypedElement>(RetrieveMaxEnaReference);
        
        /// <summary>
        /// The backing field for the MaxEna property
        /// </summary>
        private ISPG _maxEna;
        
        private static Lazy<ITypedElement> _swgValReference = new Lazy<ITypedElement>(RetrieveSwgValReference);
        
        /// <summary>
        /// The backing field for the SwgVal property
        /// </summary>
        private IASG _swgVal;
        
        private static Lazy<ITypedElement> _swgRisReference = new Lazy<ITypedElement>(RetrieveSwgRisReference);
        
        /// <summary>
        /// The backing field for the SwgRis property
        /// </summary>
        private IASG _swgRis;
        
        private static Lazy<ITypedElement> _swgReactReference = new Lazy<ITypedElement>(RetrieveSwgReactReference);
        
        /// <summary>
        /// The backing field for the SwgReact property
        /// </summary>
        private IASG _swgReact;
        
        private static Lazy<ITypedElement> _swgTmmsReference = new Lazy<ITypedElement>(RetrieveSwgTmmsReference);
        
        /// <summary>
        /// The backing field for the SwgTmms property
        /// </summary>
        private IING _swgTmms;
        
        private static Lazy<ITypedElement> _unBlkTmmsReference = new Lazy<ITypedElement>(RetrieveUnBlkTmmsReference);
        
        /// <summary>
        /// The backing field for the UnBlkTmms property
        /// </summary>
        private IING _unBlkTmms;
        
        private static Lazy<ITypedElement> _maxNumSlpReference = new Lazy<ITypedElement>(RetrieveMaxNumSlpReference);
        
        /// <summary>
        /// The backing field for the MaxNumSlp property
        /// </summary>
        private IING _maxNumSlp;
        
        private static Lazy<ITypedElement> _evTmmsReference = new Lazy<ITypedElement>(RetrieveEvTmmsReference);
        
        /// <summary>
        /// The backing field for the EvTmms property
        /// </summary>
        private IING _evTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The OpCntRs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC OpCntRs
        {
            get
            {
                return this._opCntRs;
            }
            set
            {
                if ((this._opCntRs != value))
                {
                    IINC old = this._opCntRs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpCntRsChanging(e);
                    this.OnPropertyChanging("OpCntRs", e, _opCntRsReference);
                    this._opCntRs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpCntRs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpCntRs;
                    }
                    this.OnOpCntRsChanged(e);
                    this.OnPropertyChanged("OpCntRs", e, _opCntRsReference);
                }
            }
        }
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e, _strReference);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e, _strReference);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e, _opReference);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e, _opReference);
                }
            }
        }
        
        /// <summary>
        /// The BlkZn property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS BlkZn
        {
            get
            {
                return this._blkZn;
            }
            set
            {
                if ((this._blkZn != value))
                {
                    ISPS old = this._blkZn;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkZnChanging(e);
                    this.OnPropertyChanging("BlkZn", e, _blkZnReference);
                    this._blkZn = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkZn;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkZn;
                    }
                    this.OnBlkZnChanged(e);
                    this.OnPropertyChanged("BlkZn", e, _blkZnReference);
                }
            }
        }
        
        /// <summary>
        /// The ZeroEna property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPG ZeroEna
        {
            get
            {
                return this._zeroEna;
            }
            set
            {
                if ((this._zeroEna != value))
                {
                    ISPG old = this._zeroEna;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZeroEnaChanging(e);
                    this.OnPropertyChanging("ZeroEna", e, _zeroEnaReference);
                    this._zeroEna = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetZeroEna;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetZeroEna;
                    }
                    this.OnZeroEnaChanged(e);
                    this.OnPropertyChanged("ZeroEna", e, _zeroEnaReference);
                }
            }
        }
        
        /// <summary>
        /// The NgEna property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPG NgEna
        {
            get
            {
                return this._ngEna;
            }
            set
            {
                if ((this._ngEna != value))
                {
                    ISPG old = this._ngEna;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNgEnaChanging(e);
                    this.OnPropertyChanging("NgEna", e, _ngEnaReference);
                    this._ngEna = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNgEna;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNgEna;
                    }
                    this.OnNgEnaChanged(e);
                    this.OnPropertyChanged("NgEna", e, _ngEnaReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxEna property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPG MaxEna
        {
            get
            {
                return this._maxEna;
            }
            set
            {
                if ((this._maxEna != value))
                {
                    ISPG old = this._maxEna;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxEnaChanging(e);
                    this.OnPropertyChanging("MaxEna", e, _maxEnaReference);
                    this._maxEna = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxEna;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxEna;
                    }
                    this.OnMaxEnaChanged(e);
                    this.OnPropertyChanged("MaxEna", e, _maxEnaReference);
                }
            }
        }
        
        /// <summary>
        /// The SwgVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG SwgVal
        {
            get
            {
                return this._swgVal;
            }
            set
            {
                if ((this._swgVal != value))
                {
                    IASG old = this._swgVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwgValChanging(e);
                    this.OnPropertyChanging("SwgVal", e, _swgValReference);
                    this._swgVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSwgVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSwgVal;
                    }
                    this.OnSwgValChanged(e);
                    this.OnPropertyChanged("SwgVal", e, _swgValReference);
                }
            }
        }
        
        /// <summary>
        /// The SwgRis property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG SwgRis
        {
            get
            {
                return this._swgRis;
            }
            set
            {
                if ((this._swgRis != value))
                {
                    IASG old = this._swgRis;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwgRisChanging(e);
                    this.OnPropertyChanging("SwgRis", e, _swgRisReference);
                    this._swgRis = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSwgRis;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSwgRis;
                    }
                    this.OnSwgRisChanged(e);
                    this.OnPropertyChanged("SwgRis", e, _swgRisReference);
                }
            }
        }
        
        /// <summary>
        /// The SwgReact property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG SwgReact
        {
            get
            {
                return this._swgReact;
            }
            set
            {
                if ((this._swgReact != value))
                {
                    IASG old = this._swgReact;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwgReactChanging(e);
                    this.OnPropertyChanging("SwgReact", e, _swgReactReference);
                    this._swgReact = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSwgReact;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSwgReact;
                    }
                    this.OnSwgReactChanged(e);
                    this.OnPropertyChanged("SwgReact", e, _swgReactReference);
                }
            }
        }
        
        /// <summary>
        /// The SwgTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING SwgTmms
        {
            get
            {
                return this._swgTmms;
            }
            set
            {
                if ((this._swgTmms != value))
                {
                    IING old = this._swgTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwgTmmsChanging(e);
                    this.OnPropertyChanging("SwgTmms", e, _swgTmmsReference);
                    this._swgTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSwgTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSwgTmms;
                    }
                    this.OnSwgTmmsChanged(e);
                    this.OnPropertyChanged("SwgTmms", e, _swgTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The UnBlkTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING UnBlkTmms
        {
            get
            {
                return this._unBlkTmms;
            }
            set
            {
                if ((this._unBlkTmms != value))
                {
                    IING old = this._unBlkTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnBlkTmmsChanging(e);
                    this.OnPropertyChanging("UnBlkTmms", e, _unBlkTmmsReference);
                    this._unBlkTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUnBlkTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUnBlkTmms;
                    }
                    this.OnUnBlkTmmsChanged(e);
                    this.OnPropertyChanged("UnBlkTmms", e, _unBlkTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxNumSlp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MaxNumSlp
        {
            get
            {
                return this._maxNumSlp;
            }
            set
            {
                if ((this._maxNumSlp != value))
                {
                    IING old = this._maxNumSlp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxNumSlpChanging(e);
                    this.OnPropertyChanging("MaxNumSlp", e, _maxNumSlpReference);
                    this._maxNumSlp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxNumSlp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxNumSlp;
                    }
                    this.OnMaxNumSlpChanged(e);
                    this.OnPropertyChanged("MaxNumSlp", e, _maxNumSlpReference);
                }
            }
        }
        
        /// <summary>
        /// The EvTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING EvTmms
        {
            get
            {
                return this._evTmms;
            }
            set
            {
                if ((this._evTmms != value))
                {
                    IING old = this._evTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEvTmmsChanging(e);
                    this.OnPropertyChanging("EvTmms", e, _evTmmsReference);
                    this._evTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEvTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEvTmms;
                    }
                    this.OnEvTmmsChanged(e);
                    this.OnPropertyChanged("EvTmms", e, _evTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RPSBReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupR/RPSB")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OpCntRs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanging;
        
        /// <summary>
        /// Gets fired when the OpCntRs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanged;
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the BlkZn property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkZnChanging;
        
        /// <summary>
        /// Gets fired when the BlkZn property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkZnChanged;
        
        /// <summary>
        /// Gets fired before the ZeroEna property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZeroEnaChanging;
        
        /// <summary>
        /// Gets fired when the ZeroEna property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZeroEnaChanged;
        
        /// <summary>
        /// Gets fired before the NgEna property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NgEnaChanging;
        
        /// <summary>
        /// Gets fired when the NgEna property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NgEnaChanged;
        
        /// <summary>
        /// Gets fired before the MaxEna property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxEnaChanging;
        
        /// <summary>
        /// Gets fired when the MaxEna property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxEnaChanged;
        
        /// <summary>
        /// Gets fired before the SwgVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwgValChanging;
        
        /// <summary>
        /// Gets fired when the SwgVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwgValChanged;
        
        /// <summary>
        /// Gets fired before the SwgRis property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwgRisChanging;
        
        /// <summary>
        /// Gets fired when the SwgRis property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwgRisChanged;
        
        /// <summary>
        /// Gets fired before the SwgReact property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwgReactChanging;
        
        /// <summary>
        /// Gets fired when the SwgReact property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwgReactChanged;
        
        /// <summary>
        /// Gets fired before the SwgTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwgTmmsChanging;
        
        /// <summary>
        /// Gets fired when the SwgTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwgTmmsChanged;
        
        /// <summary>
        /// Gets fired before the UnBlkTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnBlkTmmsChanging;
        
        /// <summary>
        /// Gets fired when the UnBlkTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnBlkTmmsChanged;
        
        /// <summary>
        /// Gets fired before the MaxNumSlp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxNumSlpChanging;
        
        /// <summary>
        /// Gets fired when the MaxNumSlp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxNumSlpChanged;
        
        /// <summary>
        /// Gets fired before the EvTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EvTmmsChanging;
        
        /// <summary>
        /// Gets fired when the EvTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EvTmmsChanged;
        
        private static ITypedElement RetrieveOpCntRsReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("OpCntRs")));
        }
        
        /// <summary>
        /// Raises the OpCntRsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpCntRsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpCntRs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpCntRs(object sender, System.EventArgs eventArgs)
        {
            this.OpCntRs = null;
        }
        
        private static ITypedElement RetrieveStrReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("Str")));
        }
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        private static ITypedElement RetrieveOpReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("Op")));
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        private static ITypedElement RetrieveBlkZnReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("BlkZn")));
        }
        
        /// <summary>
        /// Raises the BlkZnChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkZnChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkZnChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkZnChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkZnChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkZnChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkZn property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkZn(object sender, System.EventArgs eventArgs)
        {
            this.BlkZn = null;
        }
        
        private static ITypedElement RetrieveZeroEnaReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("ZeroEna")));
        }
        
        /// <summary>
        /// Raises the ZeroEnaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZeroEnaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZeroEnaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ZeroEnaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZeroEnaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZeroEnaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ZeroEna property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetZeroEna(object sender, System.EventArgs eventArgs)
        {
            this.ZeroEna = null;
        }
        
        private static ITypedElement RetrieveNgEnaReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("NgEna")));
        }
        
        /// <summary>
        /// Raises the NgEnaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNgEnaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NgEnaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NgEnaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNgEnaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NgEnaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NgEna property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNgEna(object sender, System.EventArgs eventArgs)
        {
            this.NgEna = null;
        }
        
        private static ITypedElement RetrieveMaxEnaReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("MaxEna")));
        }
        
        /// <summary>
        /// Raises the MaxEnaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxEnaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxEnaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxEnaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxEnaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxEnaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxEna property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxEna(object sender, System.EventArgs eventArgs)
        {
            this.MaxEna = null;
        }
        
        private static ITypedElement RetrieveSwgValReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("SwgVal")));
        }
        
        /// <summary>
        /// Raises the SwgValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwgValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwgValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwgValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwgValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwgValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SwgVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSwgVal(object sender, System.EventArgs eventArgs)
        {
            this.SwgVal = null;
        }
        
        private static ITypedElement RetrieveSwgRisReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("SwgRis")));
        }
        
        /// <summary>
        /// Raises the SwgRisChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwgRisChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwgRisChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwgRisChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwgRisChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwgRisChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SwgRis property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSwgRis(object sender, System.EventArgs eventArgs)
        {
            this.SwgRis = null;
        }
        
        private static ITypedElement RetrieveSwgReactReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("SwgReact")));
        }
        
        /// <summary>
        /// Raises the SwgReactChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwgReactChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwgReactChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwgReactChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwgReactChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwgReactChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SwgReact property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSwgReact(object sender, System.EventArgs eventArgs)
        {
            this.SwgReact = null;
        }
        
        private static ITypedElement RetrieveSwgTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("SwgTmms")));
        }
        
        /// <summary>
        /// Raises the SwgTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwgTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwgTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwgTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwgTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwgTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SwgTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSwgTmms(object sender, System.EventArgs eventArgs)
        {
            this.SwgTmms = null;
        }
        
        private static ITypedElement RetrieveUnBlkTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("UnBlkTmms")));
        }
        
        /// <summary>
        /// Raises the UnBlkTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnBlkTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnBlkTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnBlkTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnBlkTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnBlkTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the UnBlkTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnBlkTmms(object sender, System.EventArgs eventArgs)
        {
            this.UnBlkTmms = null;
        }
        
        private static ITypedElement RetrieveMaxNumSlpReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("MaxNumSlp")));
        }
        
        /// <summary>
        /// Raises the MaxNumSlpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxNumSlpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxNumSlpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxNumSlpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxNumSlpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxNumSlpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxNumSlp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxNumSlp(object sender, System.EventArgs eventArgs)
        {
            this.MaxNumSlp = null;
        }
        
        private static ITypedElement RetrieveEvTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RPSB.ClassInstance)).Resolve("EvTmms")));
        }
        
        /// <summary>
        /// Raises the EvTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EvTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EvTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EvTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EvTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEvTmms(object sender, System.EventArgs eventArgs)
        {
            this.EvTmms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPCNTRS"))
            {
                this.OpCntRs = ((IINC)(value));
                return;
            }
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "BLKZN"))
            {
                this.BlkZn = ((ISPS)(value));
                return;
            }
            if ((feature == "ZEROENA"))
            {
                this.ZeroEna = ((ISPG)(value));
                return;
            }
            if ((feature == "NGENA"))
            {
                this.NgEna = ((ISPG)(value));
                return;
            }
            if ((feature == "MAXENA"))
            {
                this.MaxEna = ((ISPG)(value));
                return;
            }
            if ((feature == "SWGVAL"))
            {
                this.SwgVal = ((IASG)(value));
                return;
            }
            if ((feature == "SWGRIS"))
            {
                this.SwgRis = ((IASG)(value));
                return;
            }
            if ((feature == "SWGREACT"))
            {
                this.SwgReact = ((IASG)(value));
                return;
            }
            if ((feature == "SWGTMMS"))
            {
                this.SwgTmms = ((IING)(value));
                return;
            }
            if ((feature == "UNBLKTMMS"))
            {
                this.UnBlkTmms = ((IING)(value));
                return;
            }
            if ((feature == "MAXNUMSLP"))
            {
                this.MaxNumSlp = ((IING)(value));
                return;
            }
            if ((feature == "EVTMMS"))
            {
                this.EvTmms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "BlkZn"))
            {
                return new BlkZnProxy(this);
            }
            if ((attribute == "ZeroEna"))
            {
                return new ZeroEnaProxy(this);
            }
            if ((attribute == "NgEna"))
            {
                return new NgEnaProxy(this);
            }
            if ((attribute == "MaxEna"))
            {
                return new MaxEnaProxy(this);
            }
            if ((attribute == "SwgVal"))
            {
                return new SwgValProxy(this);
            }
            if ((attribute == "SwgRis"))
            {
                return new SwgRisProxy(this);
            }
            if ((attribute == "SwgReact"))
            {
                return new SwgReactProxy(this);
            }
            if ((attribute == "SwgTmms"))
            {
                return new SwgTmmsProxy(this);
            }
            if ((attribute == "UnBlkTmms"))
            {
                return new UnBlkTmmsProxy(this);
            }
            if ((attribute == "MaxNumSlp"))
            {
                return new MaxNumSlpProxy(this);
            }
            if ((attribute == "EvTmms"))
            {
                return new EvTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "BlkZn"))
            {
                return new BlkZnProxy(this);
            }
            if ((reference == "ZeroEna"))
            {
                return new ZeroEnaProxy(this);
            }
            if ((reference == "NgEna"))
            {
                return new NgEnaProxy(this);
            }
            if ((reference == "MaxEna"))
            {
                return new MaxEnaProxy(this);
            }
            if ((reference == "SwgVal"))
            {
                return new SwgValProxy(this);
            }
            if ((reference == "SwgRis"))
            {
                return new SwgRisProxy(this);
            }
            if ((reference == "SwgReact"))
            {
                return new SwgReactProxy(this);
            }
            if ((reference == "SwgTmms"))
            {
                return new SwgTmmsProxy(this);
            }
            if ((reference == "UnBlkTmms"))
            {
                return new UnBlkTmmsProxy(this);
            }
            if ((reference == "MaxNumSlp"))
            {
                return new MaxNumSlpProxy(this);
            }
            if ((reference == "EvTmms"))
            {
                return new EvTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupR/RPSB")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RPSB class
        /// </summary>
        public class RPSBReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RPSB _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RPSBReferencedElementsCollection(RPSB parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpCntRs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkZn != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ZeroEna != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NgEna != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxEna != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SwgVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SwgRis != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SwgReact != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SwgTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.UnBlkTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxNumSlp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EvTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpCntRsChanged += this.PropagateValueChanges;
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.BlkZnChanged += this.PropagateValueChanges;
                this._parent.ZeroEnaChanged += this.PropagateValueChanges;
                this._parent.NgEnaChanged += this.PropagateValueChanges;
                this._parent.MaxEnaChanged += this.PropagateValueChanges;
                this._parent.SwgValChanged += this.PropagateValueChanges;
                this._parent.SwgRisChanged += this.PropagateValueChanges;
                this._parent.SwgReactChanged += this.PropagateValueChanges;
                this._parent.SwgTmmsChanged += this.PropagateValueChanges;
                this._parent.UnBlkTmmsChanged += this.PropagateValueChanges;
                this._parent.MaxNumSlpChanged += this.PropagateValueChanges;
                this._parent.EvTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpCntRsChanged -= this.PropagateValueChanges;
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.BlkZnChanged -= this.PropagateValueChanges;
                this._parent.ZeroEnaChanged -= this.PropagateValueChanges;
                this._parent.NgEnaChanged -= this.PropagateValueChanges;
                this._parent.MaxEnaChanged -= this.PropagateValueChanges;
                this._parent.SwgValChanged -= this.PropagateValueChanges;
                this._parent.SwgRisChanged -= this.PropagateValueChanges;
                this._parent.SwgReactChanged -= this.PropagateValueChanges;
                this._parent.SwgTmmsChanged -= this.PropagateValueChanges;
                this._parent.UnBlkTmmsChanged -= this.PropagateValueChanges;
                this._parent.MaxNumSlpChanged -= this.PropagateValueChanges;
                this._parent.EvTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpCntRs == null))
                {
                    IINC opCntRsCasted = item.As<IINC>();
                    if ((opCntRsCasted != null))
                    {
                        this._parent.OpCntRs = opCntRsCasted;
                        return;
                    }
                }
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.BlkZn == null))
                {
                    ISPS blkZnCasted = item.As<ISPS>();
                    if ((blkZnCasted != null))
                    {
                        this._parent.BlkZn = blkZnCasted;
                        return;
                    }
                }
                if ((this._parent.ZeroEna == null))
                {
                    ISPG zeroEnaCasted = item.As<ISPG>();
                    if ((zeroEnaCasted != null))
                    {
                        this._parent.ZeroEna = zeroEnaCasted;
                        return;
                    }
                }
                if ((this._parent.NgEna == null))
                {
                    ISPG ngEnaCasted = item.As<ISPG>();
                    if ((ngEnaCasted != null))
                    {
                        this._parent.NgEna = ngEnaCasted;
                        return;
                    }
                }
                if ((this._parent.MaxEna == null))
                {
                    ISPG maxEnaCasted = item.As<ISPG>();
                    if ((maxEnaCasted != null))
                    {
                        this._parent.MaxEna = maxEnaCasted;
                        return;
                    }
                }
                if ((this._parent.SwgVal == null))
                {
                    IASG swgValCasted = item.As<IASG>();
                    if ((swgValCasted != null))
                    {
                        this._parent.SwgVal = swgValCasted;
                        return;
                    }
                }
                if ((this._parent.SwgRis == null))
                {
                    IASG swgRisCasted = item.As<IASG>();
                    if ((swgRisCasted != null))
                    {
                        this._parent.SwgRis = swgRisCasted;
                        return;
                    }
                }
                if ((this._parent.SwgReact == null))
                {
                    IASG swgReactCasted = item.As<IASG>();
                    if ((swgReactCasted != null))
                    {
                        this._parent.SwgReact = swgReactCasted;
                        return;
                    }
                }
                if ((this._parent.SwgTmms == null))
                {
                    IING swgTmmsCasted = item.As<IING>();
                    if ((swgTmmsCasted != null))
                    {
                        this._parent.SwgTmms = swgTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.UnBlkTmms == null))
                {
                    IING unBlkTmmsCasted = item.As<IING>();
                    if ((unBlkTmmsCasted != null))
                    {
                        this._parent.UnBlkTmms = unBlkTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.MaxNumSlp == null))
                {
                    IING maxNumSlpCasted = item.As<IING>();
                    if ((maxNumSlpCasted != null))
                    {
                        this._parent.MaxNumSlp = maxNumSlpCasted;
                        return;
                    }
                }
                if ((this._parent.EvTmms == null))
                {
                    IING evTmmsCasted = item.As<IING>();
                    if ((evTmmsCasted != null))
                    {
                        this._parent.EvTmms = evTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpCntRs = null;
                this._parent.Str = null;
                this._parent.Op = null;
                this._parent.BlkZn = null;
                this._parent.ZeroEna = null;
                this._parent.NgEna = null;
                this._parent.MaxEna = null;
                this._parent.SwgVal = null;
                this._parent.SwgRis = null;
                this._parent.SwgReact = null;
                this._parent.SwgTmms = null;
                this._parent.UnBlkTmms = null;
                this._parent.MaxNumSlp = null;
                this._parent.EvTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpCntRs))
                {
                    return true;
                }
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.BlkZn))
                {
                    return true;
                }
                if ((item == this._parent.ZeroEna))
                {
                    return true;
                }
                if ((item == this._parent.NgEna))
                {
                    return true;
                }
                if ((item == this._parent.MaxEna))
                {
                    return true;
                }
                if ((item == this._parent.SwgVal))
                {
                    return true;
                }
                if ((item == this._parent.SwgRis))
                {
                    return true;
                }
                if ((item == this._parent.SwgReact))
                {
                    return true;
                }
                if ((item == this._parent.SwgTmms))
                {
                    return true;
                }
                if ((item == this._parent.UnBlkTmms))
                {
                    return true;
                }
                if ((item == this._parent.MaxNumSlp))
                {
                    return true;
                }
                if ((item == this._parent.EvTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpCntRs != null))
                {
                    array[arrayIndex] = this._parent.OpCntRs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkZn != null))
                {
                    array[arrayIndex] = this._parent.BlkZn;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ZeroEna != null))
                {
                    array[arrayIndex] = this._parent.ZeroEna;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NgEna != null))
                {
                    array[arrayIndex] = this._parent.NgEna;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxEna != null))
                {
                    array[arrayIndex] = this._parent.MaxEna;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SwgVal != null))
                {
                    array[arrayIndex] = this._parent.SwgVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SwgRis != null))
                {
                    array[arrayIndex] = this._parent.SwgRis;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SwgReact != null))
                {
                    array[arrayIndex] = this._parent.SwgReact;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SwgTmms != null))
                {
                    array[arrayIndex] = this._parent.SwgTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.UnBlkTmms != null))
                {
                    array[arrayIndex] = this._parent.UnBlkTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxNumSlp != null))
                {
                    array[arrayIndex] = this._parent.MaxNumSlp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EvTmms != null))
                {
                    array[arrayIndex] = this._parent.EvTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpCntRs == item))
                {
                    this._parent.OpCntRs = null;
                    return true;
                }
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.BlkZn == item))
                {
                    this._parent.BlkZn = null;
                    return true;
                }
                if ((this._parent.ZeroEna == item))
                {
                    this._parent.ZeroEna = null;
                    return true;
                }
                if ((this._parent.NgEna == item))
                {
                    this._parent.NgEna = null;
                    return true;
                }
                if ((this._parent.MaxEna == item))
                {
                    this._parent.MaxEna = null;
                    return true;
                }
                if ((this._parent.SwgVal == item))
                {
                    this._parent.SwgVal = null;
                    return true;
                }
                if ((this._parent.SwgRis == item))
                {
                    this._parent.SwgRis = null;
                    return true;
                }
                if ((this._parent.SwgReact == item))
                {
                    this._parent.SwgReact = null;
                    return true;
                }
                if ((this._parent.SwgTmms == item))
                {
                    this._parent.SwgTmms = null;
                    return true;
                }
                if ((this._parent.UnBlkTmms == item))
                {
                    this._parent.UnBlkTmms = null;
                    return true;
                }
                if ((this._parent.MaxNumSlp == item))
                {
                    this._parent.MaxNumSlp = null;
                    return true;
                }
                if ((this._parent.EvTmms == item))
                {
                    this._parent.EvTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpCntRs).Concat(this._parent.Str).Concat(this._parent.Op).Concat(this._parent.BlkZn).Concat(this._parent.ZeroEna).Concat(this._parent.NgEna).Concat(this._parent.MaxEna).Concat(this._parent.SwgVal).Concat(this._parent.SwgRis).Concat(this._parent.SwgReact).Concat(this._parent.SwgTmms).Concat(this._parent.UnBlkTmms).Concat(this._parent.MaxNumSlp).Concat(this._parent.EvTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpCntRs property
        /// </summary>
        private sealed class OpCntRsProxy : ModelPropertyChange<IRPSB, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpCntRsProxy(IRPSB modelElement) : 
                    base(modelElement, "OpCntRs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.OpCntRs;
                }
                set
                {
                    this.ModelElement.OpCntRs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IRPSB, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IRPSB modelElement) : 
                    base(modelElement, "Str")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IRPSB, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IRPSB modelElement) : 
                    base(modelElement, "Op")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkZn property
        /// </summary>
        private sealed class BlkZnProxy : ModelPropertyChange<IRPSB, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkZnProxy(IRPSB modelElement) : 
                    base(modelElement, "BlkZn")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.BlkZn;
                }
                set
                {
                    this.ModelElement.BlkZn = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ZeroEna property
        /// </summary>
        private sealed class ZeroEnaProxy : ModelPropertyChange<IRPSB, ISPG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ZeroEnaProxy(IRPSB modelElement) : 
                    base(modelElement, "ZeroEna")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPG Value
            {
                get
                {
                    return this.ModelElement.ZeroEna;
                }
                set
                {
                    this.ModelElement.ZeroEna = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NgEna property
        /// </summary>
        private sealed class NgEnaProxy : ModelPropertyChange<IRPSB, ISPG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NgEnaProxy(IRPSB modelElement) : 
                    base(modelElement, "NgEna")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPG Value
            {
                get
                {
                    return this.ModelElement.NgEna;
                }
                set
                {
                    this.ModelElement.NgEna = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxEna property
        /// </summary>
        private sealed class MaxEnaProxy : ModelPropertyChange<IRPSB, ISPG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxEnaProxy(IRPSB modelElement) : 
                    base(modelElement, "MaxEna")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPG Value
            {
                get
                {
                    return this.ModelElement.MaxEna;
                }
                set
                {
                    this.ModelElement.MaxEna = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SwgVal property
        /// </summary>
        private sealed class SwgValProxy : ModelPropertyChange<IRPSB, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwgValProxy(IRPSB modelElement) : 
                    base(modelElement, "SwgVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.SwgVal;
                }
                set
                {
                    this.ModelElement.SwgVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SwgRis property
        /// </summary>
        private sealed class SwgRisProxy : ModelPropertyChange<IRPSB, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwgRisProxy(IRPSB modelElement) : 
                    base(modelElement, "SwgRis")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.SwgRis;
                }
                set
                {
                    this.ModelElement.SwgRis = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SwgReact property
        /// </summary>
        private sealed class SwgReactProxy : ModelPropertyChange<IRPSB, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwgReactProxy(IRPSB modelElement) : 
                    base(modelElement, "SwgReact")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.SwgReact;
                }
                set
                {
                    this.ModelElement.SwgReact = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SwgTmms property
        /// </summary>
        private sealed class SwgTmmsProxy : ModelPropertyChange<IRPSB, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwgTmmsProxy(IRPSB modelElement) : 
                    base(modelElement, "SwgTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.SwgTmms;
                }
                set
                {
                    this.ModelElement.SwgTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the UnBlkTmms property
        /// </summary>
        private sealed class UnBlkTmmsProxy : ModelPropertyChange<IRPSB, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnBlkTmmsProxy(IRPSB modelElement) : 
                    base(modelElement, "UnBlkTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.UnBlkTmms;
                }
                set
                {
                    this.ModelElement.UnBlkTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxNumSlp property
        /// </summary>
        private sealed class MaxNumSlpProxy : ModelPropertyChange<IRPSB, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxNumSlpProxy(IRPSB modelElement) : 
                    base(modelElement, "MaxNumSlp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MaxNumSlp;
                }
                set
                {
                    this.ModelElement.MaxNumSlp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EvTmms property
        /// </summary>
        private sealed class EvTmmsProxy : ModelPropertyChange<IRPSB, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EvTmmsProxy(IRPSB modelElement) : 
                    base(modelElement, "EvTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.EvTmms;
                }
                set
                {
                    this.ModelElement.EvTmms = value;
                }
            }
        }
    }
}

