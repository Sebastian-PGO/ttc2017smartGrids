using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR
{
    
    
    /// <summary>
    /// The default implementation of the RBRF class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pR")]
    [XmlNamespacePrefixAttribute("groupr")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupR/RBRF")]
    public partial class RBRF : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR.GroupR, IRBRF, IModelElement
    {
        
        private static Lazy<ITypedElement> _opCntRsReference = new Lazy<ITypedElement>(RetrieveOpCntRsReference);
        
        /// <summary>
        /// The backing field for the OpCntRs property
        /// </summary>
        private IINC _opCntRs;
        
        private static Lazy<ITypedElement> _strReference = new Lazy<ITypedElement>(RetrieveStrReference);
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        private static Lazy<ITypedElement> _opExReference = new Lazy<ITypedElement>(RetrieveOpExReference);
        
        /// <summary>
        /// The backing field for the OpEx property
        /// </summary>
        private IACT _opEx;
        
        private static Lazy<ITypedElement> _opInReference = new Lazy<ITypedElement>(RetrieveOpInReference);
        
        /// <summary>
        /// The backing field for the OpIn property
        /// </summary>
        private IACT _opIn;
        
        private static Lazy<ITypedElement> _failModReference = new Lazy<ITypedElement>(RetrieveFailModReference);
        
        /// <summary>
        /// The backing field for the FailMod property
        /// </summary>
        private IING _failMod;
        
        private static Lazy<ITypedElement> _failTmmsReference = new Lazy<ITypedElement>(RetrieveFailTmmsReference);
        
        /// <summary>
        /// The backing field for the FailTmms property
        /// </summary>
        private IING _failTmms;
        
        private static Lazy<ITypedElement> _sPlTrTmmsReference = new Lazy<ITypedElement>(RetrieveSPlTrTmmsReference);
        
        /// <summary>
        /// The backing field for the SPlTrTmms property
        /// </summary>
        private IING _sPlTrTmms;
        
        private static Lazy<ITypedElement> _tPTrTmmsReference = new Lazy<ITypedElement>(RetrieveTPTrTmmsReference);
        
        /// <summary>
        /// The backing field for the TPTrTmms property
        /// </summary>
        private IING _tPTrTmms;
        
        private static Lazy<ITypedElement> _detValAReference = new Lazy<ITypedElement>(RetrieveDetValAReference);
        
        /// <summary>
        /// The backing field for the DetValA property
        /// </summary>
        private IASG _detValA;
        
        private static Lazy<ITypedElement> _reTrModReference = new Lazy<ITypedElement>(RetrieveReTrModReference);
        
        /// <summary>
        /// The backing field for the ReTrMod property
        /// </summary>
        private IING _reTrMod;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The OpCntRs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC OpCntRs
        {
            get
            {
                return this._opCntRs;
            }
            set
            {
                if ((this._opCntRs != value))
                {
                    IINC old = this._opCntRs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpCntRsChanging(e);
                    this.OnPropertyChanging("OpCntRs", e, _opCntRsReference);
                    this._opCntRs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpCntRs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpCntRs;
                    }
                    this.OnOpCntRsChanged(e);
                    this.OnPropertyChanged("OpCntRs", e, _opCntRsReference);
                }
            }
        }
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e, _strReference);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e, _strReference);
                }
            }
        }
        
        /// <summary>
        /// The OpEx property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT OpEx
        {
            get
            {
                return this._opEx;
            }
            set
            {
                if ((this._opEx != value))
                {
                    IACT old = this._opEx;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpExChanging(e);
                    this.OnPropertyChanging("OpEx", e, _opExReference);
                    this._opEx = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpEx;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpEx;
                    }
                    this.OnOpExChanged(e);
                    this.OnPropertyChanged("OpEx", e, _opExReference);
                }
            }
        }
        
        /// <summary>
        /// The OpIn property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT OpIn
        {
            get
            {
                return this._opIn;
            }
            set
            {
                if ((this._opIn != value))
                {
                    IACT old = this._opIn;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpInChanging(e);
                    this.OnPropertyChanging("OpIn", e, _opInReference);
                    this._opIn = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpIn;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpIn;
                    }
                    this.OnOpInChanged(e);
                    this.OnPropertyChanged("OpIn", e, _opInReference);
                }
            }
        }
        
        /// <summary>
        /// The FailMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING FailMod
        {
            get
            {
                return this._failMod;
            }
            set
            {
                if ((this._failMod != value))
                {
                    IING old = this._failMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailModChanging(e);
                    this.OnPropertyChanging("FailMod", e, _failModReference);
                    this._failMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFailMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFailMod;
                    }
                    this.OnFailModChanged(e);
                    this.OnPropertyChanged("FailMod", e, _failModReference);
                }
            }
        }
        
        /// <summary>
        /// The FailTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING FailTmms
        {
            get
            {
                return this._failTmms;
            }
            set
            {
                if ((this._failTmms != value))
                {
                    IING old = this._failTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailTmmsChanging(e);
                    this.OnPropertyChanging("FailTmms", e, _failTmmsReference);
                    this._failTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFailTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFailTmms;
                    }
                    this.OnFailTmmsChanged(e);
                    this.OnPropertyChanged("FailTmms", e, _failTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The SPlTrTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING SPlTrTmms
        {
            get
            {
                return this._sPlTrTmms;
            }
            set
            {
                if ((this._sPlTrTmms != value))
                {
                    IING old = this._sPlTrTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSPlTrTmmsChanging(e);
                    this.OnPropertyChanging("SPlTrTmms", e, _sPlTrTmmsReference);
                    this._sPlTrTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSPlTrTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSPlTrTmms;
                    }
                    this.OnSPlTrTmmsChanged(e);
                    this.OnPropertyChanged("SPlTrTmms", e, _sPlTrTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The TPTrTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING TPTrTmms
        {
            get
            {
                return this._tPTrTmms;
            }
            set
            {
                if ((this._tPTrTmms != value))
                {
                    IING old = this._tPTrTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTPTrTmmsChanging(e);
                    this.OnPropertyChanging("TPTrTmms", e, _tPTrTmmsReference);
                    this._tPTrTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTPTrTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTPTrTmms;
                    }
                    this.OnTPTrTmmsChanged(e);
                    this.OnPropertyChanged("TPTrTmms", e, _tPTrTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The DetValA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG DetValA
        {
            get
            {
                return this._detValA;
            }
            set
            {
                if ((this._detValA != value))
                {
                    IASG old = this._detValA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDetValAChanging(e);
                    this.OnPropertyChanging("DetValA", e, _detValAReference);
                    this._detValA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDetValA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDetValA;
                    }
                    this.OnDetValAChanged(e);
                    this.OnPropertyChanged("DetValA", e, _detValAReference);
                }
            }
        }
        
        /// <summary>
        /// The ReTrMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING ReTrMod
        {
            get
            {
                return this._reTrMod;
            }
            set
            {
                if ((this._reTrMod != value))
                {
                    IING old = this._reTrMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReTrModChanging(e);
                    this.OnPropertyChanging("ReTrMod", e, _reTrModReference);
                    this._reTrMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReTrMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReTrMod;
                    }
                    this.OnReTrModChanged(e);
                    this.OnPropertyChanged("ReTrMod", e, _reTrModReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RBRFReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupR/RBRF")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OpCntRs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanging;
        
        /// <summary>
        /// Gets fired when the OpCntRs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanged;
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the OpEx property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpExChanging;
        
        /// <summary>
        /// Gets fired when the OpEx property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpExChanged;
        
        /// <summary>
        /// Gets fired before the OpIn property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpInChanging;
        
        /// <summary>
        /// Gets fired when the OpIn property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpInChanged;
        
        /// <summary>
        /// Gets fired before the FailMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailModChanging;
        
        /// <summary>
        /// Gets fired when the FailMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailModChanged;
        
        /// <summary>
        /// Gets fired before the FailTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailTmmsChanging;
        
        /// <summary>
        /// Gets fired when the FailTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailTmmsChanged;
        
        /// <summary>
        /// Gets fired before the SPlTrTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SPlTrTmmsChanging;
        
        /// <summary>
        /// Gets fired when the SPlTrTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SPlTrTmmsChanged;
        
        /// <summary>
        /// Gets fired before the TPTrTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TPTrTmmsChanging;
        
        /// <summary>
        /// Gets fired when the TPTrTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TPTrTmmsChanged;
        
        /// <summary>
        /// Gets fired before the DetValA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DetValAChanging;
        
        /// <summary>
        /// Gets fired when the DetValA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DetValAChanged;
        
        /// <summary>
        /// Gets fired before the ReTrMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReTrModChanging;
        
        /// <summary>
        /// Gets fired when the ReTrMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReTrModChanged;
        
        private static ITypedElement RetrieveOpCntRsReference()
        {
            return ((ITypedElement)(((ModelElement)(RBRF.ClassInstance)).Resolve("OpCntRs")));
        }
        
        /// <summary>
        /// Raises the OpCntRsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpCntRsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpCntRs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpCntRs(object sender, System.EventArgs eventArgs)
        {
            this.OpCntRs = null;
        }
        
        private static ITypedElement RetrieveStrReference()
        {
            return ((ITypedElement)(((ModelElement)(RBRF.ClassInstance)).Resolve("Str")));
        }
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        private static ITypedElement RetrieveOpExReference()
        {
            return ((ITypedElement)(((ModelElement)(RBRF.ClassInstance)).Resolve("OpEx")));
        }
        
        /// <summary>
        /// Raises the OpExChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpExChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpExChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpExChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpExChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpExChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpEx property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpEx(object sender, System.EventArgs eventArgs)
        {
            this.OpEx = null;
        }
        
        private static ITypedElement RetrieveOpInReference()
        {
            return ((ITypedElement)(((ModelElement)(RBRF.ClassInstance)).Resolve("OpIn")));
        }
        
        /// <summary>
        /// Raises the OpInChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpInChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpInChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpInChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpInChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpInChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpIn property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpIn(object sender, System.EventArgs eventArgs)
        {
            this.OpIn = null;
        }
        
        private static ITypedElement RetrieveFailModReference()
        {
            return ((ITypedElement)(((ModelElement)(RBRF.ClassInstance)).Resolve("FailMod")));
        }
        
        /// <summary>
        /// Raises the FailModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FailMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFailMod(object sender, System.EventArgs eventArgs)
        {
            this.FailMod = null;
        }
        
        private static ITypedElement RetrieveFailTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RBRF.ClassInstance)).Resolve("FailTmms")));
        }
        
        /// <summary>
        /// Raises the FailTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FailTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFailTmms(object sender, System.EventArgs eventArgs)
        {
            this.FailTmms = null;
        }
        
        private static ITypedElement RetrieveSPlTrTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RBRF.ClassInstance)).Resolve("SPlTrTmms")));
        }
        
        /// <summary>
        /// Raises the SPlTrTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSPlTrTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SPlTrTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SPlTrTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSPlTrTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SPlTrTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SPlTrTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSPlTrTmms(object sender, System.EventArgs eventArgs)
        {
            this.SPlTrTmms = null;
        }
        
        private static ITypedElement RetrieveTPTrTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RBRF.ClassInstance)).Resolve("TPTrTmms")));
        }
        
        /// <summary>
        /// Raises the TPTrTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTPTrTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TPTrTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TPTrTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTPTrTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TPTrTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TPTrTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTPTrTmms(object sender, System.EventArgs eventArgs)
        {
            this.TPTrTmms = null;
        }
        
        private static ITypedElement RetrieveDetValAReference()
        {
            return ((ITypedElement)(((ModelElement)(RBRF.ClassInstance)).Resolve("DetValA")));
        }
        
        /// <summary>
        /// Raises the DetValAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDetValAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DetValAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DetValAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDetValAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DetValAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DetValA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDetValA(object sender, System.EventArgs eventArgs)
        {
            this.DetValA = null;
        }
        
        private static ITypedElement RetrieveReTrModReference()
        {
            return ((ITypedElement)(((ModelElement)(RBRF.ClassInstance)).Resolve("ReTrMod")));
        }
        
        /// <summary>
        /// Raises the ReTrModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReTrModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReTrModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReTrModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReTrModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReTrModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReTrMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReTrMod(object sender, System.EventArgs eventArgs)
        {
            this.ReTrMod = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPCNTRS"))
            {
                this.OpCntRs = ((IINC)(value));
                return;
            }
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "OPEX"))
            {
                this.OpEx = ((IACT)(value));
                return;
            }
            if ((feature == "OPIN"))
            {
                this.OpIn = ((IACT)(value));
                return;
            }
            if ((feature == "FAILMOD"))
            {
                this.FailMod = ((IING)(value));
                return;
            }
            if ((feature == "FAILTMMS"))
            {
                this.FailTmms = ((IING)(value));
                return;
            }
            if ((feature == "SPLTRTMMS"))
            {
                this.SPlTrTmms = ((IING)(value));
                return;
            }
            if ((feature == "TPTRTMMS"))
            {
                this.TPTrTmms = ((IING)(value));
                return;
            }
            if ((feature == "DETVALA"))
            {
                this.DetValA = ((IASG)(value));
                return;
            }
            if ((feature == "RETRMOD"))
            {
                this.ReTrMod = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "OpEx"))
            {
                return new OpExProxy(this);
            }
            if ((attribute == "OpIn"))
            {
                return new OpInProxy(this);
            }
            if ((attribute == "FailMod"))
            {
                return new FailModProxy(this);
            }
            if ((attribute == "FailTmms"))
            {
                return new FailTmmsProxy(this);
            }
            if ((attribute == "SPlTrTmms"))
            {
                return new SPlTrTmmsProxy(this);
            }
            if ((attribute == "TPTrTmms"))
            {
                return new TPTrTmmsProxy(this);
            }
            if ((attribute == "DetValA"))
            {
                return new DetValAProxy(this);
            }
            if ((attribute == "ReTrMod"))
            {
                return new ReTrModProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "OpEx"))
            {
                return new OpExProxy(this);
            }
            if ((reference == "OpIn"))
            {
                return new OpInProxy(this);
            }
            if ((reference == "FailMod"))
            {
                return new FailModProxy(this);
            }
            if ((reference == "FailTmms"))
            {
                return new FailTmmsProxy(this);
            }
            if ((reference == "SPlTrTmms"))
            {
                return new SPlTrTmmsProxy(this);
            }
            if ((reference == "TPTrTmms"))
            {
                return new TPTrTmmsProxy(this);
            }
            if ((reference == "DetValA"))
            {
                return new DetValAProxy(this);
            }
            if ((reference == "ReTrMod"))
            {
                return new ReTrModProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupR/RBRF")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RBRF class
        /// </summary>
        public class RBRFReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RBRF _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RBRFReferencedElementsCollection(RBRF parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpCntRs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpEx != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpIn != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FailMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FailTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SPlTrTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TPTrTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DetValA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReTrMod != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpCntRsChanged += this.PropagateValueChanges;
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.OpExChanged += this.PropagateValueChanges;
                this._parent.OpInChanged += this.PropagateValueChanges;
                this._parent.FailModChanged += this.PropagateValueChanges;
                this._parent.FailTmmsChanged += this.PropagateValueChanges;
                this._parent.SPlTrTmmsChanged += this.PropagateValueChanges;
                this._parent.TPTrTmmsChanged += this.PropagateValueChanges;
                this._parent.DetValAChanged += this.PropagateValueChanges;
                this._parent.ReTrModChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpCntRsChanged -= this.PropagateValueChanges;
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.OpExChanged -= this.PropagateValueChanges;
                this._parent.OpInChanged -= this.PropagateValueChanges;
                this._parent.FailModChanged -= this.PropagateValueChanges;
                this._parent.FailTmmsChanged -= this.PropagateValueChanges;
                this._parent.SPlTrTmmsChanged -= this.PropagateValueChanges;
                this._parent.TPTrTmmsChanged -= this.PropagateValueChanges;
                this._parent.DetValAChanged -= this.PropagateValueChanges;
                this._parent.ReTrModChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpCntRs == null))
                {
                    IINC opCntRsCasted = item.As<IINC>();
                    if ((opCntRsCasted != null))
                    {
                        this._parent.OpCntRs = opCntRsCasted;
                        return;
                    }
                }
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.OpEx == null))
                {
                    IACT opExCasted = item.As<IACT>();
                    if ((opExCasted != null))
                    {
                        this._parent.OpEx = opExCasted;
                        return;
                    }
                }
                if ((this._parent.OpIn == null))
                {
                    IACT opInCasted = item.As<IACT>();
                    if ((opInCasted != null))
                    {
                        this._parent.OpIn = opInCasted;
                        return;
                    }
                }
                if ((this._parent.FailMod == null))
                {
                    IING failModCasted = item.As<IING>();
                    if ((failModCasted != null))
                    {
                        this._parent.FailMod = failModCasted;
                        return;
                    }
                }
                if ((this._parent.FailTmms == null))
                {
                    IING failTmmsCasted = item.As<IING>();
                    if ((failTmmsCasted != null))
                    {
                        this._parent.FailTmms = failTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.SPlTrTmms == null))
                {
                    IING sPlTrTmmsCasted = item.As<IING>();
                    if ((sPlTrTmmsCasted != null))
                    {
                        this._parent.SPlTrTmms = sPlTrTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.TPTrTmms == null))
                {
                    IING tPTrTmmsCasted = item.As<IING>();
                    if ((tPTrTmmsCasted != null))
                    {
                        this._parent.TPTrTmms = tPTrTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.DetValA == null))
                {
                    IASG detValACasted = item.As<IASG>();
                    if ((detValACasted != null))
                    {
                        this._parent.DetValA = detValACasted;
                        return;
                    }
                }
                if ((this._parent.ReTrMod == null))
                {
                    IING reTrModCasted = item.As<IING>();
                    if ((reTrModCasted != null))
                    {
                        this._parent.ReTrMod = reTrModCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpCntRs = null;
                this._parent.Str = null;
                this._parent.OpEx = null;
                this._parent.OpIn = null;
                this._parent.FailMod = null;
                this._parent.FailTmms = null;
                this._parent.SPlTrTmms = null;
                this._parent.TPTrTmms = null;
                this._parent.DetValA = null;
                this._parent.ReTrMod = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpCntRs))
                {
                    return true;
                }
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.OpEx))
                {
                    return true;
                }
                if ((item == this._parent.OpIn))
                {
                    return true;
                }
                if ((item == this._parent.FailMod))
                {
                    return true;
                }
                if ((item == this._parent.FailTmms))
                {
                    return true;
                }
                if ((item == this._parent.SPlTrTmms))
                {
                    return true;
                }
                if ((item == this._parent.TPTrTmms))
                {
                    return true;
                }
                if ((item == this._parent.DetValA))
                {
                    return true;
                }
                if ((item == this._parent.ReTrMod))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpCntRs != null))
                {
                    array[arrayIndex] = this._parent.OpCntRs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpEx != null))
                {
                    array[arrayIndex] = this._parent.OpEx;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpIn != null))
                {
                    array[arrayIndex] = this._parent.OpIn;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FailMod != null))
                {
                    array[arrayIndex] = this._parent.FailMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FailTmms != null))
                {
                    array[arrayIndex] = this._parent.FailTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SPlTrTmms != null))
                {
                    array[arrayIndex] = this._parent.SPlTrTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TPTrTmms != null))
                {
                    array[arrayIndex] = this._parent.TPTrTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DetValA != null))
                {
                    array[arrayIndex] = this._parent.DetValA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReTrMod != null))
                {
                    array[arrayIndex] = this._parent.ReTrMod;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpCntRs == item))
                {
                    this._parent.OpCntRs = null;
                    return true;
                }
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.OpEx == item))
                {
                    this._parent.OpEx = null;
                    return true;
                }
                if ((this._parent.OpIn == item))
                {
                    this._parent.OpIn = null;
                    return true;
                }
                if ((this._parent.FailMod == item))
                {
                    this._parent.FailMod = null;
                    return true;
                }
                if ((this._parent.FailTmms == item))
                {
                    this._parent.FailTmms = null;
                    return true;
                }
                if ((this._parent.SPlTrTmms == item))
                {
                    this._parent.SPlTrTmms = null;
                    return true;
                }
                if ((this._parent.TPTrTmms == item))
                {
                    this._parent.TPTrTmms = null;
                    return true;
                }
                if ((this._parent.DetValA == item))
                {
                    this._parent.DetValA = null;
                    return true;
                }
                if ((this._parent.ReTrMod == item))
                {
                    this._parent.ReTrMod = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpCntRs).Concat(this._parent.Str).Concat(this._parent.OpEx).Concat(this._parent.OpIn).Concat(this._parent.FailMod).Concat(this._parent.FailTmms).Concat(this._parent.SPlTrTmms).Concat(this._parent.TPTrTmms).Concat(this._parent.DetValA).Concat(this._parent.ReTrMod).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpCntRs property
        /// </summary>
        private sealed class OpCntRsProxy : ModelPropertyChange<IRBRF, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpCntRsProxy(IRBRF modelElement) : 
                    base(modelElement, "OpCntRs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.OpCntRs;
                }
                set
                {
                    this.ModelElement.OpCntRs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IRBRF, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IRBRF modelElement) : 
                    base(modelElement, "Str")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpEx property
        /// </summary>
        private sealed class OpExProxy : ModelPropertyChange<IRBRF, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpExProxy(IRBRF modelElement) : 
                    base(modelElement, "OpEx")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.OpEx;
                }
                set
                {
                    this.ModelElement.OpEx = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpIn property
        /// </summary>
        private sealed class OpInProxy : ModelPropertyChange<IRBRF, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpInProxy(IRBRF modelElement) : 
                    base(modelElement, "OpIn")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.OpIn;
                }
                set
                {
                    this.ModelElement.OpIn = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailMod property
        /// </summary>
        private sealed class FailModProxy : ModelPropertyChange<IRBRF, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailModProxy(IRBRF modelElement) : 
                    base(modelElement, "FailMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.FailMod;
                }
                set
                {
                    this.ModelElement.FailMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailTmms property
        /// </summary>
        private sealed class FailTmmsProxy : ModelPropertyChange<IRBRF, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailTmmsProxy(IRBRF modelElement) : 
                    base(modelElement, "FailTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.FailTmms;
                }
                set
                {
                    this.ModelElement.FailTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SPlTrTmms property
        /// </summary>
        private sealed class SPlTrTmmsProxy : ModelPropertyChange<IRBRF, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SPlTrTmmsProxy(IRBRF modelElement) : 
                    base(modelElement, "SPlTrTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.SPlTrTmms;
                }
                set
                {
                    this.ModelElement.SPlTrTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TPTrTmms property
        /// </summary>
        private sealed class TPTrTmmsProxy : ModelPropertyChange<IRBRF, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TPTrTmmsProxy(IRBRF modelElement) : 
                    base(modelElement, "TPTrTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.TPTrTmms;
                }
                set
                {
                    this.ModelElement.TPTrTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DetValA property
        /// </summary>
        private sealed class DetValAProxy : ModelPropertyChange<IRBRF, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DetValAProxy(IRBRF modelElement) : 
                    base(modelElement, "DetValA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.DetValA;
                }
                set
                {
                    this.ModelElement.DetValA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReTrMod property
        /// </summary>
        private sealed class ReTrModProxy : ModelPropertyChange<IRBRF, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReTrModProxy(IRBRF modelElement) : 
                    base(modelElement, "ReTrMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.ReTrMod;
                }
                set
                {
                    this.ModelElement.ReTrMod = value;
                }
            }
        }
    }
}

