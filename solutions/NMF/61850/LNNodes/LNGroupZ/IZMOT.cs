using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupZ
{
    
    
    /// <summary>
    /// The public interface for ZMOT
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZMOT))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZMOT))]
    public interface IZMOT : IModelElement, IGroupZ
    {
        
        /// <summary>
        /// The OpTmh property
        /// </summary>
        IINS OpTmh
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DExt property
        /// </summary>
        ISPC DExt
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LosOil property
        /// </summary>
        ISPS LosOil
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LosVac property
        /// </summary>
        ISPS LosVac
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PresAlm property
        /// </summary>
        ISPS PresAlm
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the OpTmh property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpTmhChanging;
        
        /// <summary>
        /// Gets fired when the OpTmh property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpTmhChanged;
        
        /// <summary>
        /// Gets fired before the DExt property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DExtChanging;
        
        /// <summary>
        /// Gets fired when the DExt property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DExtChanged;
        
        /// <summary>
        /// Gets fired before the LosOil property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LosOilChanging;
        
        /// <summary>
        /// Gets fired when the LosOil property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LosOilChanged;
        
        /// <summary>
        /// Gets fired before the LosVac property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LosVacChanging;
        
        /// <summary>
        /// Gets fired when the LosVac property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LosVacChanged;
        
        /// <summary>
        /// Gets fired before the PresAlm property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PresAlmChanging;
        
        /// <summary>
        /// Gets fired when the PresAlm property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PresAlmChanged;
    }
}

