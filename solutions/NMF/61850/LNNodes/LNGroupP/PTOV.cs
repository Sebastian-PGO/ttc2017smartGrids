using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PTOV class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PTOV")]
    public partial class PTOV : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPTOV, IModelElement
    {
        
        private static Lazy<ITypedElement> _strReference = new Lazy<ITypedElement>(RetrieveStrReference);
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        private static Lazy<ITypedElement> _opReference = new Lazy<ITypedElement>(RetrieveOpReference);
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        private static Lazy<ITypedElement> _tmVstReference = new Lazy<ITypedElement>(RetrieveTmVstReference);
        
        /// <summary>
        /// The backing field for the TmVst property
        /// </summary>
        private ICSD _tmVst;
        
        private static Lazy<ITypedElement> _tmVCrvReference = new Lazy<ITypedElement>(RetrieveTmVCrvReference);
        
        /// <summary>
        /// The backing field for the TmVCrv property
        /// </summary>
        private ICURVE _tmVCrv;
        
        private static Lazy<ITypedElement> _strValReference = new Lazy<ITypedElement>(RetrieveStrValReference);
        
        /// <summary>
        /// The backing field for the StrVal property
        /// </summary>
        private IASG _strVal;
        
        private static Lazy<ITypedElement> _tmMultReference = new Lazy<ITypedElement>(RetrieveTmMultReference);
        
        /// <summary>
        /// The backing field for the TmMult property
        /// </summary>
        private IASG _tmMult;
        
        private static Lazy<ITypedElement> _minOpTmmsReference = new Lazy<ITypedElement>(RetrieveMinOpTmmsReference);
        
        /// <summary>
        /// The backing field for the MinOpTmms property
        /// </summary>
        private IING _minOpTmms;
        
        private static Lazy<ITypedElement> _maxOpTmmsReference = new Lazy<ITypedElement>(RetrieveMaxOpTmmsReference);
        
        /// <summary>
        /// The backing field for the MaxOpTmms property
        /// </summary>
        private IING _maxOpTmms;
        
        private static Lazy<ITypedElement> _opDlTmmsReference = new Lazy<ITypedElement>(RetrieveOpDlTmmsReference);
        
        /// <summary>
        /// The backing field for the OpDlTmms property
        /// </summary>
        private IING _opDlTmms;
        
        private static Lazy<ITypedElement> _rsDlTmmsReference = new Lazy<ITypedElement>(RetrieveRsDlTmmsReference);
        
        /// <summary>
        /// The backing field for the RsDlTmms property
        /// </summary>
        private IING _rsDlTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e, _strReference);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e, _strReference);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e, _opReference);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e, _opReference);
                }
            }
        }
        
        /// <summary>
        /// The TmVst property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ICSD TmVst
        {
            get
            {
                return this._tmVst;
            }
            set
            {
                if ((this._tmVst != value))
                {
                    ICSD old = this._tmVst;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmVstChanging(e);
                    this.OnPropertyChanging("TmVst", e, _tmVstReference);
                    this._tmVst = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmVst;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmVst;
                    }
                    this.OnTmVstChanged(e);
                    this.OnPropertyChanged("TmVst", e, _tmVstReference);
                }
            }
        }
        
        /// <summary>
        /// The TmVCrv property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ICURVE TmVCrv
        {
            get
            {
                return this._tmVCrv;
            }
            set
            {
                if ((this._tmVCrv != value))
                {
                    ICURVE old = this._tmVCrv;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmVCrvChanging(e);
                    this.OnPropertyChanging("TmVCrv", e, _tmVCrvReference);
                    this._tmVCrv = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmVCrv;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmVCrv;
                    }
                    this.OnTmVCrvChanged(e);
                    this.OnPropertyChanged("TmVCrv", e, _tmVCrvReference);
                }
            }
        }
        
        /// <summary>
        /// The StrVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG StrVal
        {
            get
            {
                return this._strVal;
            }
            set
            {
                if ((this._strVal != value))
                {
                    IASG old = this._strVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrValChanging(e);
                    this.OnPropertyChanging("StrVal", e, _strValReference);
                    this._strVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStrVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStrVal;
                    }
                    this.OnStrValChanged(e);
                    this.OnPropertyChanged("StrVal", e, _strValReference);
                }
            }
        }
        
        /// <summary>
        /// The TmMult property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG TmMult
        {
            get
            {
                return this._tmMult;
            }
            set
            {
                if ((this._tmMult != value))
                {
                    IASG old = this._tmMult;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmMultChanging(e);
                    this.OnPropertyChanging("TmMult", e, _tmMultReference);
                    this._tmMult = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmMult;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmMult;
                    }
                    this.OnTmMultChanged(e);
                    this.OnPropertyChanged("TmMult", e, _tmMultReference);
                }
            }
        }
        
        /// <summary>
        /// The MinOpTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MinOpTmms
        {
            get
            {
                return this._minOpTmms;
            }
            set
            {
                if ((this._minOpTmms != value))
                {
                    IING old = this._minOpTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinOpTmmsChanging(e);
                    this.OnPropertyChanging("MinOpTmms", e, _minOpTmmsReference);
                    this._minOpTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinOpTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinOpTmms;
                    }
                    this.OnMinOpTmmsChanged(e);
                    this.OnPropertyChanged("MinOpTmms", e, _minOpTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxOpTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MaxOpTmms
        {
            get
            {
                return this._maxOpTmms;
            }
            set
            {
                if ((this._maxOpTmms != value))
                {
                    IING old = this._maxOpTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxOpTmmsChanging(e);
                    this.OnPropertyChanging("MaxOpTmms", e, _maxOpTmmsReference);
                    this._maxOpTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxOpTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxOpTmms;
                    }
                    this.OnMaxOpTmmsChanged(e);
                    this.OnPropertyChanged("MaxOpTmms", e, _maxOpTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The OpDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING OpDlTmms
        {
            get
            {
                return this._opDlTmms;
            }
            set
            {
                if ((this._opDlTmms != value))
                {
                    IING old = this._opDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpDlTmmsChanging(e);
                    this.OnPropertyChanging("OpDlTmms", e, _opDlTmmsReference);
                    this._opDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpDlTmms;
                    }
                    this.OnOpDlTmmsChanged(e);
                    this.OnPropertyChanged("OpDlTmms", e, _opDlTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The RsDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RsDlTmms
        {
            get
            {
                return this._rsDlTmms;
            }
            set
            {
                if ((this._rsDlTmms != value))
                {
                    IING old = this._rsDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRsDlTmmsChanging(e);
                    this.OnPropertyChanging("RsDlTmms", e, _rsDlTmmsReference);
                    this._rsDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRsDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRsDlTmms;
                    }
                    this.OnRsDlTmmsChanged(e);
                    this.OnPropertyChanged("RsDlTmms", e, _rsDlTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PTOVReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PTOV")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the TmVst property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmVstChanging;
        
        /// <summary>
        /// Gets fired when the TmVst property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmVstChanged;
        
        /// <summary>
        /// Gets fired before the TmVCrv property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmVCrvChanging;
        
        /// <summary>
        /// Gets fired when the TmVCrv property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmVCrvChanged;
        
        /// <summary>
        /// Gets fired before the StrVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrValChanging;
        
        /// <summary>
        /// Gets fired when the StrVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrValChanged;
        
        /// <summary>
        /// Gets fired before the TmMult property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmMultChanging;
        
        /// <summary>
        /// Gets fired when the TmMult property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmMultChanged;
        
        /// <summary>
        /// Gets fired before the MinOpTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinOpTmmsChanging;
        
        /// <summary>
        /// Gets fired when the MinOpTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinOpTmmsChanged;
        
        /// <summary>
        /// Gets fired before the MaxOpTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOpTmmsChanging;
        
        /// <summary>
        /// Gets fired when the MaxOpTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOpTmmsChanged;
        
        /// <summary>
        /// Gets fired before the OpDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the OpDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanged;
        
        /// <summary>
        /// Gets fired before the RsDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the RsDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDlTmmsChanged;
        
        private static ITypedElement RetrieveStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PTOV.ClassInstance)).Resolve("Str")));
        }
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        private static ITypedElement RetrieveOpReference()
        {
            return ((ITypedElement)(((ModelElement)(PTOV.ClassInstance)).Resolve("Op")));
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        private static ITypedElement RetrieveTmVstReference()
        {
            return ((ITypedElement)(((ModelElement)(PTOV.ClassInstance)).Resolve("TmVst")));
        }
        
        /// <summary>
        /// Raises the TmVstChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmVstChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmVstChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmVstChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmVstChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmVstChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmVst property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmVst(object sender, System.EventArgs eventArgs)
        {
            this.TmVst = null;
        }
        
        private static ITypedElement RetrieveTmVCrvReference()
        {
            return ((ITypedElement)(((ModelElement)(PTOV.ClassInstance)).Resolve("TmVCrv")));
        }
        
        /// <summary>
        /// Raises the TmVCrvChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmVCrvChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmVCrvChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmVCrvChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmVCrvChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmVCrvChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmVCrv property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmVCrv(object sender, System.EventArgs eventArgs)
        {
            this.TmVCrv = null;
        }
        
        private static ITypedElement RetrieveStrValReference()
        {
            return ((ITypedElement)(((ModelElement)(PTOV.ClassInstance)).Resolve("StrVal")));
        }
        
        /// <summary>
        /// Raises the StrValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StrVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStrVal(object sender, System.EventArgs eventArgs)
        {
            this.StrVal = null;
        }
        
        private static ITypedElement RetrieveTmMultReference()
        {
            return ((ITypedElement)(((ModelElement)(PTOV.ClassInstance)).Resolve("TmMult")));
        }
        
        /// <summary>
        /// Raises the TmMultChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmMultChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmMultChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmMultChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmMultChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmMultChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmMult property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmMult(object sender, System.EventArgs eventArgs)
        {
            this.TmMult = null;
        }
        
        private static ITypedElement RetrieveMinOpTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PTOV.ClassInstance)).Resolve("MinOpTmms")));
        }
        
        /// <summary>
        /// Raises the MinOpTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinOpTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinOpTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinOpTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinOpTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinOpTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinOpTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinOpTmms(object sender, System.EventArgs eventArgs)
        {
            this.MinOpTmms = null;
        }
        
        private static ITypedElement RetrieveMaxOpTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PTOV.ClassInstance)).Resolve("MaxOpTmms")));
        }
        
        /// <summary>
        /// Raises the MaxOpTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOpTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOpTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxOpTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOpTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOpTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxOpTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxOpTmms(object sender, System.EventArgs eventArgs)
        {
            this.MaxOpTmms = null;
        }
        
        private static ITypedElement RetrieveOpDlTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PTOV.ClassInstance)).Resolve("OpDlTmms")));
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.OpDlTmms = null;
        }
        
        private static ITypedElement RetrieveRsDlTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PTOV.ClassInstance)).Resolve("RsDlTmms")));
        }
        
        /// <summary>
        /// Raises the RsDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RsDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RsDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRsDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.RsDlTmms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "TMVST"))
            {
                this.TmVst = ((ICSD)(value));
                return;
            }
            if ((feature == "TMVCRV"))
            {
                this.TmVCrv = ((ICURVE)(value));
                return;
            }
            if ((feature == "STRVAL"))
            {
                this.StrVal = ((IASG)(value));
                return;
            }
            if ((feature == "TMMULT"))
            {
                this.TmMult = ((IASG)(value));
                return;
            }
            if ((feature == "MINOPTMMS"))
            {
                this.MinOpTmms = ((IING)(value));
                return;
            }
            if ((feature == "MAXOPTMMS"))
            {
                this.MaxOpTmms = ((IING)(value));
                return;
            }
            if ((feature == "OPDLTMMS"))
            {
                this.OpDlTmms = ((IING)(value));
                return;
            }
            if ((feature == "RSDLTMMS"))
            {
                this.RsDlTmms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "TmVst"))
            {
                return new TmVstProxy(this);
            }
            if ((attribute == "TmVCrv"))
            {
                return new TmVCrvProxy(this);
            }
            if ((attribute == "StrVal"))
            {
                return new StrValProxy(this);
            }
            if ((attribute == "TmMult"))
            {
                return new TmMultProxy(this);
            }
            if ((attribute == "MinOpTmms"))
            {
                return new MinOpTmmsProxy(this);
            }
            if ((attribute == "MaxOpTmms"))
            {
                return new MaxOpTmmsProxy(this);
            }
            if ((attribute == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((attribute == "RsDlTmms"))
            {
                return new RsDlTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "TmVst"))
            {
                return new TmVstProxy(this);
            }
            if ((reference == "TmVCrv"))
            {
                return new TmVCrvProxy(this);
            }
            if ((reference == "StrVal"))
            {
                return new StrValProxy(this);
            }
            if ((reference == "TmMult"))
            {
                return new TmMultProxy(this);
            }
            if ((reference == "MinOpTmms"))
            {
                return new MinOpTmmsProxy(this);
            }
            if ((reference == "MaxOpTmms"))
            {
                return new MaxOpTmmsProxy(this);
            }
            if ((reference == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((reference == "RsDlTmms"))
            {
                return new RsDlTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PTOV")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PTOV class
        /// </summary>
        public class PTOVReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PTOV _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PTOVReferencedElementsCollection(PTOV parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmVst != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmVCrv != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StrVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmMult != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinOpTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxOpTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RsDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.TmVstChanged += this.PropagateValueChanges;
                this._parent.TmVCrvChanged += this.PropagateValueChanges;
                this._parent.StrValChanged += this.PropagateValueChanges;
                this._parent.TmMultChanged += this.PropagateValueChanges;
                this._parent.MinOpTmmsChanged += this.PropagateValueChanges;
                this._parent.MaxOpTmmsChanged += this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged += this.PropagateValueChanges;
                this._parent.RsDlTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.TmVstChanged -= this.PropagateValueChanges;
                this._parent.TmVCrvChanged -= this.PropagateValueChanges;
                this._parent.StrValChanged -= this.PropagateValueChanges;
                this._parent.TmMultChanged -= this.PropagateValueChanges;
                this._parent.MinOpTmmsChanged -= this.PropagateValueChanges;
                this._parent.MaxOpTmmsChanged -= this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged -= this.PropagateValueChanges;
                this._parent.RsDlTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.TmVst == null))
                {
                    ICSD tmVstCasted = item.As<ICSD>();
                    if ((tmVstCasted != null))
                    {
                        this._parent.TmVst = tmVstCasted;
                        return;
                    }
                }
                if ((this._parent.TmVCrv == null))
                {
                    ICURVE tmVCrvCasted = item.As<ICURVE>();
                    if ((tmVCrvCasted != null))
                    {
                        this._parent.TmVCrv = tmVCrvCasted;
                        return;
                    }
                }
                if ((this._parent.StrVal == null))
                {
                    IASG strValCasted = item.As<IASG>();
                    if ((strValCasted != null))
                    {
                        this._parent.StrVal = strValCasted;
                        return;
                    }
                }
                if ((this._parent.TmMult == null))
                {
                    IASG tmMultCasted = item.As<IASG>();
                    if ((tmMultCasted != null))
                    {
                        this._parent.TmMult = tmMultCasted;
                        return;
                    }
                }
                if ((this._parent.MinOpTmms == null))
                {
                    IING minOpTmmsCasted = item.As<IING>();
                    if ((minOpTmmsCasted != null))
                    {
                        this._parent.MinOpTmms = minOpTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.MaxOpTmms == null))
                {
                    IING maxOpTmmsCasted = item.As<IING>();
                    if ((maxOpTmmsCasted != null))
                    {
                        this._parent.MaxOpTmms = maxOpTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.OpDlTmms == null))
                {
                    IING opDlTmmsCasted = item.As<IING>();
                    if ((opDlTmmsCasted != null))
                    {
                        this._parent.OpDlTmms = opDlTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.RsDlTmms == null))
                {
                    IING rsDlTmmsCasted = item.As<IING>();
                    if ((rsDlTmmsCasted != null))
                    {
                        this._parent.RsDlTmms = rsDlTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Str = null;
                this._parent.Op = null;
                this._parent.TmVst = null;
                this._parent.TmVCrv = null;
                this._parent.StrVal = null;
                this._parent.TmMult = null;
                this._parent.MinOpTmms = null;
                this._parent.MaxOpTmms = null;
                this._parent.OpDlTmms = null;
                this._parent.RsDlTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.TmVst))
                {
                    return true;
                }
                if ((item == this._parent.TmVCrv))
                {
                    return true;
                }
                if ((item == this._parent.StrVal))
                {
                    return true;
                }
                if ((item == this._parent.TmMult))
                {
                    return true;
                }
                if ((item == this._parent.MinOpTmms))
                {
                    return true;
                }
                if ((item == this._parent.MaxOpTmms))
                {
                    return true;
                }
                if ((item == this._parent.OpDlTmms))
                {
                    return true;
                }
                if ((item == this._parent.RsDlTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmVst != null))
                {
                    array[arrayIndex] = this._parent.TmVst;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmVCrv != null))
                {
                    array[arrayIndex] = this._parent.TmVCrv;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StrVal != null))
                {
                    array[arrayIndex] = this._parent.StrVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmMult != null))
                {
                    array[arrayIndex] = this._parent.TmMult;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinOpTmms != null))
                {
                    array[arrayIndex] = this._parent.MinOpTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxOpTmms != null))
                {
                    array[arrayIndex] = this._parent.MaxOpTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpDlTmms != null))
                {
                    array[arrayIndex] = this._parent.OpDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RsDlTmms != null))
                {
                    array[arrayIndex] = this._parent.RsDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.TmVst == item))
                {
                    this._parent.TmVst = null;
                    return true;
                }
                if ((this._parent.TmVCrv == item))
                {
                    this._parent.TmVCrv = null;
                    return true;
                }
                if ((this._parent.StrVal == item))
                {
                    this._parent.StrVal = null;
                    return true;
                }
                if ((this._parent.TmMult == item))
                {
                    this._parent.TmMult = null;
                    return true;
                }
                if ((this._parent.MinOpTmms == item))
                {
                    this._parent.MinOpTmms = null;
                    return true;
                }
                if ((this._parent.MaxOpTmms == item))
                {
                    this._parent.MaxOpTmms = null;
                    return true;
                }
                if ((this._parent.OpDlTmms == item))
                {
                    this._parent.OpDlTmms = null;
                    return true;
                }
                if ((this._parent.RsDlTmms == item))
                {
                    this._parent.RsDlTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Str).Concat(this._parent.Op).Concat(this._parent.TmVst).Concat(this._parent.TmVCrv).Concat(this._parent.StrVal).Concat(this._parent.TmMult).Concat(this._parent.MinOpTmms).Concat(this._parent.MaxOpTmms).Concat(this._parent.OpDlTmms).Concat(this._parent.RsDlTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IPTOV, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IPTOV modelElement) : 
                    base(modelElement, "Str")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IPTOV, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IPTOV modelElement) : 
                    base(modelElement, "Op")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmVst property
        /// </summary>
        private sealed class TmVstProxy : ModelPropertyChange<IPTOV, ICSD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmVstProxy(IPTOV modelElement) : 
                    base(modelElement, "TmVst")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICSD Value
            {
                get
                {
                    return this.ModelElement.TmVst;
                }
                set
                {
                    this.ModelElement.TmVst = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmVCrv property
        /// </summary>
        private sealed class TmVCrvProxy : ModelPropertyChange<IPTOV, ICURVE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmVCrvProxy(IPTOV modelElement) : 
                    base(modelElement, "TmVCrv")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICURVE Value
            {
                get
                {
                    return this.ModelElement.TmVCrv;
                }
                set
                {
                    this.ModelElement.TmVCrv = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StrVal property
        /// </summary>
        private sealed class StrValProxy : ModelPropertyChange<IPTOV, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrValProxy(IPTOV modelElement) : 
                    base(modelElement, "StrVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.StrVal;
                }
                set
                {
                    this.ModelElement.StrVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmMult property
        /// </summary>
        private sealed class TmMultProxy : ModelPropertyChange<IPTOV, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmMultProxy(IPTOV modelElement) : 
                    base(modelElement, "TmMult")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.TmMult;
                }
                set
                {
                    this.ModelElement.TmMult = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MinOpTmms property
        /// </summary>
        private sealed class MinOpTmmsProxy : ModelPropertyChange<IPTOV, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinOpTmmsProxy(IPTOV modelElement) : 
                    base(modelElement, "MinOpTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MinOpTmms;
                }
                set
                {
                    this.ModelElement.MinOpTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxOpTmms property
        /// </summary>
        private sealed class MaxOpTmmsProxy : ModelPropertyChange<IPTOV, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxOpTmmsProxy(IPTOV modelElement) : 
                    base(modelElement, "MaxOpTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MaxOpTmms;
                }
                set
                {
                    this.ModelElement.MaxOpTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpDlTmms property
        /// </summary>
        private sealed class OpDlTmmsProxy : ModelPropertyChange<IPTOV, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpDlTmmsProxy(IPTOV modelElement) : 
                    base(modelElement, "OpDlTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.OpDlTmms;
                }
                set
                {
                    this.ModelElement.OpDlTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RsDlTmms property
        /// </summary>
        private sealed class RsDlTmmsProxy : ModelPropertyChange<IPTOV, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RsDlTmmsProxy(IPTOV modelElement) : 
                    base(modelElement, "RsDlTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RsDlTmms;
                }
                set
                {
                    this.ModelElement.RsDlTmms = value;
                }
            }
        }
    }
}

