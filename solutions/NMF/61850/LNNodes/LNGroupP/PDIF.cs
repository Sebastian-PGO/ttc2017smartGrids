using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PDIF class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PDIF")]
    public partial class PDIF : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPDIF, IModelElement
    {
        
        private static Lazy<ITypedElement> _strReference = new Lazy<ITypedElement>(RetrieveStrReference);
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        private static Lazy<ITypedElement> _opReference = new Lazy<ITypedElement>(RetrieveOpReference);
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        private static Lazy<ITypedElement> _tmAStReference = new Lazy<ITypedElement>(RetrieveTmAStReference);
        
        /// <summary>
        /// The backing field for the TmASt property
        /// </summary>
        private ICSD _tmASt;
        
        private static Lazy<ITypedElement> _difAClcReference = new Lazy<ITypedElement>(RetrieveDifAClcReference);
        
        /// <summary>
        /// The backing field for the DifAClc property
        /// </summary>
        private IWYE _difAClc;
        
        private static Lazy<ITypedElement> _rstAReference = new Lazy<ITypedElement>(RetrieveRstAReference);
        
        /// <summary>
        /// The backing field for the RstA property
        /// </summary>
        private IWYE _rstA;
        
        private static Lazy<ITypedElement> _linCapacReference = new Lazy<ITypedElement>(RetrieveLinCapacReference);
        
        /// <summary>
        /// The backing field for the LinCapac property
        /// </summary>
        private IASG _linCapac;
        
        private static Lazy<ITypedElement> _loSetReference = new Lazy<ITypedElement>(RetrieveLoSetReference);
        
        /// <summary>
        /// The backing field for the LoSet property
        /// </summary>
        private IING _loSet;
        
        private static Lazy<ITypedElement> _hiSetReference = new Lazy<ITypedElement>(RetrieveHiSetReference);
        
        /// <summary>
        /// The backing field for the HiSet property
        /// </summary>
        private IING _hiSet;
        
        private static Lazy<ITypedElement> _minOpTmmsReference = new Lazy<ITypedElement>(RetrieveMinOpTmmsReference);
        
        /// <summary>
        /// The backing field for the MinOpTmms property
        /// </summary>
        private IING _minOpTmms;
        
        private static Lazy<ITypedElement> _maxOpTmmsReference = new Lazy<ITypedElement>(RetrieveMaxOpTmmsReference);
        
        /// <summary>
        /// The backing field for the MaxOpTmms property
        /// </summary>
        private IING _maxOpTmms;
        
        private static Lazy<ITypedElement> _rstModReference = new Lazy<ITypedElement>(RetrieveRstModReference);
        
        /// <summary>
        /// The backing field for the RstMod property
        /// </summary>
        private IING _rstMod;
        
        private static Lazy<ITypedElement> _rsDiTmmsReference = new Lazy<ITypedElement>(RetrieveRsDiTmmsReference);
        
        /// <summary>
        /// The backing field for the RsDiTmms property
        /// </summary>
        private IING _rsDiTmms;
        
        private static Lazy<ITypedElement> _tmACrvReference = new Lazy<ITypedElement>(RetrieveTmACrvReference);
        
        /// <summary>
        /// The backing field for the TmACrv property
        /// </summary>
        private ICURVE _tmACrv;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e, _strReference);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e, _strReference);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e, _opReference);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e, _opReference);
                }
            }
        }
        
        /// <summary>
        /// The TmASt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ICSD TmASt
        {
            get
            {
                return this._tmASt;
            }
            set
            {
                if ((this._tmASt != value))
                {
                    ICSD old = this._tmASt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmAStChanging(e);
                    this.OnPropertyChanging("TmASt", e, _tmAStReference);
                    this._tmASt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmASt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmASt;
                    }
                    this.OnTmAStChanged(e);
                    this.OnPropertyChanged("TmASt", e, _tmAStReference);
                }
            }
        }
        
        /// <summary>
        /// The DifAClc property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE DifAClc
        {
            get
            {
                return this._difAClc;
            }
            set
            {
                if ((this._difAClc != value))
                {
                    IWYE old = this._difAClc;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDifAClcChanging(e);
                    this.OnPropertyChanging("DifAClc", e, _difAClcReference);
                    this._difAClc = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDifAClc;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDifAClc;
                    }
                    this.OnDifAClcChanged(e);
                    this.OnPropertyChanged("DifAClc", e, _difAClcReference);
                }
            }
        }
        
        /// <summary>
        /// The RstA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE RstA
        {
            get
            {
                return this._rstA;
            }
            set
            {
                if ((this._rstA != value))
                {
                    IWYE old = this._rstA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRstAChanging(e);
                    this.OnPropertyChanging("RstA", e, _rstAReference);
                    this._rstA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRstA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRstA;
                    }
                    this.OnRstAChanged(e);
                    this.OnPropertyChanged("RstA", e, _rstAReference);
                }
            }
        }
        
        /// <summary>
        /// The LinCapac property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LinCapac
        {
            get
            {
                return this._linCapac;
            }
            set
            {
                if ((this._linCapac != value))
                {
                    IASG old = this._linCapac;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLinCapacChanging(e);
                    this.OnPropertyChanging("LinCapac", e, _linCapacReference);
                    this._linCapac = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLinCapac;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLinCapac;
                    }
                    this.OnLinCapacChanged(e);
                    this.OnPropertyChanged("LinCapac", e, _linCapacReference);
                }
            }
        }
        
        /// <summary>
        /// The LoSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING LoSet
        {
            get
            {
                return this._loSet;
            }
            set
            {
                if ((this._loSet != value))
                {
                    IING old = this._loSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoSetChanging(e);
                    this.OnPropertyChanging("LoSet", e, _loSetReference);
                    this._loSet = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLoSet;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLoSet;
                    }
                    this.OnLoSetChanged(e);
                    this.OnPropertyChanged("LoSet", e, _loSetReference);
                }
            }
        }
        
        /// <summary>
        /// The HiSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING HiSet
        {
            get
            {
                return this._hiSet;
            }
            set
            {
                if ((this._hiSet != value))
                {
                    IING old = this._hiSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHiSetChanging(e);
                    this.OnPropertyChanging("HiSet", e, _hiSetReference);
                    this._hiSet = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHiSet;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHiSet;
                    }
                    this.OnHiSetChanged(e);
                    this.OnPropertyChanged("HiSet", e, _hiSetReference);
                }
            }
        }
        
        /// <summary>
        /// The MinOpTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MinOpTmms
        {
            get
            {
                return this._minOpTmms;
            }
            set
            {
                if ((this._minOpTmms != value))
                {
                    IING old = this._minOpTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinOpTmmsChanging(e);
                    this.OnPropertyChanging("MinOpTmms", e, _minOpTmmsReference);
                    this._minOpTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinOpTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinOpTmms;
                    }
                    this.OnMinOpTmmsChanged(e);
                    this.OnPropertyChanged("MinOpTmms", e, _minOpTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxOpTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MaxOpTmms
        {
            get
            {
                return this._maxOpTmms;
            }
            set
            {
                if ((this._maxOpTmms != value))
                {
                    IING old = this._maxOpTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxOpTmmsChanging(e);
                    this.OnPropertyChanging("MaxOpTmms", e, _maxOpTmmsReference);
                    this._maxOpTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxOpTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxOpTmms;
                    }
                    this.OnMaxOpTmmsChanged(e);
                    this.OnPropertyChanged("MaxOpTmms", e, _maxOpTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The RstMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RstMod
        {
            get
            {
                return this._rstMod;
            }
            set
            {
                if ((this._rstMod != value))
                {
                    IING old = this._rstMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRstModChanging(e);
                    this.OnPropertyChanging("RstMod", e, _rstModReference);
                    this._rstMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRstMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRstMod;
                    }
                    this.OnRstModChanged(e);
                    this.OnPropertyChanged("RstMod", e, _rstModReference);
                }
            }
        }
        
        /// <summary>
        /// The RsDiTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RsDiTmms
        {
            get
            {
                return this._rsDiTmms;
            }
            set
            {
                if ((this._rsDiTmms != value))
                {
                    IING old = this._rsDiTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRsDiTmmsChanging(e);
                    this.OnPropertyChanging("RsDiTmms", e, _rsDiTmmsReference);
                    this._rsDiTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRsDiTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRsDiTmms;
                    }
                    this.OnRsDiTmmsChanged(e);
                    this.OnPropertyChanged("RsDiTmms", e, _rsDiTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The TmACrv property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ICURVE TmACrv
        {
            get
            {
                return this._tmACrv;
            }
            set
            {
                if ((this._tmACrv != value))
                {
                    ICURVE old = this._tmACrv;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmACrvChanging(e);
                    this.OnPropertyChanging("TmACrv", e, _tmACrvReference);
                    this._tmACrv = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmACrv;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmACrv;
                    }
                    this.OnTmACrvChanged(e);
                    this.OnPropertyChanged("TmACrv", e, _tmACrvReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PDIFReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PDIF")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the TmASt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmAStChanging;
        
        /// <summary>
        /// Gets fired when the TmASt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmAStChanged;
        
        /// <summary>
        /// Gets fired before the DifAClc property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifAClcChanging;
        
        /// <summary>
        /// Gets fired when the DifAClc property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifAClcChanged;
        
        /// <summary>
        /// Gets fired before the RstA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RstAChanging;
        
        /// <summary>
        /// Gets fired when the RstA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RstAChanged;
        
        /// <summary>
        /// Gets fired before the LinCapac property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LinCapacChanging;
        
        /// <summary>
        /// Gets fired when the LinCapac property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LinCapacChanged;
        
        /// <summary>
        /// Gets fired before the LoSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoSetChanging;
        
        /// <summary>
        /// Gets fired when the LoSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoSetChanged;
        
        /// <summary>
        /// Gets fired before the HiSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiSetChanging;
        
        /// <summary>
        /// Gets fired when the HiSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiSetChanged;
        
        /// <summary>
        /// Gets fired before the MinOpTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinOpTmmsChanging;
        
        /// <summary>
        /// Gets fired when the MinOpTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinOpTmmsChanged;
        
        /// <summary>
        /// Gets fired before the MaxOpTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOpTmmsChanging;
        
        /// <summary>
        /// Gets fired when the MaxOpTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOpTmmsChanged;
        
        /// <summary>
        /// Gets fired before the RstMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RstModChanging;
        
        /// <summary>
        /// Gets fired when the RstMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RstModChanged;
        
        /// <summary>
        /// Gets fired before the RsDiTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDiTmmsChanging;
        
        /// <summary>
        /// Gets fired when the RsDiTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDiTmmsChanged;
        
        /// <summary>
        /// Gets fired before the TmACrv property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmACrvChanging;
        
        /// <summary>
        /// Gets fired when the TmACrv property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmACrvChanged;
        
        private static ITypedElement RetrieveStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("Str")));
        }
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        private static ITypedElement RetrieveOpReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("Op")));
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        private static ITypedElement RetrieveTmAStReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("TmASt")));
        }
        
        /// <summary>
        /// Raises the TmAStChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmAStChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmAStChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmAStChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmAStChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmAStChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmASt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmASt(object sender, System.EventArgs eventArgs)
        {
            this.TmASt = null;
        }
        
        private static ITypedElement RetrieveDifAClcReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("DifAClc")));
        }
        
        /// <summary>
        /// Raises the DifAClcChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifAClcChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifAClcChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DifAClcChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifAClcChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifAClcChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DifAClc property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDifAClc(object sender, System.EventArgs eventArgs)
        {
            this.DifAClc = null;
        }
        
        private static ITypedElement RetrieveRstAReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("RstA")));
        }
        
        /// <summary>
        /// Raises the RstAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRstAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RstAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RstAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRstAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RstAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RstA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRstA(object sender, System.EventArgs eventArgs)
        {
            this.RstA = null;
        }
        
        private static ITypedElement RetrieveLinCapacReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("LinCapac")));
        }
        
        /// <summary>
        /// Raises the LinCapacChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLinCapacChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LinCapacChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LinCapacChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLinCapacChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LinCapacChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LinCapac property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLinCapac(object sender, System.EventArgs eventArgs)
        {
            this.LinCapac = null;
        }
        
        private static ITypedElement RetrieveLoSetReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("LoSet")));
        }
        
        /// <summary>
        /// Raises the LoSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LoSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoSet(object sender, System.EventArgs eventArgs)
        {
            this.LoSet = null;
        }
        
        private static ITypedElement RetrieveHiSetReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("HiSet")));
        }
        
        /// <summary>
        /// Raises the HiSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HiSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HiSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHiSet(object sender, System.EventArgs eventArgs)
        {
            this.HiSet = null;
        }
        
        private static ITypedElement RetrieveMinOpTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("MinOpTmms")));
        }
        
        /// <summary>
        /// Raises the MinOpTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinOpTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinOpTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinOpTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinOpTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinOpTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinOpTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinOpTmms(object sender, System.EventArgs eventArgs)
        {
            this.MinOpTmms = null;
        }
        
        private static ITypedElement RetrieveMaxOpTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("MaxOpTmms")));
        }
        
        /// <summary>
        /// Raises the MaxOpTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOpTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOpTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxOpTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOpTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOpTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxOpTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxOpTmms(object sender, System.EventArgs eventArgs)
        {
            this.MaxOpTmms = null;
        }
        
        private static ITypedElement RetrieveRstModReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("RstMod")));
        }
        
        /// <summary>
        /// Raises the RstModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRstModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RstModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RstModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRstModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RstModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RstMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRstMod(object sender, System.EventArgs eventArgs)
        {
            this.RstMod = null;
        }
        
        private static ITypedElement RetrieveRsDiTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("RsDiTmms")));
        }
        
        /// <summary>
        /// Raises the RsDiTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDiTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDiTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RsDiTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDiTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDiTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RsDiTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRsDiTmms(object sender, System.EventArgs eventArgs)
        {
            this.RsDiTmms = null;
        }
        
        private static ITypedElement RetrieveTmACrvReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIF.ClassInstance)).Resolve("TmACrv")));
        }
        
        /// <summary>
        /// Raises the TmACrvChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmACrvChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmACrvChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmACrvChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmACrvChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmACrvChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmACrv property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmACrv(object sender, System.EventArgs eventArgs)
        {
            this.TmACrv = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "TMAST"))
            {
                this.TmASt = ((ICSD)(value));
                return;
            }
            if ((feature == "DIFACLC"))
            {
                this.DifAClc = ((IWYE)(value));
                return;
            }
            if ((feature == "RSTA"))
            {
                this.RstA = ((IWYE)(value));
                return;
            }
            if ((feature == "LINCAPAC"))
            {
                this.LinCapac = ((IASG)(value));
                return;
            }
            if ((feature == "LOSET"))
            {
                this.LoSet = ((IING)(value));
                return;
            }
            if ((feature == "HISET"))
            {
                this.HiSet = ((IING)(value));
                return;
            }
            if ((feature == "MINOPTMMS"))
            {
                this.MinOpTmms = ((IING)(value));
                return;
            }
            if ((feature == "MAXOPTMMS"))
            {
                this.MaxOpTmms = ((IING)(value));
                return;
            }
            if ((feature == "RSTMOD"))
            {
                this.RstMod = ((IING)(value));
                return;
            }
            if ((feature == "RSDITMMS"))
            {
                this.RsDiTmms = ((IING)(value));
                return;
            }
            if ((feature == "TMACRV"))
            {
                this.TmACrv = ((ICURVE)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "TmASt"))
            {
                return new TmAStProxy(this);
            }
            if ((attribute == "DifAClc"))
            {
                return new DifAClcProxy(this);
            }
            if ((attribute == "RstA"))
            {
                return new RstAProxy(this);
            }
            if ((attribute == "LinCapac"))
            {
                return new LinCapacProxy(this);
            }
            if ((attribute == "LoSet"))
            {
                return new LoSetProxy(this);
            }
            if ((attribute == "HiSet"))
            {
                return new HiSetProxy(this);
            }
            if ((attribute == "MinOpTmms"))
            {
                return new MinOpTmmsProxy(this);
            }
            if ((attribute == "MaxOpTmms"))
            {
                return new MaxOpTmmsProxy(this);
            }
            if ((attribute == "RstMod"))
            {
                return new RstModProxy(this);
            }
            if ((attribute == "RsDiTmms"))
            {
                return new RsDiTmmsProxy(this);
            }
            if ((attribute == "TmACrv"))
            {
                return new TmACrvProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "TmASt"))
            {
                return new TmAStProxy(this);
            }
            if ((reference == "DifAClc"))
            {
                return new DifAClcProxy(this);
            }
            if ((reference == "RstA"))
            {
                return new RstAProxy(this);
            }
            if ((reference == "LinCapac"))
            {
                return new LinCapacProxy(this);
            }
            if ((reference == "LoSet"))
            {
                return new LoSetProxy(this);
            }
            if ((reference == "HiSet"))
            {
                return new HiSetProxy(this);
            }
            if ((reference == "MinOpTmms"))
            {
                return new MinOpTmmsProxy(this);
            }
            if ((reference == "MaxOpTmms"))
            {
                return new MaxOpTmmsProxy(this);
            }
            if ((reference == "RstMod"))
            {
                return new RstModProxy(this);
            }
            if ((reference == "RsDiTmms"))
            {
                return new RsDiTmmsProxy(this);
            }
            if ((reference == "TmACrv"))
            {
                return new TmACrvProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PDIF")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PDIF class
        /// </summary>
        public class PDIFReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PDIF _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PDIFReferencedElementsCollection(PDIF parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmASt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DifAClc != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RstA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LinCapac != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LoSet != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HiSet != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinOpTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxOpTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RstMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RsDiTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmACrv != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.TmAStChanged += this.PropagateValueChanges;
                this._parent.DifAClcChanged += this.PropagateValueChanges;
                this._parent.RstAChanged += this.PropagateValueChanges;
                this._parent.LinCapacChanged += this.PropagateValueChanges;
                this._parent.LoSetChanged += this.PropagateValueChanges;
                this._parent.HiSetChanged += this.PropagateValueChanges;
                this._parent.MinOpTmmsChanged += this.PropagateValueChanges;
                this._parent.MaxOpTmmsChanged += this.PropagateValueChanges;
                this._parent.RstModChanged += this.PropagateValueChanges;
                this._parent.RsDiTmmsChanged += this.PropagateValueChanges;
                this._parent.TmACrvChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.TmAStChanged -= this.PropagateValueChanges;
                this._parent.DifAClcChanged -= this.PropagateValueChanges;
                this._parent.RstAChanged -= this.PropagateValueChanges;
                this._parent.LinCapacChanged -= this.PropagateValueChanges;
                this._parent.LoSetChanged -= this.PropagateValueChanges;
                this._parent.HiSetChanged -= this.PropagateValueChanges;
                this._parent.MinOpTmmsChanged -= this.PropagateValueChanges;
                this._parent.MaxOpTmmsChanged -= this.PropagateValueChanges;
                this._parent.RstModChanged -= this.PropagateValueChanges;
                this._parent.RsDiTmmsChanged -= this.PropagateValueChanges;
                this._parent.TmACrvChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.TmASt == null))
                {
                    ICSD tmAStCasted = item.As<ICSD>();
                    if ((tmAStCasted != null))
                    {
                        this._parent.TmASt = tmAStCasted;
                        return;
                    }
                }
                if ((this._parent.DifAClc == null))
                {
                    IWYE difAClcCasted = item.As<IWYE>();
                    if ((difAClcCasted != null))
                    {
                        this._parent.DifAClc = difAClcCasted;
                        return;
                    }
                }
                if ((this._parent.RstA == null))
                {
                    IWYE rstACasted = item.As<IWYE>();
                    if ((rstACasted != null))
                    {
                        this._parent.RstA = rstACasted;
                        return;
                    }
                }
                if ((this._parent.LinCapac == null))
                {
                    IASG linCapacCasted = item.As<IASG>();
                    if ((linCapacCasted != null))
                    {
                        this._parent.LinCapac = linCapacCasted;
                        return;
                    }
                }
                if ((this._parent.LoSet == null))
                {
                    IING loSetCasted = item.As<IING>();
                    if ((loSetCasted != null))
                    {
                        this._parent.LoSet = loSetCasted;
                        return;
                    }
                }
                if ((this._parent.HiSet == null))
                {
                    IING hiSetCasted = item.As<IING>();
                    if ((hiSetCasted != null))
                    {
                        this._parent.HiSet = hiSetCasted;
                        return;
                    }
                }
                if ((this._parent.MinOpTmms == null))
                {
                    IING minOpTmmsCasted = item.As<IING>();
                    if ((minOpTmmsCasted != null))
                    {
                        this._parent.MinOpTmms = minOpTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.MaxOpTmms == null))
                {
                    IING maxOpTmmsCasted = item.As<IING>();
                    if ((maxOpTmmsCasted != null))
                    {
                        this._parent.MaxOpTmms = maxOpTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.RstMod == null))
                {
                    IING rstModCasted = item.As<IING>();
                    if ((rstModCasted != null))
                    {
                        this._parent.RstMod = rstModCasted;
                        return;
                    }
                }
                if ((this._parent.RsDiTmms == null))
                {
                    IING rsDiTmmsCasted = item.As<IING>();
                    if ((rsDiTmmsCasted != null))
                    {
                        this._parent.RsDiTmms = rsDiTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.TmACrv == null))
                {
                    ICURVE tmACrvCasted = item.As<ICURVE>();
                    if ((tmACrvCasted != null))
                    {
                        this._parent.TmACrv = tmACrvCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Str = null;
                this._parent.Op = null;
                this._parent.TmASt = null;
                this._parent.DifAClc = null;
                this._parent.RstA = null;
                this._parent.LinCapac = null;
                this._parent.LoSet = null;
                this._parent.HiSet = null;
                this._parent.MinOpTmms = null;
                this._parent.MaxOpTmms = null;
                this._parent.RstMod = null;
                this._parent.RsDiTmms = null;
                this._parent.TmACrv = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.TmASt))
                {
                    return true;
                }
                if ((item == this._parent.DifAClc))
                {
                    return true;
                }
                if ((item == this._parent.RstA))
                {
                    return true;
                }
                if ((item == this._parent.LinCapac))
                {
                    return true;
                }
                if ((item == this._parent.LoSet))
                {
                    return true;
                }
                if ((item == this._parent.HiSet))
                {
                    return true;
                }
                if ((item == this._parent.MinOpTmms))
                {
                    return true;
                }
                if ((item == this._parent.MaxOpTmms))
                {
                    return true;
                }
                if ((item == this._parent.RstMod))
                {
                    return true;
                }
                if ((item == this._parent.RsDiTmms))
                {
                    return true;
                }
                if ((item == this._parent.TmACrv))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmASt != null))
                {
                    array[arrayIndex] = this._parent.TmASt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DifAClc != null))
                {
                    array[arrayIndex] = this._parent.DifAClc;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RstA != null))
                {
                    array[arrayIndex] = this._parent.RstA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LinCapac != null))
                {
                    array[arrayIndex] = this._parent.LinCapac;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LoSet != null))
                {
                    array[arrayIndex] = this._parent.LoSet;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HiSet != null))
                {
                    array[arrayIndex] = this._parent.HiSet;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinOpTmms != null))
                {
                    array[arrayIndex] = this._parent.MinOpTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxOpTmms != null))
                {
                    array[arrayIndex] = this._parent.MaxOpTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RstMod != null))
                {
                    array[arrayIndex] = this._parent.RstMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RsDiTmms != null))
                {
                    array[arrayIndex] = this._parent.RsDiTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmACrv != null))
                {
                    array[arrayIndex] = this._parent.TmACrv;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.TmASt == item))
                {
                    this._parent.TmASt = null;
                    return true;
                }
                if ((this._parent.DifAClc == item))
                {
                    this._parent.DifAClc = null;
                    return true;
                }
                if ((this._parent.RstA == item))
                {
                    this._parent.RstA = null;
                    return true;
                }
                if ((this._parent.LinCapac == item))
                {
                    this._parent.LinCapac = null;
                    return true;
                }
                if ((this._parent.LoSet == item))
                {
                    this._parent.LoSet = null;
                    return true;
                }
                if ((this._parent.HiSet == item))
                {
                    this._parent.HiSet = null;
                    return true;
                }
                if ((this._parent.MinOpTmms == item))
                {
                    this._parent.MinOpTmms = null;
                    return true;
                }
                if ((this._parent.MaxOpTmms == item))
                {
                    this._parent.MaxOpTmms = null;
                    return true;
                }
                if ((this._parent.RstMod == item))
                {
                    this._parent.RstMod = null;
                    return true;
                }
                if ((this._parent.RsDiTmms == item))
                {
                    this._parent.RsDiTmms = null;
                    return true;
                }
                if ((this._parent.TmACrv == item))
                {
                    this._parent.TmACrv = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Str).Concat(this._parent.Op).Concat(this._parent.TmASt).Concat(this._parent.DifAClc).Concat(this._parent.RstA).Concat(this._parent.LinCapac).Concat(this._parent.LoSet).Concat(this._parent.HiSet).Concat(this._parent.MinOpTmms).Concat(this._parent.MaxOpTmms).Concat(this._parent.RstMod).Concat(this._parent.RsDiTmms).Concat(this._parent.TmACrv).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IPDIF, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IPDIF modelElement) : 
                    base(modelElement, "Str")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IPDIF, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IPDIF modelElement) : 
                    base(modelElement, "Op")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmASt property
        /// </summary>
        private sealed class TmAStProxy : ModelPropertyChange<IPDIF, ICSD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmAStProxy(IPDIF modelElement) : 
                    base(modelElement, "TmASt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICSD Value
            {
                get
                {
                    return this.ModelElement.TmASt;
                }
                set
                {
                    this.ModelElement.TmASt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DifAClc property
        /// </summary>
        private sealed class DifAClcProxy : ModelPropertyChange<IPDIF, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DifAClcProxy(IPDIF modelElement) : 
                    base(modelElement, "DifAClc")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.DifAClc;
                }
                set
                {
                    this.ModelElement.DifAClc = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RstA property
        /// </summary>
        private sealed class RstAProxy : ModelPropertyChange<IPDIF, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RstAProxy(IPDIF modelElement) : 
                    base(modelElement, "RstA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.RstA;
                }
                set
                {
                    this.ModelElement.RstA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LinCapac property
        /// </summary>
        private sealed class LinCapacProxy : ModelPropertyChange<IPDIF, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LinCapacProxy(IPDIF modelElement) : 
                    base(modelElement, "LinCapac")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LinCapac;
                }
                set
                {
                    this.ModelElement.LinCapac = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LoSet property
        /// </summary>
        private sealed class LoSetProxy : ModelPropertyChange<IPDIF, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoSetProxy(IPDIF modelElement) : 
                    base(modelElement, "LoSet")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.LoSet;
                }
                set
                {
                    this.ModelElement.LoSet = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HiSet property
        /// </summary>
        private sealed class HiSetProxy : ModelPropertyChange<IPDIF, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HiSetProxy(IPDIF modelElement) : 
                    base(modelElement, "HiSet")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.HiSet;
                }
                set
                {
                    this.ModelElement.HiSet = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MinOpTmms property
        /// </summary>
        private sealed class MinOpTmmsProxy : ModelPropertyChange<IPDIF, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinOpTmmsProxy(IPDIF modelElement) : 
                    base(modelElement, "MinOpTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MinOpTmms;
                }
                set
                {
                    this.ModelElement.MinOpTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxOpTmms property
        /// </summary>
        private sealed class MaxOpTmmsProxy : ModelPropertyChange<IPDIF, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxOpTmmsProxy(IPDIF modelElement) : 
                    base(modelElement, "MaxOpTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MaxOpTmms;
                }
                set
                {
                    this.ModelElement.MaxOpTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RstMod property
        /// </summary>
        private sealed class RstModProxy : ModelPropertyChange<IPDIF, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RstModProxy(IPDIF modelElement) : 
                    base(modelElement, "RstMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RstMod;
                }
                set
                {
                    this.ModelElement.RstMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RsDiTmms property
        /// </summary>
        private sealed class RsDiTmmsProxy : ModelPropertyChange<IPDIF, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RsDiTmmsProxy(IPDIF modelElement) : 
                    base(modelElement, "RsDiTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RsDiTmms;
                }
                set
                {
                    this.ModelElement.RsDiTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmACrv property
        /// </summary>
        private sealed class TmACrvProxy : ModelPropertyChange<IPDIF, ICURVE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmACrvProxy(IPDIF modelElement) : 
                    base(modelElement, "TmACrv")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICURVE Value
            {
                get
                {
                    return this.ModelElement.TmACrv;
                }
                set
                {
                    this.ModelElement.TmACrv = value;
                }
            }
        }
    }
}

