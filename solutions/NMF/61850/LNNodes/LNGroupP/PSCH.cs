using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PSCH class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PSCH")]
    public partial class PSCH : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPSCH, IModelElement
    {
        
        private static Lazy<ITypedElement> _proTxReference = new Lazy<ITypedElement>(RetrieveProTxReference);
        
        /// <summary>
        /// The backing field for the ProTx property
        /// </summary>
        private ISPS _proTx;
        
        private static Lazy<ITypedElement> _proRxReference = new Lazy<ITypedElement>(RetrieveProRxReference);
        
        /// <summary>
        /// The backing field for the ProRx property
        /// </summary>
        private ISPS _proRx;
        
        private static Lazy<ITypedElement> _strReference = new Lazy<ITypedElement>(RetrieveStrReference);
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        private static Lazy<ITypedElement> _opReference = new Lazy<ITypedElement>(RetrieveOpReference);
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        private static Lazy<ITypedElement> _carRxReference = new Lazy<ITypedElement>(RetrieveCarRxReference);
        
        /// <summary>
        /// The backing field for the CarRx property
        /// </summary>
        private IACT _carRx;
        
        private static Lazy<ITypedElement> _losOfGrdReference = new Lazy<ITypedElement>(RetrieveLosOfGrdReference);
        
        /// <summary>
        /// The backing field for the LosOfGrd property
        /// </summary>
        private ISPS _losOfGrd;
        
        private static Lazy<ITypedElement> _echoReference = new Lazy<ITypedElement>(RetrieveEchoReference);
        
        /// <summary>
        /// The backing field for the Echo property
        /// </summary>
        private IACT _echo;
        
        private static Lazy<ITypedElement> _weiOpReference = new Lazy<ITypedElement>(RetrieveWeiOpReference);
        
        /// <summary>
        /// The backing field for the WeiOp property
        /// </summary>
        private IACT _weiOp;
        
        private static Lazy<ITypedElement> _rvABlkReference = new Lazy<ITypedElement>(RetrieveRvABlkReference);
        
        /// <summary>
        /// The backing field for the RvABlk property
        /// </summary>
        private IACT _rvABlk;
        
        private static Lazy<ITypedElement> _grdRxReference = new Lazy<ITypedElement>(RetrieveGrdRxReference);
        
        /// <summary>
        /// The backing field for the GrdRx property
        /// </summary>
        private ISPS _grdRx;
        
        private static Lazy<ITypedElement> _schTypReference = new Lazy<ITypedElement>(RetrieveSchTypReference);
        
        /// <summary>
        /// The backing field for the SchTyp property
        /// </summary>
        private IING _schTyp;
        
        private static Lazy<ITypedElement> _opDlTmmsReference = new Lazy<ITypedElement>(RetrieveOpDlTmmsReference);
        
        /// <summary>
        /// The backing field for the OpDlTmms property
        /// </summary>
        private IING _opDlTmms;
        
        private static Lazy<ITypedElement> _crdTmmsReference = new Lazy<ITypedElement>(RetrieveCrdTmmsReference);
        
        /// <summary>
        /// The backing field for the CrdTmms property
        /// </summary>
        private IING _crdTmms;
        
        private static Lazy<ITypedElement> _durTmmsReference = new Lazy<ITypedElement>(RetrieveDurTmmsReference);
        
        /// <summary>
        /// The backing field for the DurTmms property
        /// </summary>
        private IING _durTmms;
        
        private static Lazy<ITypedElement> _unBlkModReference = new Lazy<ITypedElement>(RetrieveUnBlkModReference);
        
        /// <summary>
        /// The backing field for the UnBlkMod property
        /// </summary>
        private IING _unBlkMod;
        
        private static Lazy<ITypedElement> _secTmmsReference = new Lazy<ITypedElement>(RetrieveSecTmmsReference);
        
        /// <summary>
        /// The backing field for the SecTmms property
        /// </summary>
        private IING _secTmms;
        
        private static Lazy<ITypedElement> _weiModReference = new Lazy<ITypedElement>(RetrieveWeiModReference);
        
        /// <summary>
        /// The backing field for the WeiMod property
        /// </summary>
        private IING _weiMod;
        
        private static Lazy<ITypedElement> _weiTmmsReference = new Lazy<ITypedElement>(RetrieveWeiTmmsReference);
        
        /// <summary>
        /// The backing field for the WeiTmms property
        /// </summary>
        private IING _weiTmms;
        
        private static Lazy<ITypedElement> _pPVValReference = new Lazy<ITypedElement>(RetrievePPVValReference);
        
        /// <summary>
        /// The backing field for the PPVVal property
        /// </summary>
        private IASG _pPVVal;
        
        private static Lazy<ITypedElement> _phGndValReference = new Lazy<ITypedElement>(RetrievePhGndValReference);
        
        /// <summary>
        /// The backing field for the PhGndVal property
        /// </summary>
        private IASG _phGndVal;
        
        private static Lazy<ITypedElement> _rvAModReference = new Lazy<ITypedElement>(RetrieveRvAModReference);
        
        /// <summary>
        /// The backing field for the RvAMod property
        /// </summary>
        private IING _rvAMod;
        
        private static Lazy<ITypedElement> _rvATmmsReference = new Lazy<ITypedElement>(RetrieveRvATmmsReference);
        
        /// <summary>
        /// The backing field for the RvATmms property
        /// </summary>
        private IING _rvATmms;
        
        private static Lazy<ITypedElement> _rvRsTmmsReference = new Lazy<ITypedElement>(RetrieveRvRsTmmsReference);
        
        /// <summary>
        /// The backing field for the RvRsTmms property
        /// </summary>
        private IING _rvRsTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ProTx property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS ProTx
        {
            get
            {
                return this._proTx;
            }
            set
            {
                if ((this._proTx != value))
                {
                    ISPS old = this._proTx;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProTxChanging(e);
                    this.OnPropertyChanging("ProTx", e, _proTxReference);
                    this._proTx = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetProTx;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetProTx;
                    }
                    this.OnProTxChanged(e);
                    this.OnPropertyChanged("ProTx", e, _proTxReference);
                }
            }
        }
        
        /// <summary>
        /// The ProRx property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS ProRx
        {
            get
            {
                return this._proRx;
            }
            set
            {
                if ((this._proRx != value))
                {
                    ISPS old = this._proRx;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProRxChanging(e);
                    this.OnPropertyChanging("ProRx", e, _proRxReference);
                    this._proRx = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetProRx;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetProRx;
                    }
                    this.OnProRxChanged(e);
                    this.OnPropertyChanged("ProRx", e, _proRxReference);
                }
            }
        }
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e, _strReference);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e, _strReference);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e, _opReference);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e, _opReference);
                }
            }
        }
        
        /// <summary>
        /// The CarRx property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT CarRx
        {
            get
            {
                return this._carRx;
            }
            set
            {
                if ((this._carRx != value))
                {
                    IACT old = this._carRx;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCarRxChanging(e);
                    this.OnPropertyChanging("CarRx", e, _carRxReference);
                    this._carRx = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCarRx;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCarRx;
                    }
                    this.OnCarRxChanged(e);
                    this.OnPropertyChanged("CarRx", e, _carRxReference);
                }
            }
        }
        
        /// <summary>
        /// The LosOfGrd property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS LosOfGrd
        {
            get
            {
                return this._losOfGrd;
            }
            set
            {
                if ((this._losOfGrd != value))
                {
                    ISPS old = this._losOfGrd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLosOfGrdChanging(e);
                    this.OnPropertyChanging("LosOfGrd", e, _losOfGrdReference);
                    this._losOfGrd = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLosOfGrd;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLosOfGrd;
                    }
                    this.OnLosOfGrdChanged(e);
                    this.OnPropertyChanged("LosOfGrd", e, _losOfGrdReference);
                }
            }
        }
        
        /// <summary>
        /// The Echo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Echo
        {
            get
            {
                return this._echo;
            }
            set
            {
                if ((this._echo != value))
                {
                    IACT old = this._echo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEchoChanging(e);
                    this.OnPropertyChanging("Echo", e, _echoReference);
                    this._echo = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEcho;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEcho;
                    }
                    this.OnEchoChanged(e);
                    this.OnPropertyChanged("Echo", e, _echoReference);
                }
            }
        }
        
        /// <summary>
        /// The WeiOp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT WeiOp
        {
            get
            {
                return this._weiOp;
            }
            set
            {
                if ((this._weiOp != value))
                {
                    IACT old = this._weiOp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWeiOpChanging(e);
                    this.OnPropertyChanging("WeiOp", e, _weiOpReference);
                    this._weiOp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetWeiOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetWeiOp;
                    }
                    this.OnWeiOpChanged(e);
                    this.OnPropertyChanged("WeiOp", e, _weiOpReference);
                }
            }
        }
        
        /// <summary>
        /// The RvABlk property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT RvABlk
        {
            get
            {
                return this._rvABlk;
            }
            set
            {
                if ((this._rvABlk != value))
                {
                    IACT old = this._rvABlk;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRvABlkChanging(e);
                    this.OnPropertyChanging("RvABlk", e, _rvABlkReference);
                    this._rvABlk = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRvABlk;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRvABlk;
                    }
                    this.OnRvABlkChanged(e);
                    this.OnPropertyChanged("RvABlk", e, _rvABlkReference);
                }
            }
        }
        
        /// <summary>
        /// The GrdRx property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS GrdRx
        {
            get
            {
                return this._grdRx;
            }
            set
            {
                if ((this._grdRx != value))
                {
                    ISPS old = this._grdRx;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGrdRxChanging(e);
                    this.OnPropertyChanging("GrdRx", e, _grdRxReference);
                    this._grdRx = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGrdRx;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGrdRx;
                    }
                    this.OnGrdRxChanged(e);
                    this.OnPropertyChanged("GrdRx", e, _grdRxReference);
                }
            }
        }
        
        /// <summary>
        /// The SchTyp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING SchTyp
        {
            get
            {
                return this._schTyp;
            }
            set
            {
                if ((this._schTyp != value))
                {
                    IING old = this._schTyp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSchTypChanging(e);
                    this.OnPropertyChanging("SchTyp", e, _schTypReference);
                    this._schTyp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSchTyp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSchTyp;
                    }
                    this.OnSchTypChanged(e);
                    this.OnPropertyChanged("SchTyp", e, _schTypReference);
                }
            }
        }
        
        /// <summary>
        /// The OpDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING OpDlTmms
        {
            get
            {
                return this._opDlTmms;
            }
            set
            {
                if ((this._opDlTmms != value))
                {
                    IING old = this._opDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpDlTmmsChanging(e);
                    this.OnPropertyChanging("OpDlTmms", e, _opDlTmmsReference);
                    this._opDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpDlTmms;
                    }
                    this.OnOpDlTmmsChanged(e);
                    this.OnPropertyChanged("OpDlTmms", e, _opDlTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The CrdTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING CrdTmms
        {
            get
            {
                return this._crdTmms;
            }
            set
            {
                if ((this._crdTmms != value))
                {
                    IING old = this._crdTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCrdTmmsChanging(e);
                    this.OnPropertyChanging("CrdTmms", e, _crdTmmsReference);
                    this._crdTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCrdTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCrdTmms;
                    }
                    this.OnCrdTmmsChanged(e);
                    this.OnPropertyChanged("CrdTmms", e, _crdTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The DurTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING DurTmms
        {
            get
            {
                return this._durTmms;
            }
            set
            {
                if ((this._durTmms != value))
                {
                    IING old = this._durTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurTmmsChanging(e);
                    this.OnPropertyChanging("DurTmms", e, _durTmmsReference);
                    this._durTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDurTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDurTmms;
                    }
                    this.OnDurTmmsChanged(e);
                    this.OnPropertyChanged("DurTmms", e, _durTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The UnBlkMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING UnBlkMod
        {
            get
            {
                return this._unBlkMod;
            }
            set
            {
                if ((this._unBlkMod != value))
                {
                    IING old = this._unBlkMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnBlkModChanging(e);
                    this.OnPropertyChanging("UnBlkMod", e, _unBlkModReference);
                    this._unBlkMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUnBlkMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUnBlkMod;
                    }
                    this.OnUnBlkModChanged(e);
                    this.OnPropertyChanged("UnBlkMod", e, _unBlkModReference);
                }
            }
        }
        
        /// <summary>
        /// The SecTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING SecTmms
        {
            get
            {
                return this._secTmms;
            }
            set
            {
                if ((this._secTmms != value))
                {
                    IING old = this._secTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSecTmmsChanging(e);
                    this.OnPropertyChanging("SecTmms", e, _secTmmsReference);
                    this._secTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSecTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSecTmms;
                    }
                    this.OnSecTmmsChanged(e);
                    this.OnPropertyChanged("SecTmms", e, _secTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The WeiMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING WeiMod
        {
            get
            {
                return this._weiMod;
            }
            set
            {
                if ((this._weiMod != value))
                {
                    IING old = this._weiMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWeiModChanging(e);
                    this.OnPropertyChanging("WeiMod", e, _weiModReference);
                    this._weiMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetWeiMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetWeiMod;
                    }
                    this.OnWeiModChanged(e);
                    this.OnPropertyChanged("WeiMod", e, _weiModReference);
                }
            }
        }
        
        /// <summary>
        /// The WeiTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING WeiTmms
        {
            get
            {
                return this._weiTmms;
            }
            set
            {
                if ((this._weiTmms != value))
                {
                    IING old = this._weiTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWeiTmmsChanging(e);
                    this.OnPropertyChanging("WeiTmms", e, _weiTmmsReference);
                    this._weiTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetWeiTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetWeiTmms;
                    }
                    this.OnWeiTmmsChanged(e);
                    this.OnPropertyChanged("WeiTmms", e, _weiTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The PPVVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG PPVVal
        {
            get
            {
                return this._pPVVal;
            }
            set
            {
                if ((this._pPVVal != value))
                {
                    IASG old = this._pPVVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPPVValChanging(e);
                    this.OnPropertyChanging("PPVVal", e, _pPVValReference);
                    this._pPVVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPPVVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPPVVal;
                    }
                    this.OnPPVValChanged(e);
                    this.OnPropertyChanged("PPVVal", e, _pPVValReference);
                }
            }
        }
        
        /// <summary>
        /// The PhGndVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG PhGndVal
        {
            get
            {
                return this._phGndVal;
            }
            set
            {
                if ((this._phGndVal != value))
                {
                    IASG old = this._phGndVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhGndValChanging(e);
                    this.OnPropertyChanging("PhGndVal", e, _phGndValReference);
                    this._phGndVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhGndVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhGndVal;
                    }
                    this.OnPhGndValChanged(e);
                    this.OnPropertyChanged("PhGndVal", e, _phGndValReference);
                }
            }
        }
        
        /// <summary>
        /// The RvAMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RvAMod
        {
            get
            {
                return this._rvAMod;
            }
            set
            {
                if ((this._rvAMod != value))
                {
                    IING old = this._rvAMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRvAModChanging(e);
                    this.OnPropertyChanging("RvAMod", e, _rvAModReference);
                    this._rvAMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRvAMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRvAMod;
                    }
                    this.OnRvAModChanged(e);
                    this.OnPropertyChanged("RvAMod", e, _rvAModReference);
                }
            }
        }
        
        /// <summary>
        /// The RvATmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RvATmms
        {
            get
            {
                return this._rvATmms;
            }
            set
            {
                if ((this._rvATmms != value))
                {
                    IING old = this._rvATmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRvATmmsChanging(e);
                    this.OnPropertyChanging("RvATmms", e, _rvATmmsReference);
                    this._rvATmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRvATmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRvATmms;
                    }
                    this.OnRvATmmsChanged(e);
                    this.OnPropertyChanged("RvATmms", e, _rvATmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The RvRsTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RvRsTmms
        {
            get
            {
                return this._rvRsTmms;
            }
            set
            {
                if ((this._rvRsTmms != value))
                {
                    IING old = this._rvRsTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRvRsTmmsChanging(e);
                    this.OnPropertyChanging("RvRsTmms", e, _rvRsTmmsReference);
                    this._rvRsTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRvRsTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRvRsTmms;
                    }
                    this.OnRvRsTmmsChanged(e);
                    this.OnPropertyChanged("RvRsTmms", e, _rvRsTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PSCHReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PSCH")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ProTx property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProTxChanging;
        
        /// <summary>
        /// Gets fired when the ProTx property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProTxChanged;
        
        /// <summary>
        /// Gets fired before the ProRx property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProRxChanging;
        
        /// <summary>
        /// Gets fired when the ProRx property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProRxChanged;
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the CarRx property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CarRxChanging;
        
        /// <summary>
        /// Gets fired when the CarRx property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CarRxChanged;
        
        /// <summary>
        /// Gets fired before the LosOfGrd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LosOfGrdChanging;
        
        /// <summary>
        /// Gets fired when the LosOfGrd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LosOfGrdChanged;
        
        /// <summary>
        /// Gets fired before the Echo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EchoChanging;
        
        /// <summary>
        /// Gets fired when the Echo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EchoChanged;
        
        /// <summary>
        /// Gets fired before the WeiOp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeiOpChanging;
        
        /// <summary>
        /// Gets fired when the WeiOp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeiOpChanged;
        
        /// <summary>
        /// Gets fired before the RvABlk property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RvABlkChanging;
        
        /// <summary>
        /// Gets fired when the RvABlk property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RvABlkChanged;
        
        /// <summary>
        /// Gets fired before the GrdRx property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GrdRxChanging;
        
        /// <summary>
        /// Gets fired when the GrdRx property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GrdRxChanged;
        
        /// <summary>
        /// Gets fired before the SchTyp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SchTypChanging;
        
        /// <summary>
        /// Gets fired when the SchTyp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SchTypChanged;
        
        /// <summary>
        /// Gets fired before the OpDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the OpDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanged;
        
        /// <summary>
        /// Gets fired before the CrdTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CrdTmmsChanging;
        
        /// <summary>
        /// Gets fired when the CrdTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CrdTmmsChanged;
        
        /// <summary>
        /// Gets fired before the DurTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurTmmsChanging;
        
        /// <summary>
        /// Gets fired when the DurTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurTmmsChanged;
        
        /// <summary>
        /// Gets fired before the UnBlkMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnBlkModChanging;
        
        /// <summary>
        /// Gets fired when the UnBlkMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnBlkModChanged;
        
        /// <summary>
        /// Gets fired before the SecTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SecTmmsChanging;
        
        /// <summary>
        /// Gets fired when the SecTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SecTmmsChanged;
        
        /// <summary>
        /// Gets fired before the WeiMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeiModChanging;
        
        /// <summary>
        /// Gets fired when the WeiMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeiModChanged;
        
        /// <summary>
        /// Gets fired before the WeiTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeiTmmsChanging;
        
        /// <summary>
        /// Gets fired when the WeiTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeiTmmsChanged;
        
        /// <summary>
        /// Gets fired before the PPVVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PPVValChanging;
        
        /// <summary>
        /// Gets fired when the PPVVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PPVValChanged;
        
        /// <summary>
        /// Gets fired before the PhGndVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhGndValChanging;
        
        /// <summary>
        /// Gets fired when the PhGndVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhGndValChanged;
        
        /// <summary>
        /// Gets fired before the RvAMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RvAModChanging;
        
        /// <summary>
        /// Gets fired when the RvAMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RvAModChanged;
        
        /// <summary>
        /// Gets fired before the RvATmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RvATmmsChanging;
        
        /// <summary>
        /// Gets fired when the RvATmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RvATmmsChanged;
        
        /// <summary>
        /// Gets fired before the RvRsTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RvRsTmmsChanging;
        
        /// <summary>
        /// Gets fired when the RvRsTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RvRsTmmsChanged;
        
        private static ITypedElement RetrieveProTxReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("ProTx")));
        }
        
        /// <summary>
        /// Raises the ProTxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProTxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProTxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProTxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProTxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProTxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ProTx property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProTx(object sender, System.EventArgs eventArgs)
        {
            this.ProTx = null;
        }
        
        private static ITypedElement RetrieveProRxReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("ProRx")));
        }
        
        /// <summary>
        /// Raises the ProRxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProRxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProRxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProRxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProRxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProRxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ProRx property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProRx(object sender, System.EventArgs eventArgs)
        {
            this.ProRx = null;
        }
        
        private static ITypedElement RetrieveStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("Str")));
        }
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        private static ITypedElement RetrieveOpReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("Op")));
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        private static ITypedElement RetrieveCarRxReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("CarRx")));
        }
        
        /// <summary>
        /// Raises the CarRxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCarRxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CarRxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CarRxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCarRxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CarRxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CarRx property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCarRx(object sender, System.EventArgs eventArgs)
        {
            this.CarRx = null;
        }
        
        private static ITypedElement RetrieveLosOfGrdReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("LosOfGrd")));
        }
        
        /// <summary>
        /// Raises the LosOfGrdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLosOfGrdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LosOfGrdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LosOfGrdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLosOfGrdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LosOfGrdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LosOfGrd property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLosOfGrd(object sender, System.EventArgs eventArgs)
        {
            this.LosOfGrd = null;
        }
        
        private static ITypedElement RetrieveEchoReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("Echo")));
        }
        
        /// <summary>
        /// Raises the EchoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEchoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EchoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EchoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEchoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EchoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Echo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEcho(object sender, System.EventArgs eventArgs)
        {
            this.Echo = null;
        }
        
        private static ITypedElement RetrieveWeiOpReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("WeiOp")));
        }
        
        /// <summary>
        /// Raises the WeiOpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeiOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeiOpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WeiOpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeiOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeiOpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WeiOp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWeiOp(object sender, System.EventArgs eventArgs)
        {
            this.WeiOp = null;
        }
        
        private static ITypedElement RetrieveRvABlkReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("RvABlk")));
        }
        
        /// <summary>
        /// Raises the RvABlkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRvABlkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RvABlkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RvABlkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRvABlkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RvABlkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RvABlk property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRvABlk(object sender, System.EventArgs eventArgs)
        {
            this.RvABlk = null;
        }
        
        private static ITypedElement RetrieveGrdRxReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("GrdRx")));
        }
        
        /// <summary>
        /// Raises the GrdRxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGrdRxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GrdRxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GrdRxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGrdRxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GrdRxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GrdRx property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGrdRx(object sender, System.EventArgs eventArgs)
        {
            this.GrdRx = null;
        }
        
        private static ITypedElement RetrieveSchTypReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("SchTyp")));
        }
        
        /// <summary>
        /// Raises the SchTypChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSchTypChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SchTypChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SchTypChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSchTypChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SchTypChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SchTyp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSchTyp(object sender, System.EventArgs eventArgs)
        {
            this.SchTyp = null;
        }
        
        private static ITypedElement RetrieveOpDlTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("OpDlTmms")));
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.OpDlTmms = null;
        }
        
        private static ITypedElement RetrieveCrdTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("CrdTmms")));
        }
        
        /// <summary>
        /// Raises the CrdTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCrdTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CrdTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CrdTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCrdTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CrdTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CrdTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCrdTmms(object sender, System.EventArgs eventArgs)
        {
            this.CrdTmms = null;
        }
        
        private static ITypedElement RetrieveDurTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("DurTmms")));
        }
        
        /// <summary>
        /// Raises the DurTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DurTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDurTmms(object sender, System.EventArgs eventArgs)
        {
            this.DurTmms = null;
        }
        
        private static ITypedElement RetrieveUnBlkModReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("UnBlkMod")));
        }
        
        /// <summary>
        /// Raises the UnBlkModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnBlkModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnBlkModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnBlkModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnBlkModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnBlkModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the UnBlkMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnBlkMod(object sender, System.EventArgs eventArgs)
        {
            this.UnBlkMod = null;
        }
        
        private static ITypedElement RetrieveSecTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("SecTmms")));
        }
        
        /// <summary>
        /// Raises the SecTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SecTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SecTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SecTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SecTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSecTmms(object sender, System.EventArgs eventArgs)
        {
            this.SecTmms = null;
        }
        
        private static ITypedElement RetrieveWeiModReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("WeiMod")));
        }
        
        /// <summary>
        /// Raises the WeiModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeiModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeiModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WeiModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeiModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeiModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WeiMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWeiMod(object sender, System.EventArgs eventArgs)
        {
            this.WeiMod = null;
        }
        
        private static ITypedElement RetrieveWeiTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("WeiTmms")));
        }
        
        /// <summary>
        /// Raises the WeiTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeiTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeiTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WeiTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeiTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeiTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WeiTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWeiTmms(object sender, System.EventArgs eventArgs)
        {
            this.WeiTmms = null;
        }
        
        private static ITypedElement RetrievePPVValReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("PPVVal")));
        }
        
        /// <summary>
        /// Raises the PPVValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPPVValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PPVValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PPVValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPPVValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PPVValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PPVVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPPVVal(object sender, System.EventArgs eventArgs)
        {
            this.PPVVal = null;
        }
        
        private static ITypedElement RetrievePhGndValReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("PhGndVal")));
        }
        
        /// <summary>
        /// Raises the PhGndValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhGndValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhGndValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhGndValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhGndValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhGndValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhGndVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhGndVal(object sender, System.EventArgs eventArgs)
        {
            this.PhGndVal = null;
        }
        
        private static ITypedElement RetrieveRvAModReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("RvAMod")));
        }
        
        /// <summary>
        /// Raises the RvAModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRvAModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RvAModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RvAModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRvAModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RvAModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RvAMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRvAMod(object sender, System.EventArgs eventArgs)
        {
            this.RvAMod = null;
        }
        
        private static ITypedElement RetrieveRvATmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("RvATmms")));
        }
        
        /// <summary>
        /// Raises the RvATmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRvATmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RvATmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RvATmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRvATmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RvATmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RvATmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRvATmms(object sender, System.EventArgs eventArgs)
        {
            this.RvATmms = null;
        }
        
        private static ITypedElement RetrieveRvRsTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PSCH.ClassInstance)).Resolve("RvRsTmms")));
        }
        
        /// <summary>
        /// Raises the RvRsTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRvRsTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RvRsTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RvRsTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRvRsTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RvRsTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RvRsTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRvRsTmms(object sender, System.EventArgs eventArgs)
        {
            this.RvRsTmms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PROTX"))
            {
                this.ProTx = ((ISPS)(value));
                return;
            }
            if ((feature == "PRORX"))
            {
                this.ProRx = ((ISPS)(value));
                return;
            }
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "CARRX"))
            {
                this.CarRx = ((IACT)(value));
                return;
            }
            if ((feature == "LOSOFGRD"))
            {
                this.LosOfGrd = ((ISPS)(value));
                return;
            }
            if ((feature == "ECHO"))
            {
                this.Echo = ((IACT)(value));
                return;
            }
            if ((feature == "WEIOP"))
            {
                this.WeiOp = ((IACT)(value));
                return;
            }
            if ((feature == "RVABLK"))
            {
                this.RvABlk = ((IACT)(value));
                return;
            }
            if ((feature == "GRDRX"))
            {
                this.GrdRx = ((ISPS)(value));
                return;
            }
            if ((feature == "SCHTYP"))
            {
                this.SchTyp = ((IING)(value));
                return;
            }
            if ((feature == "OPDLTMMS"))
            {
                this.OpDlTmms = ((IING)(value));
                return;
            }
            if ((feature == "CRDTMMS"))
            {
                this.CrdTmms = ((IING)(value));
                return;
            }
            if ((feature == "DURTMMS"))
            {
                this.DurTmms = ((IING)(value));
                return;
            }
            if ((feature == "UNBLKMOD"))
            {
                this.UnBlkMod = ((IING)(value));
                return;
            }
            if ((feature == "SECTMMS"))
            {
                this.SecTmms = ((IING)(value));
                return;
            }
            if ((feature == "WEIMOD"))
            {
                this.WeiMod = ((IING)(value));
                return;
            }
            if ((feature == "WEITMMS"))
            {
                this.WeiTmms = ((IING)(value));
                return;
            }
            if ((feature == "PPVVAL"))
            {
                this.PPVVal = ((IASG)(value));
                return;
            }
            if ((feature == "PHGNDVAL"))
            {
                this.PhGndVal = ((IASG)(value));
                return;
            }
            if ((feature == "RVAMOD"))
            {
                this.RvAMod = ((IING)(value));
                return;
            }
            if ((feature == "RVATMMS"))
            {
                this.RvATmms = ((IING)(value));
                return;
            }
            if ((feature == "RVRSTMMS"))
            {
                this.RvRsTmms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ProTx"))
            {
                return new ProTxProxy(this);
            }
            if ((attribute == "ProRx"))
            {
                return new ProRxProxy(this);
            }
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "CarRx"))
            {
                return new CarRxProxy(this);
            }
            if ((attribute == "LosOfGrd"))
            {
                return new LosOfGrdProxy(this);
            }
            if ((attribute == "Echo"))
            {
                return new EchoProxy(this);
            }
            if ((attribute == "WeiOp"))
            {
                return new WeiOpProxy(this);
            }
            if ((attribute == "RvABlk"))
            {
                return new RvABlkProxy(this);
            }
            if ((attribute == "GrdRx"))
            {
                return new GrdRxProxy(this);
            }
            if ((attribute == "SchTyp"))
            {
                return new SchTypProxy(this);
            }
            if ((attribute == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((attribute == "CrdTmms"))
            {
                return new CrdTmmsProxy(this);
            }
            if ((attribute == "DurTmms"))
            {
                return new DurTmmsProxy(this);
            }
            if ((attribute == "UnBlkMod"))
            {
                return new UnBlkModProxy(this);
            }
            if ((attribute == "SecTmms"))
            {
                return new SecTmmsProxy(this);
            }
            if ((attribute == "WeiMod"))
            {
                return new WeiModProxy(this);
            }
            if ((attribute == "WeiTmms"))
            {
                return new WeiTmmsProxy(this);
            }
            if ((attribute == "PPVVal"))
            {
                return new PPVValProxy(this);
            }
            if ((attribute == "PhGndVal"))
            {
                return new PhGndValProxy(this);
            }
            if ((attribute == "RvAMod"))
            {
                return new RvAModProxy(this);
            }
            if ((attribute == "RvATmms"))
            {
                return new RvATmmsProxy(this);
            }
            if ((attribute == "RvRsTmms"))
            {
                return new RvRsTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ProTx"))
            {
                return new ProTxProxy(this);
            }
            if ((reference == "ProRx"))
            {
                return new ProRxProxy(this);
            }
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "CarRx"))
            {
                return new CarRxProxy(this);
            }
            if ((reference == "LosOfGrd"))
            {
                return new LosOfGrdProxy(this);
            }
            if ((reference == "Echo"))
            {
                return new EchoProxy(this);
            }
            if ((reference == "WeiOp"))
            {
                return new WeiOpProxy(this);
            }
            if ((reference == "RvABlk"))
            {
                return new RvABlkProxy(this);
            }
            if ((reference == "GrdRx"))
            {
                return new GrdRxProxy(this);
            }
            if ((reference == "SchTyp"))
            {
                return new SchTypProxy(this);
            }
            if ((reference == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((reference == "CrdTmms"))
            {
                return new CrdTmmsProxy(this);
            }
            if ((reference == "DurTmms"))
            {
                return new DurTmmsProxy(this);
            }
            if ((reference == "UnBlkMod"))
            {
                return new UnBlkModProxy(this);
            }
            if ((reference == "SecTmms"))
            {
                return new SecTmmsProxy(this);
            }
            if ((reference == "WeiMod"))
            {
                return new WeiModProxy(this);
            }
            if ((reference == "WeiTmms"))
            {
                return new WeiTmmsProxy(this);
            }
            if ((reference == "PPVVal"))
            {
                return new PPVValProxy(this);
            }
            if ((reference == "PhGndVal"))
            {
                return new PhGndValProxy(this);
            }
            if ((reference == "RvAMod"))
            {
                return new RvAModProxy(this);
            }
            if ((reference == "RvATmms"))
            {
                return new RvATmmsProxy(this);
            }
            if ((reference == "RvRsTmms"))
            {
                return new RvRsTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PSCH")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PSCH class
        /// </summary>
        public class PSCHReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PSCH _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PSCHReferencedElementsCollection(PSCH parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ProTx != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProRx != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CarRx != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LosOfGrd != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Echo != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.WeiOp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RvABlk != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GrdRx != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SchTyp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CrdTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DurTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.UnBlkMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SecTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.WeiMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.WeiTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PPVVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhGndVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RvAMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RvATmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RvRsTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ProTxChanged += this.PropagateValueChanges;
                this._parent.ProRxChanged += this.PropagateValueChanges;
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.CarRxChanged += this.PropagateValueChanges;
                this._parent.LosOfGrdChanged += this.PropagateValueChanges;
                this._parent.EchoChanged += this.PropagateValueChanges;
                this._parent.WeiOpChanged += this.PropagateValueChanges;
                this._parent.RvABlkChanged += this.PropagateValueChanges;
                this._parent.GrdRxChanged += this.PropagateValueChanges;
                this._parent.SchTypChanged += this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged += this.PropagateValueChanges;
                this._parent.CrdTmmsChanged += this.PropagateValueChanges;
                this._parent.DurTmmsChanged += this.PropagateValueChanges;
                this._parent.UnBlkModChanged += this.PropagateValueChanges;
                this._parent.SecTmmsChanged += this.PropagateValueChanges;
                this._parent.WeiModChanged += this.PropagateValueChanges;
                this._parent.WeiTmmsChanged += this.PropagateValueChanges;
                this._parent.PPVValChanged += this.PropagateValueChanges;
                this._parent.PhGndValChanged += this.PropagateValueChanges;
                this._parent.RvAModChanged += this.PropagateValueChanges;
                this._parent.RvATmmsChanged += this.PropagateValueChanges;
                this._parent.RvRsTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ProTxChanged -= this.PropagateValueChanges;
                this._parent.ProRxChanged -= this.PropagateValueChanges;
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.CarRxChanged -= this.PropagateValueChanges;
                this._parent.LosOfGrdChanged -= this.PropagateValueChanges;
                this._parent.EchoChanged -= this.PropagateValueChanges;
                this._parent.WeiOpChanged -= this.PropagateValueChanges;
                this._parent.RvABlkChanged -= this.PropagateValueChanges;
                this._parent.GrdRxChanged -= this.PropagateValueChanges;
                this._parent.SchTypChanged -= this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged -= this.PropagateValueChanges;
                this._parent.CrdTmmsChanged -= this.PropagateValueChanges;
                this._parent.DurTmmsChanged -= this.PropagateValueChanges;
                this._parent.UnBlkModChanged -= this.PropagateValueChanges;
                this._parent.SecTmmsChanged -= this.PropagateValueChanges;
                this._parent.WeiModChanged -= this.PropagateValueChanges;
                this._parent.WeiTmmsChanged -= this.PropagateValueChanges;
                this._parent.PPVValChanged -= this.PropagateValueChanges;
                this._parent.PhGndValChanged -= this.PropagateValueChanges;
                this._parent.RvAModChanged -= this.PropagateValueChanges;
                this._parent.RvATmmsChanged -= this.PropagateValueChanges;
                this._parent.RvRsTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ProTx == null))
                {
                    ISPS proTxCasted = item.As<ISPS>();
                    if ((proTxCasted != null))
                    {
                        this._parent.ProTx = proTxCasted;
                        return;
                    }
                }
                if ((this._parent.ProRx == null))
                {
                    ISPS proRxCasted = item.As<ISPS>();
                    if ((proRxCasted != null))
                    {
                        this._parent.ProRx = proRxCasted;
                        return;
                    }
                }
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.CarRx == null))
                {
                    IACT carRxCasted = item.As<IACT>();
                    if ((carRxCasted != null))
                    {
                        this._parent.CarRx = carRxCasted;
                        return;
                    }
                }
                if ((this._parent.LosOfGrd == null))
                {
                    ISPS losOfGrdCasted = item.As<ISPS>();
                    if ((losOfGrdCasted != null))
                    {
                        this._parent.LosOfGrd = losOfGrdCasted;
                        return;
                    }
                }
                if ((this._parent.Echo == null))
                {
                    IACT echoCasted = item.As<IACT>();
                    if ((echoCasted != null))
                    {
                        this._parent.Echo = echoCasted;
                        return;
                    }
                }
                if ((this._parent.WeiOp == null))
                {
                    IACT weiOpCasted = item.As<IACT>();
                    if ((weiOpCasted != null))
                    {
                        this._parent.WeiOp = weiOpCasted;
                        return;
                    }
                }
                if ((this._parent.RvABlk == null))
                {
                    IACT rvABlkCasted = item.As<IACT>();
                    if ((rvABlkCasted != null))
                    {
                        this._parent.RvABlk = rvABlkCasted;
                        return;
                    }
                }
                if ((this._parent.GrdRx == null))
                {
                    ISPS grdRxCasted = item.As<ISPS>();
                    if ((grdRxCasted != null))
                    {
                        this._parent.GrdRx = grdRxCasted;
                        return;
                    }
                }
                if ((this._parent.SchTyp == null))
                {
                    IING schTypCasted = item.As<IING>();
                    if ((schTypCasted != null))
                    {
                        this._parent.SchTyp = schTypCasted;
                        return;
                    }
                }
                if ((this._parent.OpDlTmms == null))
                {
                    IING opDlTmmsCasted = item.As<IING>();
                    if ((opDlTmmsCasted != null))
                    {
                        this._parent.OpDlTmms = opDlTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.CrdTmms == null))
                {
                    IING crdTmmsCasted = item.As<IING>();
                    if ((crdTmmsCasted != null))
                    {
                        this._parent.CrdTmms = crdTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.DurTmms == null))
                {
                    IING durTmmsCasted = item.As<IING>();
                    if ((durTmmsCasted != null))
                    {
                        this._parent.DurTmms = durTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.UnBlkMod == null))
                {
                    IING unBlkModCasted = item.As<IING>();
                    if ((unBlkModCasted != null))
                    {
                        this._parent.UnBlkMod = unBlkModCasted;
                        return;
                    }
                }
                if ((this._parent.SecTmms == null))
                {
                    IING secTmmsCasted = item.As<IING>();
                    if ((secTmmsCasted != null))
                    {
                        this._parent.SecTmms = secTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.WeiMod == null))
                {
                    IING weiModCasted = item.As<IING>();
                    if ((weiModCasted != null))
                    {
                        this._parent.WeiMod = weiModCasted;
                        return;
                    }
                }
                if ((this._parent.WeiTmms == null))
                {
                    IING weiTmmsCasted = item.As<IING>();
                    if ((weiTmmsCasted != null))
                    {
                        this._parent.WeiTmms = weiTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.PPVVal == null))
                {
                    IASG pPVValCasted = item.As<IASG>();
                    if ((pPVValCasted != null))
                    {
                        this._parent.PPVVal = pPVValCasted;
                        return;
                    }
                }
                if ((this._parent.PhGndVal == null))
                {
                    IASG phGndValCasted = item.As<IASG>();
                    if ((phGndValCasted != null))
                    {
                        this._parent.PhGndVal = phGndValCasted;
                        return;
                    }
                }
                if ((this._parent.RvAMod == null))
                {
                    IING rvAModCasted = item.As<IING>();
                    if ((rvAModCasted != null))
                    {
                        this._parent.RvAMod = rvAModCasted;
                        return;
                    }
                }
                if ((this._parent.RvATmms == null))
                {
                    IING rvATmmsCasted = item.As<IING>();
                    if ((rvATmmsCasted != null))
                    {
                        this._parent.RvATmms = rvATmmsCasted;
                        return;
                    }
                }
                if ((this._parent.RvRsTmms == null))
                {
                    IING rvRsTmmsCasted = item.As<IING>();
                    if ((rvRsTmmsCasted != null))
                    {
                        this._parent.RvRsTmms = rvRsTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ProTx = null;
                this._parent.ProRx = null;
                this._parent.Str = null;
                this._parent.Op = null;
                this._parent.CarRx = null;
                this._parent.LosOfGrd = null;
                this._parent.Echo = null;
                this._parent.WeiOp = null;
                this._parent.RvABlk = null;
                this._parent.GrdRx = null;
                this._parent.SchTyp = null;
                this._parent.OpDlTmms = null;
                this._parent.CrdTmms = null;
                this._parent.DurTmms = null;
                this._parent.UnBlkMod = null;
                this._parent.SecTmms = null;
                this._parent.WeiMod = null;
                this._parent.WeiTmms = null;
                this._parent.PPVVal = null;
                this._parent.PhGndVal = null;
                this._parent.RvAMod = null;
                this._parent.RvATmms = null;
                this._parent.RvRsTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ProTx))
                {
                    return true;
                }
                if ((item == this._parent.ProRx))
                {
                    return true;
                }
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.CarRx))
                {
                    return true;
                }
                if ((item == this._parent.LosOfGrd))
                {
                    return true;
                }
                if ((item == this._parent.Echo))
                {
                    return true;
                }
                if ((item == this._parent.WeiOp))
                {
                    return true;
                }
                if ((item == this._parent.RvABlk))
                {
                    return true;
                }
                if ((item == this._parent.GrdRx))
                {
                    return true;
                }
                if ((item == this._parent.SchTyp))
                {
                    return true;
                }
                if ((item == this._parent.OpDlTmms))
                {
                    return true;
                }
                if ((item == this._parent.CrdTmms))
                {
                    return true;
                }
                if ((item == this._parent.DurTmms))
                {
                    return true;
                }
                if ((item == this._parent.UnBlkMod))
                {
                    return true;
                }
                if ((item == this._parent.SecTmms))
                {
                    return true;
                }
                if ((item == this._parent.WeiMod))
                {
                    return true;
                }
                if ((item == this._parent.WeiTmms))
                {
                    return true;
                }
                if ((item == this._parent.PPVVal))
                {
                    return true;
                }
                if ((item == this._parent.PhGndVal))
                {
                    return true;
                }
                if ((item == this._parent.RvAMod))
                {
                    return true;
                }
                if ((item == this._parent.RvATmms))
                {
                    return true;
                }
                if ((item == this._parent.RvRsTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ProTx != null))
                {
                    array[arrayIndex] = this._parent.ProTx;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProRx != null))
                {
                    array[arrayIndex] = this._parent.ProRx;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CarRx != null))
                {
                    array[arrayIndex] = this._parent.CarRx;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LosOfGrd != null))
                {
                    array[arrayIndex] = this._parent.LosOfGrd;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Echo != null))
                {
                    array[arrayIndex] = this._parent.Echo;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.WeiOp != null))
                {
                    array[arrayIndex] = this._parent.WeiOp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RvABlk != null))
                {
                    array[arrayIndex] = this._parent.RvABlk;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GrdRx != null))
                {
                    array[arrayIndex] = this._parent.GrdRx;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SchTyp != null))
                {
                    array[arrayIndex] = this._parent.SchTyp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpDlTmms != null))
                {
                    array[arrayIndex] = this._parent.OpDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CrdTmms != null))
                {
                    array[arrayIndex] = this._parent.CrdTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DurTmms != null))
                {
                    array[arrayIndex] = this._parent.DurTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.UnBlkMod != null))
                {
                    array[arrayIndex] = this._parent.UnBlkMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SecTmms != null))
                {
                    array[arrayIndex] = this._parent.SecTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.WeiMod != null))
                {
                    array[arrayIndex] = this._parent.WeiMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.WeiTmms != null))
                {
                    array[arrayIndex] = this._parent.WeiTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PPVVal != null))
                {
                    array[arrayIndex] = this._parent.PPVVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhGndVal != null))
                {
                    array[arrayIndex] = this._parent.PhGndVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RvAMod != null))
                {
                    array[arrayIndex] = this._parent.RvAMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RvATmms != null))
                {
                    array[arrayIndex] = this._parent.RvATmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RvRsTmms != null))
                {
                    array[arrayIndex] = this._parent.RvRsTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ProTx == item))
                {
                    this._parent.ProTx = null;
                    return true;
                }
                if ((this._parent.ProRx == item))
                {
                    this._parent.ProRx = null;
                    return true;
                }
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.CarRx == item))
                {
                    this._parent.CarRx = null;
                    return true;
                }
                if ((this._parent.LosOfGrd == item))
                {
                    this._parent.LosOfGrd = null;
                    return true;
                }
                if ((this._parent.Echo == item))
                {
                    this._parent.Echo = null;
                    return true;
                }
                if ((this._parent.WeiOp == item))
                {
                    this._parent.WeiOp = null;
                    return true;
                }
                if ((this._parent.RvABlk == item))
                {
                    this._parent.RvABlk = null;
                    return true;
                }
                if ((this._parent.GrdRx == item))
                {
                    this._parent.GrdRx = null;
                    return true;
                }
                if ((this._parent.SchTyp == item))
                {
                    this._parent.SchTyp = null;
                    return true;
                }
                if ((this._parent.OpDlTmms == item))
                {
                    this._parent.OpDlTmms = null;
                    return true;
                }
                if ((this._parent.CrdTmms == item))
                {
                    this._parent.CrdTmms = null;
                    return true;
                }
                if ((this._parent.DurTmms == item))
                {
                    this._parent.DurTmms = null;
                    return true;
                }
                if ((this._parent.UnBlkMod == item))
                {
                    this._parent.UnBlkMod = null;
                    return true;
                }
                if ((this._parent.SecTmms == item))
                {
                    this._parent.SecTmms = null;
                    return true;
                }
                if ((this._parent.WeiMod == item))
                {
                    this._parent.WeiMod = null;
                    return true;
                }
                if ((this._parent.WeiTmms == item))
                {
                    this._parent.WeiTmms = null;
                    return true;
                }
                if ((this._parent.PPVVal == item))
                {
                    this._parent.PPVVal = null;
                    return true;
                }
                if ((this._parent.PhGndVal == item))
                {
                    this._parent.PhGndVal = null;
                    return true;
                }
                if ((this._parent.RvAMod == item))
                {
                    this._parent.RvAMod = null;
                    return true;
                }
                if ((this._parent.RvATmms == item))
                {
                    this._parent.RvATmms = null;
                    return true;
                }
                if ((this._parent.RvRsTmms == item))
                {
                    this._parent.RvRsTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ProTx).Concat(this._parent.ProRx).Concat(this._parent.Str).Concat(this._parent.Op).Concat(this._parent.CarRx).Concat(this._parent.LosOfGrd).Concat(this._parent.Echo).Concat(this._parent.WeiOp).Concat(this._parent.RvABlk).Concat(this._parent.GrdRx).Concat(this._parent.SchTyp).Concat(this._parent.OpDlTmms).Concat(this._parent.CrdTmms).Concat(this._parent.DurTmms).Concat(this._parent.UnBlkMod).Concat(this._parent.SecTmms).Concat(this._parent.WeiMod).Concat(this._parent.WeiTmms).Concat(this._parent.PPVVal).Concat(this._parent.PhGndVal).Concat(this._parent.RvAMod).Concat(this._parent.RvATmms).Concat(this._parent.RvRsTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ProTx property
        /// </summary>
        private sealed class ProTxProxy : ModelPropertyChange<IPSCH, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProTxProxy(IPSCH modelElement) : 
                    base(modelElement, "ProTx")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.ProTx;
                }
                set
                {
                    this.ModelElement.ProTx = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ProRx property
        /// </summary>
        private sealed class ProRxProxy : ModelPropertyChange<IPSCH, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProRxProxy(IPSCH modelElement) : 
                    base(modelElement, "ProRx")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.ProRx;
                }
                set
                {
                    this.ModelElement.ProRx = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IPSCH, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IPSCH modelElement) : 
                    base(modelElement, "Str")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IPSCH, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IPSCH modelElement) : 
                    base(modelElement, "Op")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CarRx property
        /// </summary>
        private sealed class CarRxProxy : ModelPropertyChange<IPSCH, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CarRxProxy(IPSCH modelElement) : 
                    base(modelElement, "CarRx")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.CarRx;
                }
                set
                {
                    this.ModelElement.CarRx = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LosOfGrd property
        /// </summary>
        private sealed class LosOfGrdProxy : ModelPropertyChange<IPSCH, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LosOfGrdProxy(IPSCH modelElement) : 
                    base(modelElement, "LosOfGrd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.LosOfGrd;
                }
                set
                {
                    this.ModelElement.LosOfGrd = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Echo property
        /// </summary>
        private sealed class EchoProxy : ModelPropertyChange<IPSCH, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EchoProxy(IPSCH modelElement) : 
                    base(modelElement, "Echo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Echo;
                }
                set
                {
                    this.ModelElement.Echo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WeiOp property
        /// </summary>
        private sealed class WeiOpProxy : ModelPropertyChange<IPSCH, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WeiOpProxy(IPSCH modelElement) : 
                    base(modelElement, "WeiOp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.WeiOp;
                }
                set
                {
                    this.ModelElement.WeiOp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RvABlk property
        /// </summary>
        private sealed class RvABlkProxy : ModelPropertyChange<IPSCH, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RvABlkProxy(IPSCH modelElement) : 
                    base(modelElement, "RvABlk")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.RvABlk;
                }
                set
                {
                    this.ModelElement.RvABlk = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GrdRx property
        /// </summary>
        private sealed class GrdRxProxy : ModelPropertyChange<IPSCH, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GrdRxProxy(IPSCH modelElement) : 
                    base(modelElement, "GrdRx")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.GrdRx;
                }
                set
                {
                    this.ModelElement.GrdRx = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SchTyp property
        /// </summary>
        private sealed class SchTypProxy : ModelPropertyChange<IPSCH, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SchTypProxy(IPSCH modelElement) : 
                    base(modelElement, "SchTyp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.SchTyp;
                }
                set
                {
                    this.ModelElement.SchTyp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpDlTmms property
        /// </summary>
        private sealed class OpDlTmmsProxy : ModelPropertyChange<IPSCH, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpDlTmmsProxy(IPSCH modelElement) : 
                    base(modelElement, "OpDlTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.OpDlTmms;
                }
                set
                {
                    this.ModelElement.OpDlTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CrdTmms property
        /// </summary>
        private sealed class CrdTmmsProxy : ModelPropertyChange<IPSCH, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CrdTmmsProxy(IPSCH modelElement) : 
                    base(modelElement, "CrdTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.CrdTmms;
                }
                set
                {
                    this.ModelElement.CrdTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DurTmms property
        /// </summary>
        private sealed class DurTmmsProxy : ModelPropertyChange<IPSCH, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurTmmsProxy(IPSCH modelElement) : 
                    base(modelElement, "DurTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.DurTmms;
                }
                set
                {
                    this.ModelElement.DurTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the UnBlkMod property
        /// </summary>
        private sealed class UnBlkModProxy : ModelPropertyChange<IPSCH, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnBlkModProxy(IPSCH modelElement) : 
                    base(modelElement, "UnBlkMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.UnBlkMod;
                }
                set
                {
                    this.ModelElement.UnBlkMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SecTmms property
        /// </summary>
        private sealed class SecTmmsProxy : ModelPropertyChange<IPSCH, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SecTmmsProxy(IPSCH modelElement) : 
                    base(modelElement, "SecTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.SecTmms;
                }
                set
                {
                    this.ModelElement.SecTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WeiMod property
        /// </summary>
        private sealed class WeiModProxy : ModelPropertyChange<IPSCH, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WeiModProxy(IPSCH modelElement) : 
                    base(modelElement, "WeiMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.WeiMod;
                }
                set
                {
                    this.ModelElement.WeiMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WeiTmms property
        /// </summary>
        private sealed class WeiTmmsProxy : ModelPropertyChange<IPSCH, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WeiTmmsProxy(IPSCH modelElement) : 
                    base(modelElement, "WeiTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.WeiTmms;
                }
                set
                {
                    this.ModelElement.WeiTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PPVVal property
        /// </summary>
        private sealed class PPVValProxy : ModelPropertyChange<IPSCH, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PPVValProxy(IPSCH modelElement) : 
                    base(modelElement, "PPVVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.PPVVal;
                }
                set
                {
                    this.ModelElement.PPVVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PhGndVal property
        /// </summary>
        private sealed class PhGndValProxy : ModelPropertyChange<IPSCH, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhGndValProxy(IPSCH modelElement) : 
                    base(modelElement, "PhGndVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.PhGndVal;
                }
                set
                {
                    this.ModelElement.PhGndVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RvAMod property
        /// </summary>
        private sealed class RvAModProxy : ModelPropertyChange<IPSCH, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RvAModProxy(IPSCH modelElement) : 
                    base(modelElement, "RvAMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RvAMod;
                }
                set
                {
                    this.ModelElement.RvAMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RvATmms property
        /// </summary>
        private sealed class RvATmmsProxy : ModelPropertyChange<IPSCH, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RvATmmsProxy(IPSCH modelElement) : 
                    base(modelElement, "RvATmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RvATmms;
                }
                set
                {
                    this.ModelElement.RvATmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RvRsTmms property
        /// </summary>
        private sealed class RvRsTmmsProxy : ModelPropertyChange<IPSCH, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RvRsTmmsProxy(IPSCH modelElement) : 
                    base(modelElement, "RvRsTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RvRsTmms;
                }
                set
                {
                    this.ModelElement.RvRsTmms = value;
                }
            }
        }
    }
}

