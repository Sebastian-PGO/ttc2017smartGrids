using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PFRC class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PFRC")]
    public partial class PFRC : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPFRC, IModelElement
    {
        
        private static Lazy<ITypedElement> _strReference = new Lazy<ITypedElement>(RetrieveStrReference);
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        private static Lazy<ITypedElement> _opReference = new Lazy<ITypedElement>(RetrieveOpReference);
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        private static Lazy<ITypedElement> _blkVReference = new Lazy<ITypedElement>(RetrieveBlkVReference);
        
        /// <summary>
        /// The backing field for the BlkV property
        /// </summary>
        private ISPS _blkV;
        
        private static Lazy<ITypedElement> _strValReference = new Lazy<ITypedElement>(RetrieveStrValReference);
        
        /// <summary>
        /// The backing field for the StrVal property
        /// </summary>
        private IASG _strVal;
        
        private static Lazy<ITypedElement> _blkValReference = new Lazy<ITypedElement>(RetrieveBlkValReference);
        
        /// <summary>
        /// The backing field for the BlkVal property
        /// </summary>
        private IASG _blkVal;
        
        private static Lazy<ITypedElement> _opDiTmmsReference = new Lazy<ITypedElement>(RetrieveOpDiTmmsReference);
        
        /// <summary>
        /// The backing field for the OpDiTmms property
        /// </summary>
        private IING _opDiTmms;
        
        private static Lazy<ITypedElement> _rsDiTmmsReference = new Lazy<ITypedElement>(RetrieveRsDiTmmsReference);
        
        /// <summary>
        /// The backing field for the RsDiTmms property
        /// </summary>
        private IING _rsDiTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e, _strReference);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e, _strReference);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e, _opReference);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e, _opReference);
                }
            }
        }
        
        /// <summary>
        /// The BlkV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS BlkV
        {
            get
            {
                return this._blkV;
            }
            set
            {
                if ((this._blkV != value))
                {
                    ISPS old = this._blkV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkVChanging(e);
                    this.OnPropertyChanging("BlkV", e, _blkVReference);
                    this._blkV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkV;
                    }
                    this.OnBlkVChanged(e);
                    this.OnPropertyChanged("BlkV", e, _blkVReference);
                }
            }
        }
        
        /// <summary>
        /// The StrVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG StrVal
        {
            get
            {
                return this._strVal;
            }
            set
            {
                if ((this._strVal != value))
                {
                    IASG old = this._strVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrValChanging(e);
                    this.OnPropertyChanging("StrVal", e, _strValReference);
                    this._strVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStrVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStrVal;
                    }
                    this.OnStrValChanged(e);
                    this.OnPropertyChanged("StrVal", e, _strValReference);
                }
            }
        }
        
        /// <summary>
        /// The BlkVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG BlkVal
        {
            get
            {
                return this._blkVal;
            }
            set
            {
                if ((this._blkVal != value))
                {
                    IASG old = this._blkVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkValChanging(e);
                    this.OnPropertyChanging("BlkVal", e, _blkValReference);
                    this._blkVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkVal;
                    }
                    this.OnBlkValChanged(e);
                    this.OnPropertyChanged("BlkVal", e, _blkValReference);
                }
            }
        }
        
        /// <summary>
        /// The OpDiTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING OpDiTmms
        {
            get
            {
                return this._opDiTmms;
            }
            set
            {
                if ((this._opDiTmms != value))
                {
                    IING old = this._opDiTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpDiTmmsChanging(e);
                    this.OnPropertyChanging("OpDiTmms", e, _opDiTmmsReference);
                    this._opDiTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpDiTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpDiTmms;
                    }
                    this.OnOpDiTmmsChanged(e);
                    this.OnPropertyChanged("OpDiTmms", e, _opDiTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The RsDiTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RsDiTmms
        {
            get
            {
                return this._rsDiTmms;
            }
            set
            {
                if ((this._rsDiTmms != value))
                {
                    IING old = this._rsDiTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRsDiTmmsChanging(e);
                    this.OnPropertyChanging("RsDiTmms", e, _rsDiTmmsReference);
                    this._rsDiTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRsDiTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRsDiTmms;
                    }
                    this.OnRsDiTmmsChanged(e);
                    this.OnPropertyChanged("RsDiTmms", e, _rsDiTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PFRCReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PFRC")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the BlkV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkVChanging;
        
        /// <summary>
        /// Gets fired when the BlkV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkVChanged;
        
        /// <summary>
        /// Gets fired before the StrVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrValChanging;
        
        /// <summary>
        /// Gets fired when the StrVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrValChanged;
        
        /// <summary>
        /// Gets fired before the BlkVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkValChanging;
        
        /// <summary>
        /// Gets fired when the BlkVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkValChanged;
        
        /// <summary>
        /// Gets fired before the OpDiTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDiTmmsChanging;
        
        /// <summary>
        /// Gets fired when the OpDiTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDiTmmsChanged;
        
        /// <summary>
        /// Gets fired before the RsDiTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDiTmmsChanging;
        
        /// <summary>
        /// Gets fired when the RsDiTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDiTmmsChanged;
        
        private static ITypedElement RetrieveStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PFRC.ClassInstance)).Resolve("Str")));
        }
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        private static ITypedElement RetrieveOpReference()
        {
            return ((ITypedElement)(((ModelElement)(PFRC.ClassInstance)).Resolve("Op")));
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        private static ITypedElement RetrieveBlkVReference()
        {
            return ((ITypedElement)(((ModelElement)(PFRC.ClassInstance)).Resolve("BlkV")));
        }
        
        /// <summary>
        /// Raises the BlkVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkV(object sender, System.EventArgs eventArgs)
        {
            this.BlkV = null;
        }
        
        private static ITypedElement RetrieveStrValReference()
        {
            return ((ITypedElement)(((ModelElement)(PFRC.ClassInstance)).Resolve("StrVal")));
        }
        
        /// <summary>
        /// Raises the StrValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StrVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStrVal(object sender, System.EventArgs eventArgs)
        {
            this.StrVal = null;
        }
        
        private static ITypedElement RetrieveBlkValReference()
        {
            return ((ITypedElement)(((ModelElement)(PFRC.ClassInstance)).Resolve("BlkVal")));
        }
        
        /// <summary>
        /// Raises the BlkValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkVal(object sender, System.EventArgs eventArgs)
        {
            this.BlkVal = null;
        }
        
        private static ITypedElement RetrieveOpDiTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PFRC.ClassInstance)).Resolve("OpDiTmms")));
        }
        
        /// <summary>
        /// Raises the OpDiTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDiTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDiTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpDiTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDiTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDiTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpDiTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpDiTmms(object sender, System.EventArgs eventArgs)
        {
            this.OpDiTmms = null;
        }
        
        private static ITypedElement RetrieveRsDiTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PFRC.ClassInstance)).Resolve("RsDiTmms")));
        }
        
        /// <summary>
        /// Raises the RsDiTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDiTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDiTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RsDiTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDiTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDiTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RsDiTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRsDiTmms(object sender, System.EventArgs eventArgs)
        {
            this.RsDiTmms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "BLKV"))
            {
                this.BlkV = ((ISPS)(value));
                return;
            }
            if ((feature == "STRVAL"))
            {
                this.StrVal = ((IASG)(value));
                return;
            }
            if ((feature == "BLKVAL"))
            {
                this.BlkVal = ((IASG)(value));
                return;
            }
            if ((feature == "OPDITMMS"))
            {
                this.OpDiTmms = ((IING)(value));
                return;
            }
            if ((feature == "RSDITMMS"))
            {
                this.RsDiTmms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "BlkV"))
            {
                return new BlkVProxy(this);
            }
            if ((attribute == "StrVal"))
            {
                return new StrValProxy(this);
            }
            if ((attribute == "BlkVal"))
            {
                return new BlkValProxy(this);
            }
            if ((attribute == "OpDiTmms"))
            {
                return new OpDiTmmsProxy(this);
            }
            if ((attribute == "RsDiTmms"))
            {
                return new RsDiTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "BlkV"))
            {
                return new BlkVProxy(this);
            }
            if ((reference == "StrVal"))
            {
                return new StrValProxy(this);
            }
            if ((reference == "BlkVal"))
            {
                return new BlkValProxy(this);
            }
            if ((reference == "OpDiTmms"))
            {
                return new OpDiTmmsProxy(this);
            }
            if ((reference == "RsDiTmms"))
            {
                return new RsDiTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PFRC")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PFRC class
        /// </summary>
        public class PFRCReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PFRC _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PFRCReferencedElementsCollection(PFRC parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StrVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpDiTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RsDiTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.BlkVChanged += this.PropagateValueChanges;
                this._parent.StrValChanged += this.PropagateValueChanges;
                this._parent.BlkValChanged += this.PropagateValueChanges;
                this._parent.OpDiTmmsChanged += this.PropagateValueChanges;
                this._parent.RsDiTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.BlkVChanged -= this.PropagateValueChanges;
                this._parent.StrValChanged -= this.PropagateValueChanges;
                this._parent.BlkValChanged -= this.PropagateValueChanges;
                this._parent.OpDiTmmsChanged -= this.PropagateValueChanges;
                this._parent.RsDiTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.BlkV == null))
                {
                    ISPS blkVCasted = item.As<ISPS>();
                    if ((blkVCasted != null))
                    {
                        this._parent.BlkV = blkVCasted;
                        return;
                    }
                }
                if ((this._parent.StrVal == null))
                {
                    IASG strValCasted = item.As<IASG>();
                    if ((strValCasted != null))
                    {
                        this._parent.StrVal = strValCasted;
                        return;
                    }
                }
                if ((this._parent.BlkVal == null))
                {
                    IASG blkValCasted = item.As<IASG>();
                    if ((blkValCasted != null))
                    {
                        this._parent.BlkVal = blkValCasted;
                        return;
                    }
                }
                if ((this._parent.OpDiTmms == null))
                {
                    IING opDiTmmsCasted = item.As<IING>();
                    if ((opDiTmmsCasted != null))
                    {
                        this._parent.OpDiTmms = opDiTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.RsDiTmms == null))
                {
                    IING rsDiTmmsCasted = item.As<IING>();
                    if ((rsDiTmmsCasted != null))
                    {
                        this._parent.RsDiTmms = rsDiTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Str = null;
                this._parent.Op = null;
                this._parent.BlkV = null;
                this._parent.StrVal = null;
                this._parent.BlkVal = null;
                this._parent.OpDiTmms = null;
                this._parent.RsDiTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.BlkV))
                {
                    return true;
                }
                if ((item == this._parent.StrVal))
                {
                    return true;
                }
                if ((item == this._parent.BlkVal))
                {
                    return true;
                }
                if ((item == this._parent.OpDiTmms))
                {
                    return true;
                }
                if ((item == this._parent.RsDiTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkV != null))
                {
                    array[arrayIndex] = this._parent.BlkV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StrVal != null))
                {
                    array[arrayIndex] = this._parent.StrVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkVal != null))
                {
                    array[arrayIndex] = this._parent.BlkVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpDiTmms != null))
                {
                    array[arrayIndex] = this._parent.OpDiTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RsDiTmms != null))
                {
                    array[arrayIndex] = this._parent.RsDiTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.BlkV == item))
                {
                    this._parent.BlkV = null;
                    return true;
                }
                if ((this._parent.StrVal == item))
                {
                    this._parent.StrVal = null;
                    return true;
                }
                if ((this._parent.BlkVal == item))
                {
                    this._parent.BlkVal = null;
                    return true;
                }
                if ((this._parent.OpDiTmms == item))
                {
                    this._parent.OpDiTmms = null;
                    return true;
                }
                if ((this._parent.RsDiTmms == item))
                {
                    this._parent.RsDiTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Str).Concat(this._parent.Op).Concat(this._parent.BlkV).Concat(this._parent.StrVal).Concat(this._parent.BlkVal).Concat(this._parent.OpDiTmms).Concat(this._parent.RsDiTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IPFRC, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IPFRC modelElement) : 
                    base(modelElement, "Str")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IPFRC, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IPFRC modelElement) : 
                    base(modelElement, "Op")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkV property
        /// </summary>
        private sealed class BlkVProxy : ModelPropertyChange<IPFRC, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkVProxy(IPFRC modelElement) : 
                    base(modelElement, "BlkV")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.BlkV;
                }
                set
                {
                    this.ModelElement.BlkV = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StrVal property
        /// </summary>
        private sealed class StrValProxy : ModelPropertyChange<IPFRC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrValProxy(IPFRC modelElement) : 
                    base(modelElement, "StrVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.StrVal;
                }
                set
                {
                    this.ModelElement.StrVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkVal property
        /// </summary>
        private sealed class BlkValProxy : ModelPropertyChange<IPFRC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkValProxy(IPFRC modelElement) : 
                    base(modelElement, "BlkVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.BlkVal;
                }
                set
                {
                    this.ModelElement.BlkVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpDiTmms property
        /// </summary>
        private sealed class OpDiTmmsProxy : ModelPropertyChange<IPFRC, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpDiTmmsProxy(IPFRC modelElement) : 
                    base(modelElement, "OpDiTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.OpDiTmms;
                }
                set
                {
                    this.ModelElement.OpDiTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RsDiTmms property
        /// </summary>
        private sealed class RsDiTmmsProxy : ModelPropertyChange<IPFRC, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RsDiTmmsProxy(IPFRC modelElement) : 
                    base(modelElement, "RsDiTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RsDiTmms;
                }
                set
                {
                    this.ModelElement.RsDiTmms = value;
                }
            }
        }
    }
}

