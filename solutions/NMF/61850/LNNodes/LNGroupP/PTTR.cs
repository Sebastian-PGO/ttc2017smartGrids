using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PTTR class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PTTR")]
    public partial class PTTR : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPTTR, IModelElement
    {
        
        private static Lazy<ITypedElement> _ampReference = new Lazy<ITypedElement>(RetrieveAmpReference);
        
        /// <summary>
        /// The backing field for the Amp property
        /// </summary>
        private IMV _amp;
        
        private static Lazy<ITypedElement> _tmpReference = new Lazy<ITypedElement>(RetrieveTmpReference);
        
        /// <summary>
        /// The backing field for the Tmp property
        /// </summary>
        private IMV _tmp;
        
        private static Lazy<ITypedElement> _tmpRlReference = new Lazy<ITypedElement>(RetrieveTmpRlReference);
        
        /// <summary>
        /// The backing field for the TmpRl property
        /// </summary>
        private IMV _tmpRl;
        
        private static Lazy<ITypedElement> _lodRsvAlmReference = new Lazy<ITypedElement>(RetrieveLodRsvAlmReference);
        
        /// <summary>
        /// The backing field for the LodRsvAlm property
        /// </summary>
        private IMV _lodRsvAlm;
        
        private static Lazy<ITypedElement> _lodRsvTrReference = new Lazy<ITypedElement>(RetrieveLodRsvTrReference);
        
        /// <summary>
        /// The backing field for the LodRsvTr property
        /// </summary>
        private IMV _lodRsvTr;
        
        private static Lazy<ITypedElement> _ageRatReference = new Lazy<ITypedElement>(RetrieveAgeRatReference);
        
        /// <summary>
        /// The backing field for the AgeRat property
        /// </summary>
        private IMV _ageRat;
        
        private static Lazy<ITypedElement> _strReference = new Lazy<ITypedElement>(RetrieveStrReference);
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        private static Lazy<ITypedElement> _opReference = new Lazy<ITypedElement>(RetrieveOpReference);
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        private static Lazy<ITypedElement> _almThmReference = new Lazy<ITypedElement>(RetrieveAlmThmReference);
        
        /// <summary>
        /// The backing field for the AlmThm property
        /// </summary>
        private IACT _almThm;
        
        private static Lazy<ITypedElement> _tmTmpStReference = new Lazy<ITypedElement>(RetrieveTmTmpStReference);
        
        /// <summary>
        /// The backing field for the TmTmpSt property
        /// </summary>
        private ICSD _tmTmpSt;
        
        private static Lazy<ITypedElement> _tmAStReference = new Lazy<ITypedElement>(RetrieveTmAStReference);
        
        /// <summary>
        /// The backing field for the TmASt property
        /// </summary>
        private ICSD _tmASt;
        
        private static Lazy<ITypedElement> _tmTmpCrvReference = new Lazy<ITypedElement>(RetrieveTmTmpCrvReference);
        
        /// <summary>
        /// The backing field for the TmTmpCrv property
        /// </summary>
        private ICURVE _tmTmpCrv;
        
        private static Lazy<ITypedElement> _tmACrvReference = new Lazy<ITypedElement>(RetrieveTmACrvReference);
        
        /// <summary>
        /// The backing field for the TmACrv property
        /// </summary>
        private ICURVE _tmACrv;
        
        private static Lazy<ITypedElement> _tmpMaxReference = new Lazy<ITypedElement>(RetrieveTmpMaxReference);
        
        /// <summary>
        /// The backing field for the TmpMax property
        /// </summary>
        private IASG _tmpMax;
        
        private static Lazy<ITypedElement> _strValReference = new Lazy<ITypedElement>(RetrieveStrValReference);
        
        /// <summary>
        /// The backing field for the StrVal property
        /// </summary>
        private IASG _strVal;
        
        private static Lazy<ITypedElement> _opDlTmmsReference = new Lazy<ITypedElement>(RetrieveOpDlTmmsReference);
        
        /// <summary>
        /// The backing field for the OpDlTmms property
        /// </summary>
        private IING _opDlTmms;
        
        private static Lazy<ITypedElement> _minOpTmmsReference = new Lazy<ITypedElement>(RetrieveMinOpTmmsReference);
        
        /// <summary>
        /// The backing field for the MinOpTmms property
        /// </summary>
        private IING _minOpTmms;
        
        private static Lazy<ITypedElement> _maxOpTmmsReference = new Lazy<ITypedElement>(RetrieveMaxOpTmmsReference);
        
        /// <summary>
        /// The backing field for the MaxOpTmms property
        /// </summary>
        private IING _maxOpTmms;
        
        private static Lazy<ITypedElement> _rsDlTmmsReference = new Lazy<ITypedElement>(RetrieveRsDlTmmsReference);
        
        /// <summary>
        /// The backing field for the RsDlTmms property
        /// </summary>
        private IING _rsDlTmms;
        
        private static Lazy<ITypedElement> _consTmsReference = new Lazy<ITypedElement>(RetrieveConsTmsReference);
        
        /// <summary>
        /// The backing field for the ConsTms property
        /// </summary>
        private IING _consTms;
        
        private static Lazy<ITypedElement> _almValReference = new Lazy<ITypedElement>(RetrieveAlmValReference);
        
        /// <summary>
        /// The backing field for the AlmVal property
        /// </summary>
        private IASG _almVal;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Amp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Amp
        {
            get
            {
                return this._amp;
            }
            set
            {
                if ((this._amp != value))
                {
                    IMV old = this._amp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpChanging(e);
                    this.OnPropertyChanging("Amp", e, _ampReference);
                    this._amp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAmp;
                    }
                    this.OnAmpChanged(e);
                    this.OnPropertyChanged("Amp", e, _ampReference);
                }
            }
        }
        
        /// <summary>
        /// The Tmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Tmp
        {
            get
            {
                return this._tmp;
            }
            set
            {
                if ((this._tmp != value))
                {
                    IMV old = this._tmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmpChanging(e);
                    this.OnPropertyChanging("Tmp", e, _tmpReference);
                    this._tmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmp;
                    }
                    this.OnTmpChanged(e);
                    this.OnPropertyChanged("Tmp", e, _tmpReference);
                }
            }
        }
        
        /// <summary>
        /// The TmpRl property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV TmpRl
        {
            get
            {
                return this._tmpRl;
            }
            set
            {
                if ((this._tmpRl != value))
                {
                    IMV old = this._tmpRl;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmpRlChanging(e);
                    this.OnPropertyChanging("TmpRl", e, _tmpRlReference);
                    this._tmpRl = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmpRl;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmpRl;
                    }
                    this.OnTmpRlChanged(e);
                    this.OnPropertyChanged("TmpRl", e, _tmpRlReference);
                }
            }
        }
        
        /// <summary>
        /// The LodRsvAlm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV LodRsvAlm
        {
            get
            {
                return this._lodRsvAlm;
            }
            set
            {
                if ((this._lodRsvAlm != value))
                {
                    IMV old = this._lodRsvAlm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLodRsvAlmChanging(e);
                    this.OnPropertyChanging("LodRsvAlm", e, _lodRsvAlmReference);
                    this._lodRsvAlm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLodRsvAlm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLodRsvAlm;
                    }
                    this.OnLodRsvAlmChanged(e);
                    this.OnPropertyChanged("LodRsvAlm", e, _lodRsvAlmReference);
                }
            }
        }
        
        /// <summary>
        /// The LodRsvTr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV LodRsvTr
        {
            get
            {
                return this._lodRsvTr;
            }
            set
            {
                if ((this._lodRsvTr != value))
                {
                    IMV old = this._lodRsvTr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLodRsvTrChanging(e);
                    this.OnPropertyChanging("LodRsvTr", e, _lodRsvTrReference);
                    this._lodRsvTr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLodRsvTr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLodRsvTr;
                    }
                    this.OnLodRsvTrChanged(e);
                    this.OnPropertyChanged("LodRsvTr", e, _lodRsvTrReference);
                }
            }
        }
        
        /// <summary>
        /// The AgeRat property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV AgeRat
        {
            get
            {
                return this._ageRat;
            }
            set
            {
                if ((this._ageRat != value))
                {
                    IMV old = this._ageRat;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAgeRatChanging(e);
                    this.OnPropertyChanging("AgeRat", e, _ageRatReference);
                    this._ageRat = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAgeRat;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAgeRat;
                    }
                    this.OnAgeRatChanged(e);
                    this.OnPropertyChanged("AgeRat", e, _ageRatReference);
                }
            }
        }
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e, _strReference);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e, _strReference);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e, _opReference);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e, _opReference);
                }
            }
        }
        
        /// <summary>
        /// The AlmThm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT AlmThm
        {
            get
            {
                return this._almThm;
            }
            set
            {
                if ((this._almThm != value))
                {
                    IACT old = this._almThm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlmThmChanging(e);
                    this.OnPropertyChanging("AlmThm", e, _almThmReference);
                    this._almThm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAlmThm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAlmThm;
                    }
                    this.OnAlmThmChanged(e);
                    this.OnPropertyChanged("AlmThm", e, _almThmReference);
                }
            }
        }
        
        /// <summary>
        /// The TmTmpSt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ICSD TmTmpSt
        {
            get
            {
                return this._tmTmpSt;
            }
            set
            {
                if ((this._tmTmpSt != value))
                {
                    ICSD old = this._tmTmpSt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmTmpStChanging(e);
                    this.OnPropertyChanging("TmTmpSt", e, _tmTmpStReference);
                    this._tmTmpSt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmTmpSt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmTmpSt;
                    }
                    this.OnTmTmpStChanged(e);
                    this.OnPropertyChanged("TmTmpSt", e, _tmTmpStReference);
                }
            }
        }
        
        /// <summary>
        /// The TmASt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ICSD TmASt
        {
            get
            {
                return this._tmASt;
            }
            set
            {
                if ((this._tmASt != value))
                {
                    ICSD old = this._tmASt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmAStChanging(e);
                    this.OnPropertyChanging("TmASt", e, _tmAStReference);
                    this._tmASt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmASt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmASt;
                    }
                    this.OnTmAStChanged(e);
                    this.OnPropertyChanged("TmASt", e, _tmAStReference);
                }
            }
        }
        
        /// <summary>
        /// The TmTmpCrv property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ICURVE TmTmpCrv
        {
            get
            {
                return this._tmTmpCrv;
            }
            set
            {
                if ((this._tmTmpCrv != value))
                {
                    ICURVE old = this._tmTmpCrv;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmTmpCrvChanging(e);
                    this.OnPropertyChanging("TmTmpCrv", e, _tmTmpCrvReference);
                    this._tmTmpCrv = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmTmpCrv;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmTmpCrv;
                    }
                    this.OnTmTmpCrvChanged(e);
                    this.OnPropertyChanged("TmTmpCrv", e, _tmTmpCrvReference);
                }
            }
        }
        
        /// <summary>
        /// The TmACrv property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ICURVE TmACrv
        {
            get
            {
                return this._tmACrv;
            }
            set
            {
                if ((this._tmACrv != value))
                {
                    ICURVE old = this._tmACrv;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmACrvChanging(e);
                    this.OnPropertyChanging("TmACrv", e, _tmACrvReference);
                    this._tmACrv = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmACrv;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmACrv;
                    }
                    this.OnTmACrvChanged(e);
                    this.OnPropertyChanged("TmACrv", e, _tmACrvReference);
                }
            }
        }
        
        /// <summary>
        /// The TmpMax property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG TmpMax
        {
            get
            {
                return this._tmpMax;
            }
            set
            {
                if ((this._tmpMax != value))
                {
                    IASG old = this._tmpMax;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmpMaxChanging(e);
                    this.OnPropertyChanging("TmpMax", e, _tmpMaxReference);
                    this._tmpMax = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmpMax;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmpMax;
                    }
                    this.OnTmpMaxChanged(e);
                    this.OnPropertyChanged("TmpMax", e, _tmpMaxReference);
                }
            }
        }
        
        /// <summary>
        /// The StrVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG StrVal
        {
            get
            {
                return this._strVal;
            }
            set
            {
                if ((this._strVal != value))
                {
                    IASG old = this._strVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrValChanging(e);
                    this.OnPropertyChanging("StrVal", e, _strValReference);
                    this._strVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStrVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStrVal;
                    }
                    this.OnStrValChanged(e);
                    this.OnPropertyChanged("StrVal", e, _strValReference);
                }
            }
        }
        
        /// <summary>
        /// The OpDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING OpDlTmms
        {
            get
            {
                return this._opDlTmms;
            }
            set
            {
                if ((this._opDlTmms != value))
                {
                    IING old = this._opDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpDlTmmsChanging(e);
                    this.OnPropertyChanging("OpDlTmms", e, _opDlTmmsReference);
                    this._opDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpDlTmms;
                    }
                    this.OnOpDlTmmsChanged(e);
                    this.OnPropertyChanged("OpDlTmms", e, _opDlTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The MinOpTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MinOpTmms
        {
            get
            {
                return this._minOpTmms;
            }
            set
            {
                if ((this._minOpTmms != value))
                {
                    IING old = this._minOpTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinOpTmmsChanging(e);
                    this.OnPropertyChanging("MinOpTmms", e, _minOpTmmsReference);
                    this._minOpTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinOpTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinOpTmms;
                    }
                    this.OnMinOpTmmsChanged(e);
                    this.OnPropertyChanged("MinOpTmms", e, _minOpTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxOpTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MaxOpTmms
        {
            get
            {
                return this._maxOpTmms;
            }
            set
            {
                if ((this._maxOpTmms != value))
                {
                    IING old = this._maxOpTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxOpTmmsChanging(e);
                    this.OnPropertyChanging("MaxOpTmms", e, _maxOpTmmsReference);
                    this._maxOpTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxOpTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxOpTmms;
                    }
                    this.OnMaxOpTmmsChanged(e);
                    this.OnPropertyChanged("MaxOpTmms", e, _maxOpTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The RsDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RsDlTmms
        {
            get
            {
                return this._rsDlTmms;
            }
            set
            {
                if ((this._rsDlTmms != value))
                {
                    IING old = this._rsDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRsDlTmmsChanging(e);
                    this.OnPropertyChanging("RsDlTmms", e, _rsDlTmmsReference);
                    this._rsDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRsDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRsDlTmms;
                    }
                    this.OnRsDlTmmsChanged(e);
                    this.OnPropertyChanged("RsDlTmms", e, _rsDlTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The ConsTms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING ConsTms
        {
            get
            {
                return this._consTms;
            }
            set
            {
                if ((this._consTms != value))
                {
                    IING old = this._consTms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConsTmsChanging(e);
                    this.OnPropertyChanging("ConsTms", e, _consTmsReference);
                    this._consTms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetConsTms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetConsTms;
                    }
                    this.OnConsTmsChanged(e);
                    this.OnPropertyChanged("ConsTms", e, _consTmsReference);
                }
            }
        }
        
        /// <summary>
        /// The AlmVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG AlmVal
        {
            get
            {
                return this._almVal;
            }
            set
            {
                if ((this._almVal != value))
                {
                    IASG old = this._almVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlmValChanging(e);
                    this.OnPropertyChanging("AlmVal", e, _almValReference);
                    this._almVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAlmVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAlmVal;
                    }
                    this.OnAlmValChanged(e);
                    this.OnPropertyChanged("AlmVal", e, _almValReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PTTRReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PTTR")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Amp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmpChanging;
        
        /// <summary>
        /// Gets fired when the Amp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmpChanged;
        
        /// <summary>
        /// Gets fired before the Tmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmpChanging;
        
        /// <summary>
        /// Gets fired when the Tmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmpChanged;
        
        /// <summary>
        /// Gets fired before the TmpRl property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmpRlChanging;
        
        /// <summary>
        /// Gets fired when the TmpRl property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmpRlChanged;
        
        /// <summary>
        /// Gets fired before the LodRsvAlm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LodRsvAlmChanging;
        
        /// <summary>
        /// Gets fired when the LodRsvAlm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LodRsvAlmChanged;
        
        /// <summary>
        /// Gets fired before the LodRsvTr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LodRsvTrChanging;
        
        /// <summary>
        /// Gets fired when the LodRsvTr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LodRsvTrChanged;
        
        /// <summary>
        /// Gets fired before the AgeRat property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AgeRatChanging;
        
        /// <summary>
        /// Gets fired when the AgeRat property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AgeRatChanged;
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the AlmThm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AlmThmChanging;
        
        /// <summary>
        /// Gets fired when the AlmThm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AlmThmChanged;
        
        /// <summary>
        /// Gets fired before the TmTmpSt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmTmpStChanging;
        
        /// <summary>
        /// Gets fired when the TmTmpSt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmTmpStChanged;
        
        /// <summary>
        /// Gets fired before the TmASt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmAStChanging;
        
        /// <summary>
        /// Gets fired when the TmASt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmAStChanged;
        
        /// <summary>
        /// Gets fired before the TmTmpCrv property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmTmpCrvChanging;
        
        /// <summary>
        /// Gets fired when the TmTmpCrv property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmTmpCrvChanged;
        
        /// <summary>
        /// Gets fired before the TmACrv property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmACrvChanging;
        
        /// <summary>
        /// Gets fired when the TmACrv property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmACrvChanged;
        
        /// <summary>
        /// Gets fired before the TmpMax property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmpMaxChanging;
        
        /// <summary>
        /// Gets fired when the TmpMax property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmpMaxChanged;
        
        /// <summary>
        /// Gets fired before the StrVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrValChanging;
        
        /// <summary>
        /// Gets fired when the StrVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrValChanged;
        
        /// <summary>
        /// Gets fired before the OpDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the OpDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanged;
        
        /// <summary>
        /// Gets fired before the MinOpTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinOpTmmsChanging;
        
        /// <summary>
        /// Gets fired when the MinOpTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinOpTmmsChanged;
        
        /// <summary>
        /// Gets fired before the MaxOpTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOpTmmsChanging;
        
        /// <summary>
        /// Gets fired when the MaxOpTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOpTmmsChanged;
        
        /// <summary>
        /// Gets fired before the RsDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the RsDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDlTmmsChanged;
        
        /// <summary>
        /// Gets fired before the ConsTms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConsTmsChanging;
        
        /// <summary>
        /// Gets fired when the ConsTms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConsTmsChanged;
        
        /// <summary>
        /// Gets fired before the AlmVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AlmValChanging;
        
        /// <summary>
        /// Gets fired when the AlmVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AlmValChanged;
        
        private static ITypedElement RetrieveAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("Amp")));
        }
        
        /// <summary>
        /// Raises the AmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Amp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAmp(object sender, System.EventArgs eventArgs)
        {
            this.Amp = null;
        }
        
        private static ITypedElement RetrieveTmpReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("Tmp")));
        }
        
        /// <summary>
        /// Raises the TmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Tmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmp(object sender, System.EventArgs eventArgs)
        {
            this.Tmp = null;
        }
        
        private static ITypedElement RetrieveTmpRlReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("TmpRl")));
        }
        
        /// <summary>
        /// Raises the TmpRlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmpRlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmpRlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmpRlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmpRlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmpRlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmpRl property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmpRl(object sender, System.EventArgs eventArgs)
        {
            this.TmpRl = null;
        }
        
        private static ITypedElement RetrieveLodRsvAlmReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("LodRsvAlm")));
        }
        
        /// <summary>
        /// Raises the LodRsvAlmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLodRsvAlmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LodRsvAlmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LodRsvAlmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLodRsvAlmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LodRsvAlmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LodRsvAlm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLodRsvAlm(object sender, System.EventArgs eventArgs)
        {
            this.LodRsvAlm = null;
        }
        
        private static ITypedElement RetrieveLodRsvTrReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("LodRsvTr")));
        }
        
        /// <summary>
        /// Raises the LodRsvTrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLodRsvTrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LodRsvTrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LodRsvTrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLodRsvTrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LodRsvTrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LodRsvTr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLodRsvTr(object sender, System.EventArgs eventArgs)
        {
            this.LodRsvTr = null;
        }
        
        private static ITypedElement RetrieveAgeRatReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("AgeRat")));
        }
        
        /// <summary>
        /// Raises the AgeRatChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAgeRatChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AgeRatChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AgeRatChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAgeRatChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AgeRatChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AgeRat property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAgeRat(object sender, System.EventArgs eventArgs)
        {
            this.AgeRat = null;
        }
        
        private static ITypedElement RetrieveStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("Str")));
        }
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        private static ITypedElement RetrieveOpReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("Op")));
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        private static ITypedElement RetrieveAlmThmReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("AlmThm")));
        }
        
        /// <summary>
        /// Raises the AlmThmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlmThmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AlmThmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AlmThmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlmThmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AlmThmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AlmThm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAlmThm(object sender, System.EventArgs eventArgs)
        {
            this.AlmThm = null;
        }
        
        private static ITypedElement RetrieveTmTmpStReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("TmTmpSt")));
        }
        
        /// <summary>
        /// Raises the TmTmpStChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmTmpStChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmTmpStChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmTmpStChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmTmpStChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmTmpStChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmTmpSt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmTmpSt(object sender, System.EventArgs eventArgs)
        {
            this.TmTmpSt = null;
        }
        
        private static ITypedElement RetrieveTmAStReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("TmASt")));
        }
        
        /// <summary>
        /// Raises the TmAStChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmAStChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmAStChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmAStChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmAStChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmAStChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmASt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmASt(object sender, System.EventArgs eventArgs)
        {
            this.TmASt = null;
        }
        
        private static ITypedElement RetrieveTmTmpCrvReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("TmTmpCrv")));
        }
        
        /// <summary>
        /// Raises the TmTmpCrvChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmTmpCrvChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmTmpCrvChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmTmpCrvChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmTmpCrvChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmTmpCrvChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmTmpCrv property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmTmpCrv(object sender, System.EventArgs eventArgs)
        {
            this.TmTmpCrv = null;
        }
        
        private static ITypedElement RetrieveTmACrvReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("TmACrv")));
        }
        
        /// <summary>
        /// Raises the TmACrvChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmACrvChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmACrvChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmACrvChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmACrvChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmACrvChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmACrv property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmACrv(object sender, System.EventArgs eventArgs)
        {
            this.TmACrv = null;
        }
        
        private static ITypedElement RetrieveTmpMaxReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("TmpMax")));
        }
        
        /// <summary>
        /// Raises the TmpMaxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmpMaxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmpMaxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmpMaxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmpMaxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmpMaxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmpMax property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmpMax(object sender, System.EventArgs eventArgs)
        {
            this.TmpMax = null;
        }
        
        private static ITypedElement RetrieveStrValReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("StrVal")));
        }
        
        /// <summary>
        /// Raises the StrValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StrVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStrVal(object sender, System.EventArgs eventArgs)
        {
            this.StrVal = null;
        }
        
        private static ITypedElement RetrieveOpDlTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("OpDlTmms")));
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.OpDlTmms = null;
        }
        
        private static ITypedElement RetrieveMinOpTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("MinOpTmms")));
        }
        
        /// <summary>
        /// Raises the MinOpTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinOpTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinOpTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinOpTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinOpTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinOpTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinOpTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinOpTmms(object sender, System.EventArgs eventArgs)
        {
            this.MinOpTmms = null;
        }
        
        private static ITypedElement RetrieveMaxOpTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("MaxOpTmms")));
        }
        
        /// <summary>
        /// Raises the MaxOpTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOpTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOpTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxOpTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOpTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOpTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxOpTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxOpTmms(object sender, System.EventArgs eventArgs)
        {
            this.MaxOpTmms = null;
        }
        
        private static ITypedElement RetrieveRsDlTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("RsDlTmms")));
        }
        
        /// <summary>
        /// Raises the RsDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RsDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RsDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRsDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.RsDlTmms = null;
        }
        
        private static ITypedElement RetrieveConsTmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("ConsTms")));
        }
        
        /// <summary>
        /// Raises the ConsTmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConsTmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConsTmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConsTmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConsTmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConsTmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ConsTms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetConsTms(object sender, System.EventArgs eventArgs)
        {
            this.ConsTms = null;
        }
        
        private static ITypedElement RetrieveAlmValReference()
        {
            return ((ITypedElement)(((ModelElement)(PTTR.ClassInstance)).Resolve("AlmVal")));
        }
        
        /// <summary>
        /// Raises the AlmValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlmValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AlmValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AlmValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlmValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AlmValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AlmVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAlmVal(object sender, System.EventArgs eventArgs)
        {
            this.AlmVal = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "AMP"))
            {
                this.Amp = ((IMV)(value));
                return;
            }
            if ((feature == "TMP"))
            {
                this.Tmp = ((IMV)(value));
                return;
            }
            if ((feature == "TMPRL"))
            {
                this.TmpRl = ((IMV)(value));
                return;
            }
            if ((feature == "LODRSVALM"))
            {
                this.LodRsvAlm = ((IMV)(value));
                return;
            }
            if ((feature == "LODRSVTR"))
            {
                this.LodRsvTr = ((IMV)(value));
                return;
            }
            if ((feature == "AGERAT"))
            {
                this.AgeRat = ((IMV)(value));
                return;
            }
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "ALMTHM"))
            {
                this.AlmThm = ((IACT)(value));
                return;
            }
            if ((feature == "TMTMPST"))
            {
                this.TmTmpSt = ((ICSD)(value));
                return;
            }
            if ((feature == "TMAST"))
            {
                this.TmASt = ((ICSD)(value));
                return;
            }
            if ((feature == "TMTMPCRV"))
            {
                this.TmTmpCrv = ((ICURVE)(value));
                return;
            }
            if ((feature == "TMACRV"))
            {
                this.TmACrv = ((ICURVE)(value));
                return;
            }
            if ((feature == "TMPMAX"))
            {
                this.TmpMax = ((IASG)(value));
                return;
            }
            if ((feature == "STRVAL"))
            {
                this.StrVal = ((IASG)(value));
                return;
            }
            if ((feature == "OPDLTMMS"))
            {
                this.OpDlTmms = ((IING)(value));
                return;
            }
            if ((feature == "MINOPTMMS"))
            {
                this.MinOpTmms = ((IING)(value));
                return;
            }
            if ((feature == "MAXOPTMMS"))
            {
                this.MaxOpTmms = ((IING)(value));
                return;
            }
            if ((feature == "RSDLTMMS"))
            {
                this.RsDlTmms = ((IING)(value));
                return;
            }
            if ((feature == "CONSTMS"))
            {
                this.ConsTms = ((IING)(value));
                return;
            }
            if ((feature == "ALMVAL"))
            {
                this.AlmVal = ((IASG)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Amp"))
            {
                return new AmpProxy(this);
            }
            if ((attribute == "Tmp"))
            {
                return new TmpProxy(this);
            }
            if ((attribute == "TmpRl"))
            {
                return new TmpRlProxy(this);
            }
            if ((attribute == "LodRsvAlm"))
            {
                return new LodRsvAlmProxy(this);
            }
            if ((attribute == "LodRsvTr"))
            {
                return new LodRsvTrProxy(this);
            }
            if ((attribute == "AgeRat"))
            {
                return new AgeRatProxy(this);
            }
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "AlmThm"))
            {
                return new AlmThmProxy(this);
            }
            if ((attribute == "TmTmpSt"))
            {
                return new TmTmpStProxy(this);
            }
            if ((attribute == "TmASt"))
            {
                return new TmAStProxy(this);
            }
            if ((attribute == "TmTmpCrv"))
            {
                return new TmTmpCrvProxy(this);
            }
            if ((attribute == "TmACrv"))
            {
                return new TmACrvProxy(this);
            }
            if ((attribute == "TmpMax"))
            {
                return new TmpMaxProxy(this);
            }
            if ((attribute == "StrVal"))
            {
                return new StrValProxy(this);
            }
            if ((attribute == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((attribute == "MinOpTmms"))
            {
                return new MinOpTmmsProxy(this);
            }
            if ((attribute == "MaxOpTmms"))
            {
                return new MaxOpTmmsProxy(this);
            }
            if ((attribute == "RsDlTmms"))
            {
                return new RsDlTmmsProxy(this);
            }
            if ((attribute == "ConsTms"))
            {
                return new ConsTmsProxy(this);
            }
            if ((attribute == "AlmVal"))
            {
                return new AlmValProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Amp"))
            {
                return new AmpProxy(this);
            }
            if ((reference == "Tmp"))
            {
                return new TmpProxy(this);
            }
            if ((reference == "TmpRl"))
            {
                return new TmpRlProxy(this);
            }
            if ((reference == "LodRsvAlm"))
            {
                return new LodRsvAlmProxy(this);
            }
            if ((reference == "LodRsvTr"))
            {
                return new LodRsvTrProxy(this);
            }
            if ((reference == "AgeRat"))
            {
                return new AgeRatProxy(this);
            }
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "AlmThm"))
            {
                return new AlmThmProxy(this);
            }
            if ((reference == "TmTmpSt"))
            {
                return new TmTmpStProxy(this);
            }
            if ((reference == "TmASt"))
            {
                return new TmAStProxy(this);
            }
            if ((reference == "TmTmpCrv"))
            {
                return new TmTmpCrvProxy(this);
            }
            if ((reference == "TmACrv"))
            {
                return new TmACrvProxy(this);
            }
            if ((reference == "TmpMax"))
            {
                return new TmpMaxProxy(this);
            }
            if ((reference == "StrVal"))
            {
                return new StrValProxy(this);
            }
            if ((reference == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((reference == "MinOpTmms"))
            {
                return new MinOpTmmsProxy(this);
            }
            if ((reference == "MaxOpTmms"))
            {
                return new MaxOpTmmsProxy(this);
            }
            if ((reference == "RsDlTmms"))
            {
                return new RsDlTmmsProxy(this);
            }
            if ((reference == "ConsTms"))
            {
                return new ConsTmsProxy(this);
            }
            if ((reference == "AlmVal"))
            {
                return new AlmValProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PTTR")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PTTR class
        /// </summary>
        public class PTTRReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PTTR _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PTTRReferencedElementsCollection(PTTR parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Amp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Tmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmpRl != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LodRsvAlm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LodRsvTr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AgeRat != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AlmThm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmTmpSt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmASt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmTmpCrv != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmACrv != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmpMax != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StrVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinOpTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxOpTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RsDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ConsTms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AlmVal != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AmpChanged += this.PropagateValueChanges;
                this._parent.TmpChanged += this.PropagateValueChanges;
                this._parent.TmpRlChanged += this.PropagateValueChanges;
                this._parent.LodRsvAlmChanged += this.PropagateValueChanges;
                this._parent.LodRsvTrChanged += this.PropagateValueChanges;
                this._parent.AgeRatChanged += this.PropagateValueChanges;
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.AlmThmChanged += this.PropagateValueChanges;
                this._parent.TmTmpStChanged += this.PropagateValueChanges;
                this._parent.TmAStChanged += this.PropagateValueChanges;
                this._parent.TmTmpCrvChanged += this.PropagateValueChanges;
                this._parent.TmACrvChanged += this.PropagateValueChanges;
                this._parent.TmpMaxChanged += this.PropagateValueChanges;
                this._parent.StrValChanged += this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged += this.PropagateValueChanges;
                this._parent.MinOpTmmsChanged += this.PropagateValueChanges;
                this._parent.MaxOpTmmsChanged += this.PropagateValueChanges;
                this._parent.RsDlTmmsChanged += this.PropagateValueChanges;
                this._parent.ConsTmsChanged += this.PropagateValueChanges;
                this._parent.AlmValChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AmpChanged -= this.PropagateValueChanges;
                this._parent.TmpChanged -= this.PropagateValueChanges;
                this._parent.TmpRlChanged -= this.PropagateValueChanges;
                this._parent.LodRsvAlmChanged -= this.PropagateValueChanges;
                this._parent.LodRsvTrChanged -= this.PropagateValueChanges;
                this._parent.AgeRatChanged -= this.PropagateValueChanges;
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.AlmThmChanged -= this.PropagateValueChanges;
                this._parent.TmTmpStChanged -= this.PropagateValueChanges;
                this._parent.TmAStChanged -= this.PropagateValueChanges;
                this._parent.TmTmpCrvChanged -= this.PropagateValueChanges;
                this._parent.TmACrvChanged -= this.PropagateValueChanges;
                this._parent.TmpMaxChanged -= this.PropagateValueChanges;
                this._parent.StrValChanged -= this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged -= this.PropagateValueChanges;
                this._parent.MinOpTmmsChanged -= this.PropagateValueChanges;
                this._parent.MaxOpTmmsChanged -= this.PropagateValueChanges;
                this._parent.RsDlTmmsChanged -= this.PropagateValueChanges;
                this._parent.ConsTmsChanged -= this.PropagateValueChanges;
                this._parent.AlmValChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Amp == null))
                {
                    IMV ampCasted = item.As<IMV>();
                    if ((ampCasted != null))
                    {
                        this._parent.Amp = ampCasted;
                        return;
                    }
                }
                if ((this._parent.Tmp == null))
                {
                    IMV tmpCasted = item.As<IMV>();
                    if ((tmpCasted != null))
                    {
                        this._parent.Tmp = tmpCasted;
                        return;
                    }
                }
                if ((this._parent.TmpRl == null))
                {
                    IMV tmpRlCasted = item.As<IMV>();
                    if ((tmpRlCasted != null))
                    {
                        this._parent.TmpRl = tmpRlCasted;
                        return;
                    }
                }
                if ((this._parent.LodRsvAlm == null))
                {
                    IMV lodRsvAlmCasted = item.As<IMV>();
                    if ((lodRsvAlmCasted != null))
                    {
                        this._parent.LodRsvAlm = lodRsvAlmCasted;
                        return;
                    }
                }
                if ((this._parent.LodRsvTr == null))
                {
                    IMV lodRsvTrCasted = item.As<IMV>();
                    if ((lodRsvTrCasted != null))
                    {
                        this._parent.LodRsvTr = lodRsvTrCasted;
                        return;
                    }
                }
                if ((this._parent.AgeRat == null))
                {
                    IMV ageRatCasted = item.As<IMV>();
                    if ((ageRatCasted != null))
                    {
                        this._parent.AgeRat = ageRatCasted;
                        return;
                    }
                }
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.AlmThm == null))
                {
                    IACT almThmCasted = item.As<IACT>();
                    if ((almThmCasted != null))
                    {
                        this._parent.AlmThm = almThmCasted;
                        return;
                    }
                }
                if ((this._parent.TmTmpSt == null))
                {
                    ICSD tmTmpStCasted = item.As<ICSD>();
                    if ((tmTmpStCasted != null))
                    {
                        this._parent.TmTmpSt = tmTmpStCasted;
                        return;
                    }
                }
                if ((this._parent.TmASt == null))
                {
                    ICSD tmAStCasted = item.As<ICSD>();
                    if ((tmAStCasted != null))
                    {
                        this._parent.TmASt = tmAStCasted;
                        return;
                    }
                }
                if ((this._parent.TmTmpCrv == null))
                {
                    ICURVE tmTmpCrvCasted = item.As<ICURVE>();
                    if ((tmTmpCrvCasted != null))
                    {
                        this._parent.TmTmpCrv = tmTmpCrvCasted;
                        return;
                    }
                }
                if ((this._parent.TmACrv == null))
                {
                    ICURVE tmACrvCasted = item.As<ICURVE>();
                    if ((tmACrvCasted != null))
                    {
                        this._parent.TmACrv = tmACrvCasted;
                        return;
                    }
                }
                if ((this._parent.TmpMax == null))
                {
                    IASG tmpMaxCasted = item.As<IASG>();
                    if ((tmpMaxCasted != null))
                    {
                        this._parent.TmpMax = tmpMaxCasted;
                        return;
                    }
                }
                if ((this._parent.StrVal == null))
                {
                    IASG strValCasted = item.As<IASG>();
                    if ((strValCasted != null))
                    {
                        this._parent.StrVal = strValCasted;
                        return;
                    }
                }
                if ((this._parent.OpDlTmms == null))
                {
                    IING opDlTmmsCasted = item.As<IING>();
                    if ((opDlTmmsCasted != null))
                    {
                        this._parent.OpDlTmms = opDlTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.MinOpTmms == null))
                {
                    IING minOpTmmsCasted = item.As<IING>();
                    if ((minOpTmmsCasted != null))
                    {
                        this._parent.MinOpTmms = minOpTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.MaxOpTmms == null))
                {
                    IING maxOpTmmsCasted = item.As<IING>();
                    if ((maxOpTmmsCasted != null))
                    {
                        this._parent.MaxOpTmms = maxOpTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.RsDlTmms == null))
                {
                    IING rsDlTmmsCasted = item.As<IING>();
                    if ((rsDlTmmsCasted != null))
                    {
                        this._parent.RsDlTmms = rsDlTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.ConsTms == null))
                {
                    IING consTmsCasted = item.As<IING>();
                    if ((consTmsCasted != null))
                    {
                        this._parent.ConsTms = consTmsCasted;
                        return;
                    }
                }
                if ((this._parent.AlmVal == null))
                {
                    IASG almValCasted = item.As<IASG>();
                    if ((almValCasted != null))
                    {
                        this._parent.AlmVal = almValCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Amp = null;
                this._parent.Tmp = null;
                this._parent.TmpRl = null;
                this._parent.LodRsvAlm = null;
                this._parent.LodRsvTr = null;
                this._parent.AgeRat = null;
                this._parent.Str = null;
                this._parent.Op = null;
                this._parent.AlmThm = null;
                this._parent.TmTmpSt = null;
                this._parent.TmASt = null;
                this._parent.TmTmpCrv = null;
                this._parent.TmACrv = null;
                this._parent.TmpMax = null;
                this._parent.StrVal = null;
                this._parent.OpDlTmms = null;
                this._parent.MinOpTmms = null;
                this._parent.MaxOpTmms = null;
                this._parent.RsDlTmms = null;
                this._parent.ConsTms = null;
                this._parent.AlmVal = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Amp))
                {
                    return true;
                }
                if ((item == this._parent.Tmp))
                {
                    return true;
                }
                if ((item == this._parent.TmpRl))
                {
                    return true;
                }
                if ((item == this._parent.LodRsvAlm))
                {
                    return true;
                }
                if ((item == this._parent.LodRsvTr))
                {
                    return true;
                }
                if ((item == this._parent.AgeRat))
                {
                    return true;
                }
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.AlmThm))
                {
                    return true;
                }
                if ((item == this._parent.TmTmpSt))
                {
                    return true;
                }
                if ((item == this._parent.TmASt))
                {
                    return true;
                }
                if ((item == this._parent.TmTmpCrv))
                {
                    return true;
                }
                if ((item == this._parent.TmACrv))
                {
                    return true;
                }
                if ((item == this._parent.TmpMax))
                {
                    return true;
                }
                if ((item == this._parent.StrVal))
                {
                    return true;
                }
                if ((item == this._parent.OpDlTmms))
                {
                    return true;
                }
                if ((item == this._parent.MinOpTmms))
                {
                    return true;
                }
                if ((item == this._parent.MaxOpTmms))
                {
                    return true;
                }
                if ((item == this._parent.RsDlTmms))
                {
                    return true;
                }
                if ((item == this._parent.ConsTms))
                {
                    return true;
                }
                if ((item == this._parent.AlmVal))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Amp != null))
                {
                    array[arrayIndex] = this._parent.Amp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Tmp != null))
                {
                    array[arrayIndex] = this._parent.Tmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmpRl != null))
                {
                    array[arrayIndex] = this._parent.TmpRl;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LodRsvAlm != null))
                {
                    array[arrayIndex] = this._parent.LodRsvAlm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LodRsvTr != null))
                {
                    array[arrayIndex] = this._parent.LodRsvTr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AgeRat != null))
                {
                    array[arrayIndex] = this._parent.AgeRat;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AlmThm != null))
                {
                    array[arrayIndex] = this._parent.AlmThm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmTmpSt != null))
                {
                    array[arrayIndex] = this._parent.TmTmpSt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmASt != null))
                {
                    array[arrayIndex] = this._parent.TmASt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmTmpCrv != null))
                {
                    array[arrayIndex] = this._parent.TmTmpCrv;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmACrv != null))
                {
                    array[arrayIndex] = this._parent.TmACrv;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmpMax != null))
                {
                    array[arrayIndex] = this._parent.TmpMax;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StrVal != null))
                {
                    array[arrayIndex] = this._parent.StrVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpDlTmms != null))
                {
                    array[arrayIndex] = this._parent.OpDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinOpTmms != null))
                {
                    array[arrayIndex] = this._parent.MinOpTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxOpTmms != null))
                {
                    array[arrayIndex] = this._parent.MaxOpTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RsDlTmms != null))
                {
                    array[arrayIndex] = this._parent.RsDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ConsTms != null))
                {
                    array[arrayIndex] = this._parent.ConsTms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AlmVal != null))
                {
                    array[arrayIndex] = this._parent.AlmVal;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Amp == item))
                {
                    this._parent.Amp = null;
                    return true;
                }
                if ((this._parent.Tmp == item))
                {
                    this._parent.Tmp = null;
                    return true;
                }
                if ((this._parent.TmpRl == item))
                {
                    this._parent.TmpRl = null;
                    return true;
                }
                if ((this._parent.LodRsvAlm == item))
                {
                    this._parent.LodRsvAlm = null;
                    return true;
                }
                if ((this._parent.LodRsvTr == item))
                {
                    this._parent.LodRsvTr = null;
                    return true;
                }
                if ((this._parent.AgeRat == item))
                {
                    this._parent.AgeRat = null;
                    return true;
                }
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.AlmThm == item))
                {
                    this._parent.AlmThm = null;
                    return true;
                }
                if ((this._parent.TmTmpSt == item))
                {
                    this._parent.TmTmpSt = null;
                    return true;
                }
                if ((this._parent.TmASt == item))
                {
                    this._parent.TmASt = null;
                    return true;
                }
                if ((this._parent.TmTmpCrv == item))
                {
                    this._parent.TmTmpCrv = null;
                    return true;
                }
                if ((this._parent.TmACrv == item))
                {
                    this._parent.TmACrv = null;
                    return true;
                }
                if ((this._parent.TmpMax == item))
                {
                    this._parent.TmpMax = null;
                    return true;
                }
                if ((this._parent.StrVal == item))
                {
                    this._parent.StrVal = null;
                    return true;
                }
                if ((this._parent.OpDlTmms == item))
                {
                    this._parent.OpDlTmms = null;
                    return true;
                }
                if ((this._parent.MinOpTmms == item))
                {
                    this._parent.MinOpTmms = null;
                    return true;
                }
                if ((this._parent.MaxOpTmms == item))
                {
                    this._parent.MaxOpTmms = null;
                    return true;
                }
                if ((this._parent.RsDlTmms == item))
                {
                    this._parent.RsDlTmms = null;
                    return true;
                }
                if ((this._parent.ConsTms == item))
                {
                    this._parent.ConsTms = null;
                    return true;
                }
                if ((this._parent.AlmVal == item))
                {
                    this._parent.AlmVal = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Amp).Concat(this._parent.Tmp).Concat(this._parent.TmpRl).Concat(this._parent.LodRsvAlm).Concat(this._parent.LodRsvTr).Concat(this._parent.AgeRat).Concat(this._parent.Str).Concat(this._parent.Op).Concat(this._parent.AlmThm).Concat(this._parent.TmTmpSt).Concat(this._parent.TmASt).Concat(this._parent.TmTmpCrv).Concat(this._parent.TmACrv).Concat(this._parent.TmpMax).Concat(this._parent.StrVal).Concat(this._parent.OpDlTmms).Concat(this._parent.MinOpTmms).Concat(this._parent.MaxOpTmms).Concat(this._parent.RsDlTmms).Concat(this._parent.ConsTms).Concat(this._parent.AlmVal).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Amp property
        /// </summary>
        private sealed class AmpProxy : ModelPropertyChange<IPTTR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmpProxy(IPTTR modelElement) : 
                    base(modelElement, "Amp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Amp;
                }
                set
                {
                    this.ModelElement.Amp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tmp property
        /// </summary>
        private sealed class TmpProxy : ModelPropertyChange<IPTTR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmpProxy(IPTTR modelElement) : 
                    base(modelElement, "Tmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Tmp;
                }
                set
                {
                    this.ModelElement.Tmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmpRl property
        /// </summary>
        private sealed class TmpRlProxy : ModelPropertyChange<IPTTR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmpRlProxy(IPTTR modelElement) : 
                    base(modelElement, "TmpRl")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.TmpRl;
                }
                set
                {
                    this.ModelElement.TmpRl = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LodRsvAlm property
        /// </summary>
        private sealed class LodRsvAlmProxy : ModelPropertyChange<IPTTR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LodRsvAlmProxy(IPTTR modelElement) : 
                    base(modelElement, "LodRsvAlm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.LodRsvAlm;
                }
                set
                {
                    this.ModelElement.LodRsvAlm = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LodRsvTr property
        /// </summary>
        private sealed class LodRsvTrProxy : ModelPropertyChange<IPTTR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LodRsvTrProxy(IPTTR modelElement) : 
                    base(modelElement, "LodRsvTr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.LodRsvTr;
                }
                set
                {
                    this.ModelElement.LodRsvTr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AgeRat property
        /// </summary>
        private sealed class AgeRatProxy : ModelPropertyChange<IPTTR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AgeRatProxy(IPTTR modelElement) : 
                    base(modelElement, "AgeRat")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.AgeRat;
                }
                set
                {
                    this.ModelElement.AgeRat = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IPTTR, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IPTTR modelElement) : 
                    base(modelElement, "Str")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IPTTR, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IPTTR modelElement) : 
                    base(modelElement, "Op")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AlmThm property
        /// </summary>
        private sealed class AlmThmProxy : ModelPropertyChange<IPTTR, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AlmThmProxy(IPTTR modelElement) : 
                    base(modelElement, "AlmThm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.AlmThm;
                }
                set
                {
                    this.ModelElement.AlmThm = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmTmpSt property
        /// </summary>
        private sealed class TmTmpStProxy : ModelPropertyChange<IPTTR, ICSD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmTmpStProxy(IPTTR modelElement) : 
                    base(modelElement, "TmTmpSt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICSD Value
            {
                get
                {
                    return this.ModelElement.TmTmpSt;
                }
                set
                {
                    this.ModelElement.TmTmpSt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmASt property
        /// </summary>
        private sealed class TmAStProxy : ModelPropertyChange<IPTTR, ICSD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmAStProxy(IPTTR modelElement) : 
                    base(modelElement, "TmASt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICSD Value
            {
                get
                {
                    return this.ModelElement.TmASt;
                }
                set
                {
                    this.ModelElement.TmASt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmTmpCrv property
        /// </summary>
        private sealed class TmTmpCrvProxy : ModelPropertyChange<IPTTR, ICURVE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmTmpCrvProxy(IPTTR modelElement) : 
                    base(modelElement, "TmTmpCrv")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICURVE Value
            {
                get
                {
                    return this.ModelElement.TmTmpCrv;
                }
                set
                {
                    this.ModelElement.TmTmpCrv = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmACrv property
        /// </summary>
        private sealed class TmACrvProxy : ModelPropertyChange<IPTTR, ICURVE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmACrvProxy(IPTTR modelElement) : 
                    base(modelElement, "TmACrv")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICURVE Value
            {
                get
                {
                    return this.ModelElement.TmACrv;
                }
                set
                {
                    this.ModelElement.TmACrv = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmpMax property
        /// </summary>
        private sealed class TmpMaxProxy : ModelPropertyChange<IPTTR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmpMaxProxy(IPTTR modelElement) : 
                    base(modelElement, "TmpMax")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.TmpMax;
                }
                set
                {
                    this.ModelElement.TmpMax = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StrVal property
        /// </summary>
        private sealed class StrValProxy : ModelPropertyChange<IPTTR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrValProxy(IPTTR modelElement) : 
                    base(modelElement, "StrVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.StrVal;
                }
                set
                {
                    this.ModelElement.StrVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpDlTmms property
        /// </summary>
        private sealed class OpDlTmmsProxy : ModelPropertyChange<IPTTR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpDlTmmsProxy(IPTTR modelElement) : 
                    base(modelElement, "OpDlTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.OpDlTmms;
                }
                set
                {
                    this.ModelElement.OpDlTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MinOpTmms property
        /// </summary>
        private sealed class MinOpTmmsProxy : ModelPropertyChange<IPTTR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinOpTmmsProxy(IPTTR modelElement) : 
                    base(modelElement, "MinOpTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MinOpTmms;
                }
                set
                {
                    this.ModelElement.MinOpTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxOpTmms property
        /// </summary>
        private sealed class MaxOpTmmsProxy : ModelPropertyChange<IPTTR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxOpTmmsProxy(IPTTR modelElement) : 
                    base(modelElement, "MaxOpTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MaxOpTmms;
                }
                set
                {
                    this.ModelElement.MaxOpTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RsDlTmms property
        /// </summary>
        private sealed class RsDlTmmsProxy : ModelPropertyChange<IPTTR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RsDlTmmsProxy(IPTTR modelElement) : 
                    base(modelElement, "RsDlTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RsDlTmms;
                }
                set
                {
                    this.ModelElement.RsDlTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ConsTms property
        /// </summary>
        private sealed class ConsTmsProxy : ModelPropertyChange<IPTTR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConsTmsProxy(IPTTR modelElement) : 
                    base(modelElement, "ConsTms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.ConsTms;
                }
                set
                {
                    this.ModelElement.ConsTms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AlmVal property
        /// </summary>
        private sealed class AlmValProxy : ModelPropertyChange<IPTTR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AlmValProxy(IPTTR modelElement) : 
                    base(modelElement, "AlmVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.AlmVal;
                }
                set
                {
                    this.ModelElement.AlmVal = value;
                }
            }
        }
    }
}

