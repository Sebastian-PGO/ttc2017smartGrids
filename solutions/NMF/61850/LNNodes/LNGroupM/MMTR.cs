//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM
{
    
    
    /// <summary>
    /// The default implementation of the MMTR class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pM")]
    [XmlNamespacePrefixAttribute("groupm")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupM/MMTR")]
    public partial class MMTR : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM.GroupM, IMMTR, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EEHealth property
        /// </summary>
        private Nullable<HealthStateKind> _eEHealth;
        
        private static Lazy<ITypedElement> _eEHealthAttribute = new Lazy<ITypedElement>(RetrieveEEHealthAttribute);
        
        private static Lazy<ITypedElement> _eENameReference = new Lazy<ITypedElement>(RetrieveEENameReference);
        
        /// <summary>
        /// The backing field for the EEName property
        /// </summary>
        private IDPL _eEName;
        
        private static Lazy<ITypedElement> _totVAhReference = new Lazy<ITypedElement>(RetrieveTotVAhReference);
        
        /// <summary>
        /// The backing field for the TotVAh property
        /// </summary>
        private IBCR _totVAh;
        
        private static Lazy<ITypedElement> _totWhReference = new Lazy<ITypedElement>(RetrieveTotWhReference);
        
        /// <summary>
        /// The backing field for the TotWh property
        /// </summary>
        private IBCR _totWh;
        
        private static Lazy<ITypedElement> _totVArhReference = new Lazy<ITypedElement>(RetrieveTotVArhReference);
        
        /// <summary>
        /// The backing field for the TotVArh property
        /// </summary>
        private IBCR _totVArh;
        
        private static Lazy<ITypedElement> _supWhReference = new Lazy<ITypedElement>(RetrieveSupWhReference);
        
        /// <summary>
        /// The backing field for the SupWh property
        /// </summary>
        private IBCR _supWh;
        
        private static Lazy<ITypedElement> _supVArhReference = new Lazy<ITypedElement>(RetrieveSupVArhReference);
        
        /// <summary>
        /// The backing field for the SupVArh property
        /// </summary>
        private IBCR _supVArh;
        
        private static Lazy<ITypedElement> _dmdWhReference = new Lazy<ITypedElement>(RetrieveDmdWhReference);
        
        /// <summary>
        /// The backing field for the DmdWh property
        /// </summary>
        private IBCR _dmdWh;
        
        private static Lazy<ITypedElement> _dmdVArhReference = new Lazy<ITypedElement>(RetrieveDmdVArhReference);
        
        /// <summary>
        /// The backing field for the DmdVArh property
        /// </summary>
        private IBCR _dmdVArh;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<HealthStateKind> EEHealth
        {
            get
            {
                return this._eEHealth;
            }
            set
            {
                if ((this._eEHealth != value))
                {
                    Nullable<HealthStateKind> old = this._eEHealth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEEHealthChanging(e);
                    this.OnPropertyChanging("EEHealth", e, _eEHealthAttribute);
                    this._eEHealth = value;
                    this.OnEEHealthChanged(e);
                    this.OnPropertyChanged("EEHealth", e, _eEHealthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The EEName property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPL EEName
        {
            get
            {
                return this._eEName;
            }
            set
            {
                if ((this._eEName != value))
                {
                    IDPL old = this._eEName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEENameChanging(e);
                    this.OnPropertyChanging("EEName", e, _eENameReference);
                    this._eEName = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEEName;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEEName;
                    }
                    this.OnEENameChanged(e);
                    this.OnPropertyChanged("EEName", e, _eENameReference);
                }
            }
        }
        
        /// <summary>
        /// The TotVAh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBCR TotVAh
        {
            get
            {
                return this._totVAh;
            }
            set
            {
                if ((this._totVAh != value))
                {
                    IBCR old = this._totVAh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotVAhChanging(e);
                    this.OnPropertyChanging("TotVAh", e, _totVAhReference);
                    this._totVAh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTotVAh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTotVAh;
                    }
                    this.OnTotVAhChanged(e);
                    this.OnPropertyChanged("TotVAh", e, _totVAhReference);
                }
            }
        }
        
        /// <summary>
        /// The TotWh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBCR TotWh
        {
            get
            {
                return this._totWh;
            }
            set
            {
                if ((this._totWh != value))
                {
                    IBCR old = this._totWh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotWhChanging(e);
                    this.OnPropertyChanging("TotWh", e, _totWhReference);
                    this._totWh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTotWh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTotWh;
                    }
                    this.OnTotWhChanged(e);
                    this.OnPropertyChanged("TotWh", e, _totWhReference);
                }
            }
        }
        
        /// <summary>
        /// The TotVArh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBCR TotVArh
        {
            get
            {
                return this._totVArh;
            }
            set
            {
                if ((this._totVArh != value))
                {
                    IBCR old = this._totVArh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotVArhChanging(e);
                    this.OnPropertyChanging("TotVArh", e, _totVArhReference);
                    this._totVArh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTotVArh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTotVArh;
                    }
                    this.OnTotVArhChanged(e);
                    this.OnPropertyChanged("TotVArh", e, _totVArhReference);
                }
            }
        }
        
        /// <summary>
        /// The SupWh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBCR SupWh
        {
            get
            {
                return this._supWh;
            }
            set
            {
                if ((this._supWh != value))
                {
                    IBCR old = this._supWh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupWhChanging(e);
                    this.OnPropertyChanging("SupWh", e, _supWhReference);
                    this._supWh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSupWh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSupWh;
                    }
                    this.OnSupWhChanged(e);
                    this.OnPropertyChanged("SupWh", e, _supWhReference);
                }
            }
        }
        
        /// <summary>
        /// The SupVArh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBCR SupVArh
        {
            get
            {
                return this._supVArh;
            }
            set
            {
                if ((this._supVArh != value))
                {
                    IBCR old = this._supVArh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupVArhChanging(e);
                    this.OnPropertyChanging("SupVArh", e, _supVArhReference);
                    this._supVArh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSupVArh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSupVArh;
                    }
                    this.OnSupVArhChanged(e);
                    this.OnPropertyChanged("SupVArh", e, _supVArhReference);
                }
            }
        }
        
        /// <summary>
        /// The DmdWh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBCR DmdWh
        {
            get
            {
                return this._dmdWh;
            }
            set
            {
                if ((this._dmdWh != value))
                {
                    IBCR old = this._dmdWh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDmdWhChanging(e);
                    this.OnPropertyChanging("DmdWh", e, _dmdWhReference);
                    this._dmdWh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDmdWh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDmdWh;
                    }
                    this.OnDmdWhChanged(e);
                    this.OnPropertyChanged("DmdWh", e, _dmdWhReference);
                }
            }
        }
        
        /// <summary>
        /// The DmdVArh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBCR DmdVArh
        {
            get
            {
                return this._dmdVArh;
            }
            set
            {
                if ((this._dmdVArh != value))
                {
                    IBCR old = this._dmdVArh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDmdVArhChanging(e);
                    this.OnPropertyChanging("DmdVArh", e, _dmdVArhReference);
                    this._dmdVArh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDmdVArh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDmdVArh;
                    }
                    this.OnDmdVArhChanged(e);
                    this.OnPropertyChanged("DmdVArh", e, _dmdVArhReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MMTRReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupM/MMTR")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the EEName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanging;
        
        /// <summary>
        /// Gets fired when the EEName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanged;
        
        /// <summary>
        /// Gets fired before the TotVAh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotVAhChanging;
        
        /// <summary>
        /// Gets fired when the TotVAh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotVAhChanged;
        
        /// <summary>
        /// Gets fired before the TotWh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotWhChanging;
        
        /// <summary>
        /// Gets fired when the TotWh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotWhChanged;
        
        /// <summary>
        /// Gets fired before the TotVArh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotVArhChanging;
        
        /// <summary>
        /// Gets fired when the TotVArh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotVArhChanged;
        
        /// <summary>
        /// Gets fired before the SupWh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupWhChanging;
        
        /// <summary>
        /// Gets fired when the SupWh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupWhChanged;
        
        /// <summary>
        /// Gets fired before the SupVArh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupVArhChanging;
        
        /// <summary>
        /// Gets fired when the SupVArh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupVArhChanged;
        
        /// <summary>
        /// Gets fired before the DmdWh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DmdWhChanging;
        
        /// <summary>
        /// Gets fired when the DmdWh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DmdWhChanged;
        
        /// <summary>
        /// Gets fired before the DmdVArh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DmdVArhChanging;
        
        /// <summary>
        /// Gets fired when the DmdVArh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DmdVArhChanged;
        
        private static ITypedElement RetrieveEEHealthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MMTR.ClassInstance)).Resolve("EEHealth")));
        }
        
        /// <summary>
        /// Raises the EEHealthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EEHealthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEENameReference()
        {
            return ((ITypedElement)(((ModelElement)(MMTR.ClassInstance)).Resolve("EEName")));
        }
        
        /// <summary>
        /// Raises the EENameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EENameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EEName property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEEName(object sender, System.EventArgs eventArgs)
        {
            this.EEName = null;
        }
        
        private static ITypedElement RetrieveTotVAhReference()
        {
            return ((ITypedElement)(((ModelElement)(MMTR.ClassInstance)).Resolve("TotVAh")));
        }
        
        /// <summary>
        /// Raises the TotVAhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotVAhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotVAhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotVAhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotVAhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotVAhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TotVAh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTotVAh(object sender, System.EventArgs eventArgs)
        {
            this.TotVAh = null;
        }
        
        private static ITypedElement RetrieveTotWhReference()
        {
            return ((ITypedElement)(((ModelElement)(MMTR.ClassInstance)).Resolve("TotWh")));
        }
        
        /// <summary>
        /// Raises the TotWhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotWhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotWhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotWhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotWhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotWhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TotWh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTotWh(object sender, System.EventArgs eventArgs)
        {
            this.TotWh = null;
        }
        
        private static ITypedElement RetrieveTotVArhReference()
        {
            return ((ITypedElement)(((ModelElement)(MMTR.ClassInstance)).Resolve("TotVArh")));
        }
        
        /// <summary>
        /// Raises the TotVArhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotVArhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotVArhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotVArhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotVArhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotVArhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TotVArh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTotVArh(object sender, System.EventArgs eventArgs)
        {
            this.TotVArh = null;
        }
        
        private static ITypedElement RetrieveSupWhReference()
        {
            return ((ITypedElement)(((ModelElement)(MMTR.ClassInstance)).Resolve("SupWh")));
        }
        
        /// <summary>
        /// Raises the SupWhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupWhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupWhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupWhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupWhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupWhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SupWh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSupWh(object sender, System.EventArgs eventArgs)
        {
            this.SupWh = null;
        }
        
        private static ITypedElement RetrieveSupVArhReference()
        {
            return ((ITypedElement)(((ModelElement)(MMTR.ClassInstance)).Resolve("SupVArh")));
        }
        
        /// <summary>
        /// Raises the SupVArhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupVArhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupVArhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupVArhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupVArhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupVArhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SupVArh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSupVArh(object sender, System.EventArgs eventArgs)
        {
            this.SupVArh = null;
        }
        
        private static ITypedElement RetrieveDmdWhReference()
        {
            return ((ITypedElement)(((ModelElement)(MMTR.ClassInstance)).Resolve("DmdWh")));
        }
        
        /// <summary>
        /// Raises the DmdWhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDmdWhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DmdWhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DmdWhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDmdWhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DmdWhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DmdWh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDmdWh(object sender, System.EventArgs eventArgs)
        {
            this.DmdWh = null;
        }
        
        private static ITypedElement RetrieveDmdVArhReference()
        {
            return ((ITypedElement)(((ModelElement)(MMTR.ClassInstance)).Resolve("DmdVArh")));
        }
        
        /// <summary>
        /// Raises the DmdVArhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDmdVArhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DmdVArhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DmdVArhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDmdVArhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DmdVArhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DmdVArh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDmdVArh(object sender, System.EventArgs eventArgs)
        {
            this.DmdVArh = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EEHEALTH"))
            {
                return this.EEHealth;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EENAME"))
            {
                this.EEName = ((IDPL)(value));
                return;
            }
            if ((feature == "TOTVAH"))
            {
                this.TotVAh = ((IBCR)(value));
                return;
            }
            if ((feature == "TOTWH"))
            {
                this.TotWh = ((IBCR)(value));
                return;
            }
            if ((feature == "TOTVARH"))
            {
                this.TotVArh = ((IBCR)(value));
                return;
            }
            if ((feature == "SUPWH"))
            {
                this.SupWh = ((IBCR)(value));
                return;
            }
            if ((feature == "SUPVARH"))
            {
                this.SupVArh = ((IBCR)(value));
                return;
            }
            if ((feature == "DMDWH"))
            {
                this.DmdWh = ((IBCR)(value));
                return;
            }
            if ((feature == "DMDVARH"))
            {
                this.DmdVArh = ((IBCR)(value));
                return;
            }
            if ((feature == "EEHEALTH"))
            {
                this.EEHealth = ((HealthStateKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((attribute == "TotVAh"))
            {
                return new TotVAhProxy(this);
            }
            if ((attribute == "TotWh"))
            {
                return new TotWhProxy(this);
            }
            if ((attribute == "TotVArh"))
            {
                return new TotVArhProxy(this);
            }
            if ((attribute == "SupWh"))
            {
                return new SupWhProxy(this);
            }
            if ((attribute == "SupVArh"))
            {
                return new SupVArhProxy(this);
            }
            if ((attribute == "DmdWh"))
            {
                return new DmdWhProxy(this);
            }
            if ((attribute == "DmdVArh"))
            {
                return new DmdVArhProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((reference == "TotVAh"))
            {
                return new TotVAhProxy(this);
            }
            if ((reference == "TotWh"))
            {
                return new TotWhProxy(this);
            }
            if ((reference == "TotVArh"))
            {
                return new TotVArhProxy(this);
            }
            if ((reference == "SupWh"))
            {
                return new SupWhProxy(this);
            }
            if ((reference == "SupVArh"))
            {
                return new SupVArhProxy(this);
            }
            if ((reference == "DmdWh"))
            {
                return new DmdWhProxy(this);
            }
            if ((reference == "DmdVArh"))
            {
                return new DmdVArhProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupM/MMTR")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MMTR class
        /// </summary>
        public class MMTRReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MMTR _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MMTRReferencedElementsCollection(MMTR parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EEName != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TotVAh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TotWh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TotVArh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SupWh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SupVArh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DmdWh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DmdVArh != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EENameChanged += this.PropagateValueChanges;
                this._parent.TotVAhChanged += this.PropagateValueChanges;
                this._parent.TotWhChanged += this.PropagateValueChanges;
                this._parent.TotVArhChanged += this.PropagateValueChanges;
                this._parent.SupWhChanged += this.PropagateValueChanges;
                this._parent.SupVArhChanged += this.PropagateValueChanges;
                this._parent.DmdWhChanged += this.PropagateValueChanges;
                this._parent.DmdVArhChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EENameChanged -= this.PropagateValueChanges;
                this._parent.TotVAhChanged -= this.PropagateValueChanges;
                this._parent.TotWhChanged -= this.PropagateValueChanges;
                this._parent.TotVArhChanged -= this.PropagateValueChanges;
                this._parent.SupWhChanged -= this.PropagateValueChanges;
                this._parent.SupVArhChanged -= this.PropagateValueChanges;
                this._parent.DmdWhChanged -= this.PropagateValueChanges;
                this._parent.DmdVArhChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EEName == null))
                {
                    IDPL eENameCasted = item.As<IDPL>();
                    if ((eENameCasted != null))
                    {
                        this._parent.EEName = eENameCasted;
                        return;
                    }
                }
                if ((this._parent.TotVAh == null))
                {
                    IBCR totVAhCasted = item.As<IBCR>();
                    if ((totVAhCasted != null))
                    {
                        this._parent.TotVAh = totVAhCasted;
                        return;
                    }
                }
                if ((this._parent.TotWh == null))
                {
                    IBCR totWhCasted = item.As<IBCR>();
                    if ((totWhCasted != null))
                    {
                        this._parent.TotWh = totWhCasted;
                        return;
                    }
                }
                if ((this._parent.TotVArh == null))
                {
                    IBCR totVArhCasted = item.As<IBCR>();
                    if ((totVArhCasted != null))
                    {
                        this._parent.TotVArh = totVArhCasted;
                        return;
                    }
                }
                if ((this._parent.SupWh == null))
                {
                    IBCR supWhCasted = item.As<IBCR>();
                    if ((supWhCasted != null))
                    {
                        this._parent.SupWh = supWhCasted;
                        return;
                    }
                }
                if ((this._parent.SupVArh == null))
                {
                    IBCR supVArhCasted = item.As<IBCR>();
                    if ((supVArhCasted != null))
                    {
                        this._parent.SupVArh = supVArhCasted;
                        return;
                    }
                }
                if ((this._parent.DmdWh == null))
                {
                    IBCR dmdWhCasted = item.As<IBCR>();
                    if ((dmdWhCasted != null))
                    {
                        this._parent.DmdWh = dmdWhCasted;
                        return;
                    }
                }
                if ((this._parent.DmdVArh == null))
                {
                    IBCR dmdVArhCasted = item.As<IBCR>();
                    if ((dmdVArhCasted != null))
                    {
                        this._parent.DmdVArh = dmdVArhCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EEName = null;
                this._parent.TotVAh = null;
                this._parent.TotWh = null;
                this._parent.TotVArh = null;
                this._parent.SupWh = null;
                this._parent.SupVArh = null;
                this._parent.DmdWh = null;
                this._parent.DmdVArh = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EEName))
                {
                    return true;
                }
                if ((item == this._parent.TotVAh))
                {
                    return true;
                }
                if ((item == this._parent.TotWh))
                {
                    return true;
                }
                if ((item == this._parent.TotVArh))
                {
                    return true;
                }
                if ((item == this._parent.SupWh))
                {
                    return true;
                }
                if ((item == this._parent.SupVArh))
                {
                    return true;
                }
                if ((item == this._parent.DmdWh))
                {
                    return true;
                }
                if ((item == this._parent.DmdVArh))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EEName != null))
                {
                    array[arrayIndex] = this._parent.EEName;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TotVAh != null))
                {
                    array[arrayIndex] = this._parent.TotVAh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TotWh != null))
                {
                    array[arrayIndex] = this._parent.TotWh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TotVArh != null))
                {
                    array[arrayIndex] = this._parent.TotVArh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SupWh != null))
                {
                    array[arrayIndex] = this._parent.SupWh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SupVArh != null))
                {
                    array[arrayIndex] = this._parent.SupVArh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DmdWh != null))
                {
                    array[arrayIndex] = this._parent.DmdWh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DmdVArh != null))
                {
                    array[arrayIndex] = this._parent.DmdVArh;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EEName == item))
                {
                    this._parent.EEName = null;
                    return true;
                }
                if ((this._parent.TotVAh == item))
                {
                    this._parent.TotVAh = null;
                    return true;
                }
                if ((this._parent.TotWh == item))
                {
                    this._parent.TotWh = null;
                    return true;
                }
                if ((this._parent.TotVArh == item))
                {
                    this._parent.TotVArh = null;
                    return true;
                }
                if ((this._parent.SupWh == item))
                {
                    this._parent.SupWh = null;
                    return true;
                }
                if ((this._parent.SupVArh == item))
                {
                    this._parent.SupVArh = null;
                    return true;
                }
                if ((this._parent.DmdWh == item))
                {
                    this._parent.DmdWh = null;
                    return true;
                }
                if ((this._parent.DmdVArh == item))
                {
                    this._parent.DmdVArh = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EEName).Concat(this._parent.TotVAh).Concat(this._parent.TotWh).Concat(this._parent.TotVArh).Concat(this._parent.SupWh).Concat(this._parent.SupVArh).Concat(this._parent.DmdWh).Concat(this._parent.DmdVArh).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEHealth property
        /// </summary>
        private sealed class EEHealthProxy : ModelPropertyChange<IMMTR, Nullable<HealthStateKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EEHealthProxy(IMMTR modelElement) : 
                    base(modelElement, "EEHealth")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<HealthStateKind> Value
            {
                get
                {
                    return this.ModelElement.EEHealth;
                }
                set
                {
                    this.ModelElement.EEHealth = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEName property
        /// </summary>
        private sealed class EENameProxy : ModelPropertyChange<IMMTR, IDPL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EENameProxy(IMMTR modelElement) : 
                    base(modelElement, "EEName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPL Value
            {
                get
                {
                    return this.ModelElement.EEName;
                }
                set
                {
                    this.ModelElement.EEName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TotVAh property
        /// </summary>
        private sealed class TotVAhProxy : ModelPropertyChange<IMMTR, IBCR>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotVAhProxy(IMMTR modelElement) : 
                    base(modelElement, "TotVAh")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBCR Value
            {
                get
                {
                    return this.ModelElement.TotVAh;
                }
                set
                {
                    this.ModelElement.TotVAh = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TotWh property
        /// </summary>
        private sealed class TotWhProxy : ModelPropertyChange<IMMTR, IBCR>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotWhProxy(IMMTR modelElement) : 
                    base(modelElement, "TotWh")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBCR Value
            {
                get
                {
                    return this.ModelElement.TotWh;
                }
                set
                {
                    this.ModelElement.TotWh = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TotVArh property
        /// </summary>
        private sealed class TotVArhProxy : ModelPropertyChange<IMMTR, IBCR>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotVArhProxy(IMMTR modelElement) : 
                    base(modelElement, "TotVArh")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBCR Value
            {
                get
                {
                    return this.ModelElement.TotVArh;
                }
                set
                {
                    this.ModelElement.TotVArh = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SupWh property
        /// </summary>
        private sealed class SupWhProxy : ModelPropertyChange<IMMTR, IBCR>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SupWhProxy(IMMTR modelElement) : 
                    base(modelElement, "SupWh")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBCR Value
            {
                get
                {
                    return this.ModelElement.SupWh;
                }
                set
                {
                    this.ModelElement.SupWh = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SupVArh property
        /// </summary>
        private sealed class SupVArhProxy : ModelPropertyChange<IMMTR, IBCR>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SupVArhProxy(IMMTR modelElement) : 
                    base(modelElement, "SupVArh")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBCR Value
            {
                get
                {
                    return this.ModelElement.SupVArh;
                }
                set
                {
                    this.ModelElement.SupVArh = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DmdWh property
        /// </summary>
        private sealed class DmdWhProxy : ModelPropertyChange<IMMTR, IBCR>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DmdWhProxy(IMMTR modelElement) : 
                    base(modelElement, "DmdWh")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBCR Value
            {
                get
                {
                    return this.ModelElement.DmdWh;
                }
                set
                {
                    this.ModelElement.DmdWh = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DmdVArh property
        /// </summary>
        private sealed class DmdVArhProxy : ModelPropertyChange<IMMTR, IBCR>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DmdVArhProxy(IMMTR modelElement) : 
                    base(modelElement, "DmdVArh")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBCR Value
            {
                get
                {
                    return this.ModelElement.DmdVArh;
                }
                set
                {
                    this.ModelElement.DmdVArh = value;
                }
            }
        }
    }
}

