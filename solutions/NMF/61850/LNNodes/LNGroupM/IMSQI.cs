using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM
{
    
    
    /// <summary>
    /// The public interface for MSQI
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MSQI))]
    [XmlDefaultImplementationTypeAttribute(typeof(MSQI))]
    public interface IMSQI : IModelElement, IGroupM
    {
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        Nullable<HealthStateKind> EEHealth
        {
            get;
            set;
        }
        
        /// <summary>
        /// The EEName property
        /// </summary>
        IDPL EEName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SeqA property
        /// </summary>
        ISEQ SeqA
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SeqV property
        /// </summary>
        ISEQ SeqV
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DQ0Seq property
        /// </summary>
        ISEQ DQ0Seq
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ImbA property
        /// </summary>
        IWYE ImbA
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ImbNgA property
        /// </summary>
        IMV ImbNgA
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ImbNgV property
        /// </summary>
        IMV ImbNgV
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ImbPPV property
        /// </summary>
        IDEL ImbPPV
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ImbV property
        /// </summary>
        IMV ImbV
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ImbZroA property
        /// </summary>
        IMV ImbZroA
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ImbZroV property
        /// </summary>
        IMV ImbZroV
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MaxImbA property
        /// </summary>
        IWYE MaxImbA
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MaxImbPPV property
        /// </summary>
        IWYE MaxImbPPV
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MaxImbV property
        /// </summary>
        IWYE MaxImbV
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the EEName property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EENameChanging;
        
        /// <summary>
        /// Gets fired when the EEName property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EENameChanged;
        
        /// <summary>
        /// Gets fired before the SeqA property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SeqAChanging;
        
        /// <summary>
        /// Gets fired when the SeqA property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SeqAChanged;
        
        /// <summary>
        /// Gets fired before the SeqV property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SeqVChanging;
        
        /// <summary>
        /// Gets fired when the SeqV property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SeqVChanged;
        
        /// <summary>
        /// Gets fired before the DQ0Seq property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DQ0SeqChanging;
        
        /// <summary>
        /// Gets fired when the DQ0Seq property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DQ0SeqChanged;
        
        /// <summary>
        /// Gets fired before the ImbA property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbAChanging;
        
        /// <summary>
        /// Gets fired when the ImbA property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbAChanged;
        
        /// <summary>
        /// Gets fired before the ImbNgA property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbNgAChanging;
        
        /// <summary>
        /// Gets fired when the ImbNgA property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbNgAChanged;
        
        /// <summary>
        /// Gets fired before the ImbNgV property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbNgVChanging;
        
        /// <summary>
        /// Gets fired when the ImbNgV property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbNgVChanged;
        
        /// <summary>
        /// Gets fired before the ImbPPV property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbPPVChanging;
        
        /// <summary>
        /// Gets fired when the ImbPPV property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbPPVChanged;
        
        /// <summary>
        /// Gets fired before the ImbV property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbVChanging;
        
        /// <summary>
        /// Gets fired when the ImbV property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbVChanged;
        
        /// <summary>
        /// Gets fired before the ImbZroA property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbZroAChanging;
        
        /// <summary>
        /// Gets fired when the ImbZroA property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbZroAChanged;
        
        /// <summary>
        /// Gets fired before the ImbZroV property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbZroVChanging;
        
        /// <summary>
        /// Gets fired when the ImbZroV property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImbZroVChanged;
        
        /// <summary>
        /// Gets fired before the MaxImbA property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxImbAChanging;
        
        /// <summary>
        /// Gets fired when the MaxImbA property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxImbAChanged;
        
        /// <summary>
        /// Gets fired before the MaxImbPPV property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxImbPPVChanging;
        
        /// <summary>
        /// Gets fired when the MaxImbPPV property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxImbPPVChanged;
        
        /// <summary>
        /// Gets fired before the MaxImbV property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxImbVChanging;
        
        /// <summary>
        /// Gets fired when the MaxImbV property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxImbVChanged;
    }
}

