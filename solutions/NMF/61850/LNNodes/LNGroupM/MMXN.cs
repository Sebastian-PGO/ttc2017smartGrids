//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM
{
    
    
    /// <summary>
    /// The default implementation of the MMXN class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pM")]
    [XmlNamespacePrefixAttribute("groupm")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupM/MMXN")]
    public partial class MMXN : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM.GroupM, IMMXN, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EEHealth property
        /// </summary>
        private Nullable<HealthStateKind> _eEHealth;
        
        private static Lazy<ITypedElement> _eEHealthAttribute = new Lazy<ITypedElement>(RetrieveEEHealthAttribute);
        
        private static Lazy<ITypedElement> _eENameReference = new Lazy<ITypedElement>(RetrieveEENameReference);
        
        /// <summary>
        /// The backing field for the EEName property
        /// </summary>
        private IDPL _eEName;
        
        private static Lazy<ITypedElement> _ampReference = new Lazy<ITypedElement>(RetrieveAmpReference);
        
        /// <summary>
        /// The backing field for the Amp property
        /// </summary>
        private IMV _amp;
        
        private static Lazy<ITypedElement> _volReference = new Lazy<ITypedElement>(RetrieveVolReference);
        
        /// <summary>
        /// The backing field for the Vol property
        /// </summary>
        private IMV _vol;
        
        private static Lazy<ITypedElement> _wattReference = new Lazy<ITypedElement>(RetrieveWattReference);
        
        /// <summary>
        /// The backing field for the Watt property
        /// </summary>
        private IMV _watt;
        
        private static Lazy<ITypedElement> _volAmprReference = new Lazy<ITypedElement>(RetrieveVolAmprReference);
        
        /// <summary>
        /// The backing field for the VolAmpr property
        /// </summary>
        private IMV _volAmpr;
        
        private static Lazy<ITypedElement> _volAmpReference = new Lazy<ITypedElement>(RetrieveVolAmpReference);
        
        /// <summary>
        /// The backing field for the VolAmp property
        /// </summary>
        private IMV _volAmp;
        
        private static Lazy<ITypedElement> _pwrFactReference = new Lazy<ITypedElement>(RetrievePwrFactReference);
        
        /// <summary>
        /// The backing field for the PwrFact property
        /// </summary>
        private IMV _pwrFact;
        
        private static Lazy<ITypedElement> _impReference = new Lazy<ITypedElement>(RetrieveImpReference);
        
        /// <summary>
        /// The backing field for the Imp property
        /// </summary>
        private ICMV _imp;
        
        private static Lazy<ITypedElement> _hzReference = new Lazy<ITypedElement>(RetrieveHzReference);
        
        /// <summary>
        /// The backing field for the Hz property
        /// </summary>
        private IMV _hz;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<HealthStateKind> EEHealth
        {
            get
            {
                return this._eEHealth;
            }
            set
            {
                if ((this._eEHealth != value))
                {
                    Nullable<HealthStateKind> old = this._eEHealth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEEHealthChanging(e);
                    this.OnPropertyChanging("EEHealth", e, _eEHealthAttribute);
                    this._eEHealth = value;
                    this.OnEEHealthChanged(e);
                    this.OnPropertyChanged("EEHealth", e, _eEHealthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The EEName property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPL EEName
        {
            get
            {
                return this._eEName;
            }
            set
            {
                if ((this._eEName != value))
                {
                    IDPL old = this._eEName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEENameChanging(e);
                    this.OnPropertyChanging("EEName", e, _eENameReference);
                    this._eEName = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEEName;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEEName;
                    }
                    this.OnEENameChanged(e);
                    this.OnPropertyChanged("EEName", e, _eENameReference);
                }
            }
        }
        
        /// <summary>
        /// The Amp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Amp
        {
            get
            {
                return this._amp;
            }
            set
            {
                if ((this._amp != value))
                {
                    IMV old = this._amp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpChanging(e);
                    this.OnPropertyChanging("Amp", e, _ampReference);
                    this._amp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAmp;
                    }
                    this.OnAmpChanged(e);
                    this.OnPropertyChanged("Amp", e, _ampReference);
                }
            }
        }
        
        /// <summary>
        /// The Vol property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Vol
        {
            get
            {
                return this._vol;
            }
            set
            {
                if ((this._vol != value))
                {
                    IMV old = this._vol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolChanging(e);
                    this.OnPropertyChanging("Vol", e, _volReference);
                    this._vol = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVol;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVol;
                    }
                    this.OnVolChanged(e);
                    this.OnPropertyChanged("Vol", e, _volReference);
                }
            }
        }
        
        /// <summary>
        /// The Watt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Watt
        {
            get
            {
                return this._watt;
            }
            set
            {
                if ((this._watt != value))
                {
                    IMV old = this._watt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWattChanging(e);
                    this.OnPropertyChanging("Watt", e, _wattReference);
                    this._watt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetWatt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetWatt;
                    }
                    this.OnWattChanged(e);
                    this.OnPropertyChanged("Watt", e, _wattReference);
                }
            }
        }
        
        /// <summary>
        /// The VolAmpr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV VolAmpr
        {
            get
            {
                return this._volAmpr;
            }
            set
            {
                if ((this._volAmpr != value))
                {
                    IMV old = this._volAmpr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolAmprChanging(e);
                    this.OnPropertyChanging("VolAmpr", e, _volAmprReference);
                    this._volAmpr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVolAmpr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVolAmpr;
                    }
                    this.OnVolAmprChanged(e);
                    this.OnPropertyChanged("VolAmpr", e, _volAmprReference);
                }
            }
        }
        
        /// <summary>
        /// The VolAmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV VolAmp
        {
            get
            {
                return this._volAmp;
            }
            set
            {
                if ((this._volAmp != value))
                {
                    IMV old = this._volAmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolAmpChanging(e);
                    this.OnPropertyChanging("VolAmp", e, _volAmpReference);
                    this._volAmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVolAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVolAmp;
                    }
                    this.OnVolAmpChanged(e);
                    this.OnPropertyChanged("VolAmp", e, _volAmpReference);
                }
            }
        }
        
        /// <summary>
        /// The PwrFact property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV PwrFact
        {
            get
            {
                return this._pwrFact;
            }
            set
            {
                if ((this._pwrFact != value))
                {
                    IMV old = this._pwrFact;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPwrFactChanging(e);
                    this.OnPropertyChanging("PwrFact", e, _pwrFactReference);
                    this._pwrFact = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPwrFact;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPwrFact;
                    }
                    this.OnPwrFactChanged(e);
                    this.OnPropertyChanged("PwrFact", e, _pwrFactReference);
                }
            }
        }
        
        /// <summary>
        /// The Imp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ICMV Imp
        {
            get
            {
                return this._imp;
            }
            set
            {
                if ((this._imp != value))
                {
                    ICMV old = this._imp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImpChanging(e);
                    this.OnPropertyChanging("Imp", e, _impReference);
                    this._imp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImp;
                    }
                    this.OnImpChanged(e);
                    this.OnPropertyChanged("Imp", e, _impReference);
                }
            }
        }
        
        /// <summary>
        /// The Hz property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Hz
        {
            get
            {
                return this._hz;
            }
            set
            {
                if ((this._hz != value))
                {
                    IMV old = this._hz;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHzChanging(e);
                    this.OnPropertyChanging("Hz", e, _hzReference);
                    this._hz = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHz;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHz;
                    }
                    this.OnHzChanged(e);
                    this.OnPropertyChanged("Hz", e, _hzReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MMXNReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupM/MMXN")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the EEName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanging;
        
        /// <summary>
        /// Gets fired when the EEName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanged;
        
        /// <summary>
        /// Gets fired before the Amp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmpChanging;
        
        /// <summary>
        /// Gets fired when the Amp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmpChanged;
        
        /// <summary>
        /// Gets fired before the Vol property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolChanging;
        
        /// <summary>
        /// Gets fired when the Vol property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolChanged;
        
        /// <summary>
        /// Gets fired before the Watt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WattChanging;
        
        /// <summary>
        /// Gets fired when the Watt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WattChanged;
        
        /// <summary>
        /// Gets fired before the VolAmpr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolAmprChanging;
        
        /// <summary>
        /// Gets fired when the VolAmpr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolAmprChanged;
        
        /// <summary>
        /// Gets fired before the VolAmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolAmpChanging;
        
        /// <summary>
        /// Gets fired when the VolAmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolAmpChanged;
        
        /// <summary>
        /// Gets fired before the PwrFact property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PwrFactChanging;
        
        /// <summary>
        /// Gets fired when the PwrFact property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PwrFactChanged;
        
        /// <summary>
        /// Gets fired before the Imp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImpChanging;
        
        /// <summary>
        /// Gets fired when the Imp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImpChanged;
        
        /// <summary>
        /// Gets fired before the Hz property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzChanging;
        
        /// <summary>
        /// Gets fired when the Hz property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzChanged;
        
        private static ITypedElement RetrieveEEHealthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MMXN.ClassInstance)).Resolve("EEHealth")));
        }
        
        /// <summary>
        /// Raises the EEHealthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EEHealthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEENameReference()
        {
            return ((ITypedElement)(((ModelElement)(MMXN.ClassInstance)).Resolve("EEName")));
        }
        
        /// <summary>
        /// Raises the EENameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EENameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EEName property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEEName(object sender, System.EventArgs eventArgs)
        {
            this.EEName = null;
        }
        
        private static ITypedElement RetrieveAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MMXN.ClassInstance)).Resolve("Amp")));
        }
        
        /// <summary>
        /// Raises the AmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Amp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAmp(object sender, System.EventArgs eventArgs)
        {
            this.Amp = null;
        }
        
        private static ITypedElement RetrieveVolReference()
        {
            return ((ITypedElement)(((ModelElement)(MMXN.ClassInstance)).Resolve("Vol")));
        }
        
        /// <summary>
        /// Raises the VolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Vol property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVol(object sender, System.EventArgs eventArgs)
        {
            this.Vol = null;
        }
        
        private static ITypedElement RetrieveWattReference()
        {
            return ((ITypedElement)(((ModelElement)(MMXN.ClassInstance)).Resolve("Watt")));
        }
        
        /// <summary>
        /// Raises the WattChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWattChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WattChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WattChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWattChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WattChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Watt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWatt(object sender, System.EventArgs eventArgs)
        {
            this.Watt = null;
        }
        
        private static ITypedElement RetrieveVolAmprReference()
        {
            return ((ITypedElement)(((ModelElement)(MMXN.ClassInstance)).Resolve("VolAmpr")));
        }
        
        /// <summary>
        /// Raises the VolAmprChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolAmprChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolAmprChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VolAmprChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolAmprChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolAmprChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VolAmpr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVolAmpr(object sender, System.EventArgs eventArgs)
        {
            this.VolAmpr = null;
        }
        
        private static ITypedElement RetrieveVolAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MMXN.ClassInstance)).Resolve("VolAmp")));
        }
        
        /// <summary>
        /// Raises the VolAmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolAmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VolAmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolAmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VolAmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVolAmp(object sender, System.EventArgs eventArgs)
        {
            this.VolAmp = null;
        }
        
        private static ITypedElement RetrievePwrFactReference()
        {
            return ((ITypedElement)(((ModelElement)(MMXN.ClassInstance)).Resolve("PwrFact")));
        }
        
        /// <summary>
        /// Raises the PwrFactChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPwrFactChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PwrFactChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PwrFactChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPwrFactChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PwrFactChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PwrFact property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPwrFact(object sender, System.EventArgs eventArgs)
        {
            this.PwrFact = null;
        }
        
        private static ITypedElement RetrieveImpReference()
        {
            return ((ITypedElement)(((ModelElement)(MMXN.ClassInstance)).Resolve("Imp")));
        }
        
        /// <summary>
        /// Raises the ImpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Imp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImp(object sender, System.EventArgs eventArgs)
        {
            this.Imp = null;
        }
        
        private static ITypedElement RetrieveHzReference()
        {
            return ((ITypedElement)(((ModelElement)(MMXN.ClassInstance)).Resolve("Hz")));
        }
        
        /// <summary>
        /// Raises the HzChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HzChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Hz property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHz(object sender, System.EventArgs eventArgs)
        {
            this.Hz = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EEHEALTH"))
            {
                return this.EEHealth;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EENAME"))
            {
                this.EEName = ((IDPL)(value));
                return;
            }
            if ((feature == "AMP"))
            {
                this.Amp = ((IMV)(value));
                return;
            }
            if ((feature == "VOL"))
            {
                this.Vol = ((IMV)(value));
                return;
            }
            if ((feature == "WATT"))
            {
                this.Watt = ((IMV)(value));
                return;
            }
            if ((feature == "VOLAMPR"))
            {
                this.VolAmpr = ((IMV)(value));
                return;
            }
            if ((feature == "VOLAMP"))
            {
                this.VolAmp = ((IMV)(value));
                return;
            }
            if ((feature == "PWRFACT"))
            {
                this.PwrFact = ((IMV)(value));
                return;
            }
            if ((feature == "IMP"))
            {
                this.Imp = ((ICMV)(value));
                return;
            }
            if ((feature == "HZ"))
            {
                this.Hz = ((IMV)(value));
                return;
            }
            if ((feature == "EEHEALTH"))
            {
                this.EEHealth = ((HealthStateKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((attribute == "Amp"))
            {
                return new AmpProxy(this);
            }
            if ((attribute == "Vol"))
            {
                return new VolProxy(this);
            }
            if ((attribute == "Watt"))
            {
                return new WattProxy(this);
            }
            if ((attribute == "VolAmpr"))
            {
                return new VolAmprProxy(this);
            }
            if ((attribute == "VolAmp"))
            {
                return new VolAmpProxy(this);
            }
            if ((attribute == "PwrFact"))
            {
                return new PwrFactProxy(this);
            }
            if ((attribute == "Imp"))
            {
                return new ImpProxy(this);
            }
            if ((attribute == "Hz"))
            {
                return new HzProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((reference == "Amp"))
            {
                return new AmpProxy(this);
            }
            if ((reference == "Vol"))
            {
                return new VolProxy(this);
            }
            if ((reference == "Watt"))
            {
                return new WattProxy(this);
            }
            if ((reference == "VolAmpr"))
            {
                return new VolAmprProxy(this);
            }
            if ((reference == "VolAmp"))
            {
                return new VolAmpProxy(this);
            }
            if ((reference == "PwrFact"))
            {
                return new PwrFactProxy(this);
            }
            if ((reference == "Imp"))
            {
                return new ImpProxy(this);
            }
            if ((reference == "Hz"))
            {
                return new HzProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupM/MMXN")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MMXN class
        /// </summary>
        public class MMXNReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MMXN _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MMXNReferencedElementsCollection(MMXN parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EEName != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Amp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Vol != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Watt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VolAmpr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VolAmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PwrFact != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Imp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Hz != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EENameChanged += this.PropagateValueChanges;
                this._parent.AmpChanged += this.PropagateValueChanges;
                this._parent.VolChanged += this.PropagateValueChanges;
                this._parent.WattChanged += this.PropagateValueChanges;
                this._parent.VolAmprChanged += this.PropagateValueChanges;
                this._parent.VolAmpChanged += this.PropagateValueChanges;
                this._parent.PwrFactChanged += this.PropagateValueChanges;
                this._parent.ImpChanged += this.PropagateValueChanges;
                this._parent.HzChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EENameChanged -= this.PropagateValueChanges;
                this._parent.AmpChanged -= this.PropagateValueChanges;
                this._parent.VolChanged -= this.PropagateValueChanges;
                this._parent.WattChanged -= this.PropagateValueChanges;
                this._parent.VolAmprChanged -= this.PropagateValueChanges;
                this._parent.VolAmpChanged -= this.PropagateValueChanges;
                this._parent.PwrFactChanged -= this.PropagateValueChanges;
                this._parent.ImpChanged -= this.PropagateValueChanges;
                this._parent.HzChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EEName == null))
                {
                    IDPL eENameCasted = item.As<IDPL>();
                    if ((eENameCasted != null))
                    {
                        this._parent.EEName = eENameCasted;
                        return;
                    }
                }
                if ((this._parent.Amp == null))
                {
                    IMV ampCasted = item.As<IMV>();
                    if ((ampCasted != null))
                    {
                        this._parent.Amp = ampCasted;
                        return;
                    }
                }
                if ((this._parent.Vol == null))
                {
                    IMV volCasted = item.As<IMV>();
                    if ((volCasted != null))
                    {
                        this._parent.Vol = volCasted;
                        return;
                    }
                }
                if ((this._parent.Watt == null))
                {
                    IMV wattCasted = item.As<IMV>();
                    if ((wattCasted != null))
                    {
                        this._parent.Watt = wattCasted;
                        return;
                    }
                }
                if ((this._parent.VolAmpr == null))
                {
                    IMV volAmprCasted = item.As<IMV>();
                    if ((volAmprCasted != null))
                    {
                        this._parent.VolAmpr = volAmprCasted;
                        return;
                    }
                }
                if ((this._parent.VolAmp == null))
                {
                    IMV volAmpCasted = item.As<IMV>();
                    if ((volAmpCasted != null))
                    {
                        this._parent.VolAmp = volAmpCasted;
                        return;
                    }
                }
                if ((this._parent.PwrFact == null))
                {
                    IMV pwrFactCasted = item.As<IMV>();
                    if ((pwrFactCasted != null))
                    {
                        this._parent.PwrFact = pwrFactCasted;
                        return;
                    }
                }
                if ((this._parent.Imp == null))
                {
                    ICMV impCasted = item.As<ICMV>();
                    if ((impCasted != null))
                    {
                        this._parent.Imp = impCasted;
                        return;
                    }
                }
                if ((this._parent.Hz == null))
                {
                    IMV hzCasted = item.As<IMV>();
                    if ((hzCasted != null))
                    {
                        this._parent.Hz = hzCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EEName = null;
                this._parent.Amp = null;
                this._parent.Vol = null;
                this._parent.Watt = null;
                this._parent.VolAmpr = null;
                this._parent.VolAmp = null;
                this._parent.PwrFact = null;
                this._parent.Imp = null;
                this._parent.Hz = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EEName))
                {
                    return true;
                }
                if ((item == this._parent.Amp))
                {
                    return true;
                }
                if ((item == this._parent.Vol))
                {
                    return true;
                }
                if ((item == this._parent.Watt))
                {
                    return true;
                }
                if ((item == this._parent.VolAmpr))
                {
                    return true;
                }
                if ((item == this._parent.VolAmp))
                {
                    return true;
                }
                if ((item == this._parent.PwrFact))
                {
                    return true;
                }
                if ((item == this._parent.Imp))
                {
                    return true;
                }
                if ((item == this._parent.Hz))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EEName != null))
                {
                    array[arrayIndex] = this._parent.EEName;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Amp != null))
                {
                    array[arrayIndex] = this._parent.Amp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Vol != null))
                {
                    array[arrayIndex] = this._parent.Vol;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Watt != null))
                {
                    array[arrayIndex] = this._parent.Watt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VolAmpr != null))
                {
                    array[arrayIndex] = this._parent.VolAmpr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VolAmp != null))
                {
                    array[arrayIndex] = this._parent.VolAmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PwrFact != null))
                {
                    array[arrayIndex] = this._parent.PwrFact;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Imp != null))
                {
                    array[arrayIndex] = this._parent.Imp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Hz != null))
                {
                    array[arrayIndex] = this._parent.Hz;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EEName == item))
                {
                    this._parent.EEName = null;
                    return true;
                }
                if ((this._parent.Amp == item))
                {
                    this._parent.Amp = null;
                    return true;
                }
                if ((this._parent.Vol == item))
                {
                    this._parent.Vol = null;
                    return true;
                }
                if ((this._parent.Watt == item))
                {
                    this._parent.Watt = null;
                    return true;
                }
                if ((this._parent.VolAmpr == item))
                {
                    this._parent.VolAmpr = null;
                    return true;
                }
                if ((this._parent.VolAmp == item))
                {
                    this._parent.VolAmp = null;
                    return true;
                }
                if ((this._parent.PwrFact == item))
                {
                    this._parent.PwrFact = null;
                    return true;
                }
                if ((this._parent.Imp == item))
                {
                    this._parent.Imp = null;
                    return true;
                }
                if ((this._parent.Hz == item))
                {
                    this._parent.Hz = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EEName).Concat(this._parent.Amp).Concat(this._parent.Vol).Concat(this._parent.Watt).Concat(this._parent.VolAmpr).Concat(this._parent.VolAmp).Concat(this._parent.PwrFact).Concat(this._parent.Imp).Concat(this._parent.Hz).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEHealth property
        /// </summary>
        private sealed class EEHealthProxy : ModelPropertyChange<IMMXN, Nullable<HealthStateKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EEHealthProxy(IMMXN modelElement) : 
                    base(modelElement, "EEHealth")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<HealthStateKind> Value
            {
                get
                {
                    return this.ModelElement.EEHealth;
                }
                set
                {
                    this.ModelElement.EEHealth = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEName property
        /// </summary>
        private sealed class EENameProxy : ModelPropertyChange<IMMXN, IDPL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EENameProxy(IMMXN modelElement) : 
                    base(modelElement, "EEName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPL Value
            {
                get
                {
                    return this.ModelElement.EEName;
                }
                set
                {
                    this.ModelElement.EEName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Amp property
        /// </summary>
        private sealed class AmpProxy : ModelPropertyChange<IMMXN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmpProxy(IMMXN modelElement) : 
                    base(modelElement, "Amp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Amp;
                }
                set
                {
                    this.ModelElement.Amp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Vol property
        /// </summary>
        private sealed class VolProxy : ModelPropertyChange<IMMXN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VolProxy(IMMXN modelElement) : 
                    base(modelElement, "Vol")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Vol;
                }
                set
                {
                    this.ModelElement.Vol = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Watt property
        /// </summary>
        private sealed class WattProxy : ModelPropertyChange<IMMXN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WattProxy(IMMXN modelElement) : 
                    base(modelElement, "Watt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Watt;
                }
                set
                {
                    this.ModelElement.Watt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VolAmpr property
        /// </summary>
        private sealed class VolAmprProxy : ModelPropertyChange<IMMXN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VolAmprProxy(IMMXN modelElement) : 
                    base(modelElement, "VolAmpr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.VolAmpr;
                }
                set
                {
                    this.ModelElement.VolAmpr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VolAmp property
        /// </summary>
        private sealed class VolAmpProxy : ModelPropertyChange<IMMXN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VolAmpProxy(IMMXN modelElement) : 
                    base(modelElement, "VolAmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.VolAmp;
                }
                set
                {
                    this.ModelElement.VolAmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PwrFact property
        /// </summary>
        private sealed class PwrFactProxy : ModelPropertyChange<IMMXN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PwrFactProxy(IMMXN modelElement) : 
                    base(modelElement, "PwrFact")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.PwrFact;
                }
                set
                {
                    this.ModelElement.PwrFact = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Imp property
        /// </summary>
        private sealed class ImpProxy : ModelPropertyChange<IMMXN, ICMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImpProxy(IMMXN modelElement) : 
                    base(modelElement, "Imp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMV Value
            {
                get
                {
                    return this.ModelElement.Imp;
                }
                set
                {
                    this.ModelElement.Imp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Hz property
        /// </summary>
        private sealed class HzProxy : ModelPropertyChange<IMMXN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HzProxy(IMMXN modelElement) : 
                    base(modelElement, "Hz")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Hz;
                }
                set
                {
                    this.ModelElement.Hz = value;
                }
            }
        }
    }
}

