using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM
{
    
    
    /// <summary>
    /// The public interface for MMXN
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MMXN))]
    [XmlDefaultImplementationTypeAttribute(typeof(MMXN))]
    public interface IMMXN : IModelElement, IGroupM
    {
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        Nullable<HealthStateKind> EEHealth
        {
            get;
            set;
        }
        
        /// <summary>
        /// The EEName property
        /// </summary>
        IDPL EEName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Amp property
        /// </summary>
        IMV Amp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Vol property
        /// </summary>
        IMV Vol
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Watt property
        /// </summary>
        IMV Watt
        {
            get;
            set;
        }
        
        /// <summary>
        /// The VolAmpr property
        /// </summary>
        IMV VolAmpr
        {
            get;
            set;
        }
        
        /// <summary>
        /// The VolAmp property
        /// </summary>
        IMV VolAmp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PwrFact property
        /// </summary>
        IMV PwrFact
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Imp property
        /// </summary>
        ICMV Imp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Hz property
        /// </summary>
        IMV Hz
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the EEName property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EENameChanging;
        
        /// <summary>
        /// Gets fired when the EEName property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EENameChanged;
        
        /// <summary>
        /// Gets fired before the Amp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AmpChanging;
        
        /// <summary>
        /// Gets fired when the Amp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AmpChanged;
        
        /// <summary>
        /// Gets fired before the Vol property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolChanging;
        
        /// <summary>
        /// Gets fired when the Vol property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolChanged;
        
        /// <summary>
        /// Gets fired before the Watt property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WattChanging;
        
        /// <summary>
        /// Gets fired when the Watt property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WattChanged;
        
        /// <summary>
        /// Gets fired before the VolAmpr property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolAmprChanging;
        
        /// <summary>
        /// Gets fired when the VolAmpr property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolAmprChanged;
        
        /// <summary>
        /// Gets fired before the VolAmp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolAmpChanging;
        
        /// <summary>
        /// Gets fired when the VolAmp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolAmpChanged;
        
        /// <summary>
        /// Gets fired before the PwrFact property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PwrFactChanging;
        
        /// <summary>
        /// Gets fired when the PwrFact property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PwrFactChanged;
        
        /// <summary>
        /// Gets fired before the Imp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImpChanging;
        
        /// <summary>
        /// Gets fired when the Imp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImpChanged;
        
        /// <summary>
        /// Gets fired before the Hz property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HzChanging;
        
        /// <summary>
        /// Gets fired when the Hz property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HzChanged;
    }
}

