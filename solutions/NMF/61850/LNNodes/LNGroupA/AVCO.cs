using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA
{
    
    
    /// <summary>
    /// The default implementation of the AVCO class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pA")]
    [XmlNamespacePrefixAttribute("groupa")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupA/AVCO")]
    public partial class AVCO : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA.GroupA, IAVCO, IModelElement
    {
        
        private static Lazy<ITypedElement> _tapChgReference = new Lazy<ITypedElement>(RetrieveTapChgReference);
        
        /// <summary>
        /// The backing field for the TapChg property
        /// </summary>
        private IBSC _tapChg;
        
        private static Lazy<ITypedElement> _blkEFReference = new Lazy<ITypedElement>(RetrieveBlkEFReference);
        
        /// <summary>
        /// The backing field for the BlkEF property
        /// </summary>
        private ISPS _blkEF;
        
        private static Lazy<ITypedElement> _blkAOvReference = new Lazy<ITypedElement>(RetrieveBlkAOvReference);
        
        /// <summary>
        /// The backing field for the BlkAOv property
        /// </summary>
        private ISPS _blkAOv;
        
        private static Lazy<ITypedElement> _blkVOvReference = new Lazy<ITypedElement>(RetrieveBlkVOvReference);
        
        /// <summary>
        /// The backing field for the BlkVOv property
        /// </summary>
        private ISPS _blkVOv;
        
        private static Lazy<ITypedElement> _limAOvReference = new Lazy<ITypedElement>(RetrieveLimAOvReference);
        
        /// <summary>
        /// The backing field for the LimAOv property
        /// </summary>
        private IASG _limAOv;
        
        private static Lazy<ITypedElement> _limVOvReference = new Lazy<ITypedElement>(RetrieveLimVOvReference);
        
        /// <summary>
        /// The backing field for the LimVOv property
        /// </summary>
        private IASG _limVOv;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The TapChg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBSC TapChg
        {
            get
            {
                return this._tapChg;
            }
            set
            {
                if ((this._tapChg != value))
                {
                    IBSC old = this._tapChg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTapChgChanging(e);
                    this.OnPropertyChanging("TapChg", e, _tapChgReference);
                    this._tapChg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTapChg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTapChg;
                    }
                    this.OnTapChgChanged(e);
                    this.OnPropertyChanged("TapChg", e, _tapChgReference);
                }
            }
        }
        
        /// <summary>
        /// The BlkEF property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS BlkEF
        {
            get
            {
                return this._blkEF;
            }
            set
            {
                if ((this._blkEF != value))
                {
                    ISPS old = this._blkEF;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkEFChanging(e);
                    this.OnPropertyChanging("BlkEF", e, _blkEFReference);
                    this._blkEF = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkEF;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkEF;
                    }
                    this.OnBlkEFChanged(e);
                    this.OnPropertyChanged("BlkEF", e, _blkEFReference);
                }
            }
        }
        
        /// <summary>
        /// The BlkAOv property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS BlkAOv
        {
            get
            {
                return this._blkAOv;
            }
            set
            {
                if ((this._blkAOv != value))
                {
                    ISPS old = this._blkAOv;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkAOvChanging(e);
                    this.OnPropertyChanging("BlkAOv", e, _blkAOvReference);
                    this._blkAOv = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkAOv;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkAOv;
                    }
                    this.OnBlkAOvChanged(e);
                    this.OnPropertyChanged("BlkAOv", e, _blkAOvReference);
                }
            }
        }
        
        /// <summary>
        /// The BlkVOv property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS BlkVOv
        {
            get
            {
                return this._blkVOv;
            }
            set
            {
                if ((this._blkVOv != value))
                {
                    ISPS old = this._blkVOv;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkVOvChanging(e);
                    this.OnPropertyChanging("BlkVOv", e, _blkVOvReference);
                    this._blkVOv = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkVOv;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkVOv;
                    }
                    this.OnBlkVOvChanged(e);
                    this.OnPropertyChanged("BlkVOv", e, _blkVOvReference);
                }
            }
        }
        
        /// <summary>
        /// The LimAOv property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LimAOv
        {
            get
            {
                return this._limAOv;
            }
            set
            {
                if ((this._limAOv != value))
                {
                    IASG old = this._limAOv;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLimAOvChanging(e);
                    this.OnPropertyChanging("LimAOv", e, _limAOvReference);
                    this._limAOv = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLimAOv;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLimAOv;
                    }
                    this.OnLimAOvChanged(e);
                    this.OnPropertyChanged("LimAOv", e, _limAOvReference);
                }
            }
        }
        
        /// <summary>
        /// The LimVOv property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LimVOv
        {
            get
            {
                return this._limVOv;
            }
            set
            {
                if ((this._limVOv != value))
                {
                    IASG old = this._limVOv;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLimVOvChanging(e);
                    this.OnPropertyChanging("LimVOv", e, _limVOvReference);
                    this._limVOv = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLimVOv;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLimVOv;
                    }
                    this.OnLimVOvChanged(e);
                    this.OnPropertyChanged("LimVOv", e, _limVOvReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AVCOReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupA/AVCO")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TapChg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapChgChanging;
        
        /// <summary>
        /// Gets fired when the TapChg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapChgChanged;
        
        /// <summary>
        /// Gets fired before the BlkEF property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkEFChanging;
        
        /// <summary>
        /// Gets fired when the BlkEF property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkEFChanged;
        
        /// <summary>
        /// Gets fired before the BlkAOv property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkAOvChanging;
        
        /// <summary>
        /// Gets fired when the BlkAOv property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkAOvChanged;
        
        /// <summary>
        /// Gets fired before the BlkVOv property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkVOvChanging;
        
        /// <summary>
        /// Gets fired when the BlkVOv property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkVOvChanged;
        
        /// <summary>
        /// Gets fired before the LimAOv property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LimAOvChanging;
        
        /// <summary>
        /// Gets fired when the LimAOv property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LimAOvChanged;
        
        /// <summary>
        /// Gets fired before the LimVOv property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LimVOvChanging;
        
        /// <summary>
        /// Gets fired when the LimVOv property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LimVOvChanged;
        
        private static ITypedElement RetrieveTapChgReference()
        {
            return ((ITypedElement)(((ModelElement)(AVCO.ClassInstance)).Resolve("TapChg")));
        }
        
        /// <summary>
        /// Raises the TapChgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapChgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapChgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TapChgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapChgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapChgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TapChg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTapChg(object sender, System.EventArgs eventArgs)
        {
            this.TapChg = null;
        }
        
        private static ITypedElement RetrieveBlkEFReference()
        {
            return ((ITypedElement)(((ModelElement)(AVCO.ClassInstance)).Resolve("BlkEF")));
        }
        
        /// <summary>
        /// Raises the BlkEFChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkEFChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkEFChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkEFChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkEFChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkEFChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkEF property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkEF(object sender, System.EventArgs eventArgs)
        {
            this.BlkEF = null;
        }
        
        private static ITypedElement RetrieveBlkAOvReference()
        {
            return ((ITypedElement)(((ModelElement)(AVCO.ClassInstance)).Resolve("BlkAOv")));
        }
        
        /// <summary>
        /// Raises the BlkAOvChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkAOvChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkAOvChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkAOvChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkAOvChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkAOvChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkAOv property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkAOv(object sender, System.EventArgs eventArgs)
        {
            this.BlkAOv = null;
        }
        
        private static ITypedElement RetrieveBlkVOvReference()
        {
            return ((ITypedElement)(((ModelElement)(AVCO.ClassInstance)).Resolve("BlkVOv")));
        }
        
        /// <summary>
        /// Raises the BlkVOvChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkVOvChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkVOvChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkVOvChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkVOvChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkVOvChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkVOv property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkVOv(object sender, System.EventArgs eventArgs)
        {
            this.BlkVOv = null;
        }
        
        private static ITypedElement RetrieveLimAOvReference()
        {
            return ((ITypedElement)(((ModelElement)(AVCO.ClassInstance)).Resolve("LimAOv")));
        }
        
        /// <summary>
        /// Raises the LimAOvChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLimAOvChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LimAOvChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LimAOvChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLimAOvChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LimAOvChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LimAOv property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLimAOv(object sender, System.EventArgs eventArgs)
        {
            this.LimAOv = null;
        }
        
        private static ITypedElement RetrieveLimVOvReference()
        {
            return ((ITypedElement)(((ModelElement)(AVCO.ClassInstance)).Resolve("LimVOv")));
        }
        
        /// <summary>
        /// Raises the LimVOvChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLimVOvChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LimVOvChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LimVOvChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLimVOvChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LimVOvChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LimVOv property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLimVOv(object sender, System.EventArgs eventArgs)
        {
            this.LimVOv = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TAPCHG"))
            {
                this.TapChg = ((IBSC)(value));
                return;
            }
            if ((feature == "BLKEF"))
            {
                this.BlkEF = ((ISPS)(value));
                return;
            }
            if ((feature == "BLKAOV"))
            {
                this.BlkAOv = ((ISPS)(value));
                return;
            }
            if ((feature == "BLKVOV"))
            {
                this.BlkVOv = ((ISPS)(value));
                return;
            }
            if ((feature == "LIMAOV"))
            {
                this.LimAOv = ((IASG)(value));
                return;
            }
            if ((feature == "LIMVOV"))
            {
                this.LimVOv = ((IASG)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TapChg"))
            {
                return new TapChgProxy(this);
            }
            if ((attribute == "BlkEF"))
            {
                return new BlkEFProxy(this);
            }
            if ((attribute == "BlkAOv"))
            {
                return new BlkAOvProxy(this);
            }
            if ((attribute == "BlkVOv"))
            {
                return new BlkVOvProxy(this);
            }
            if ((attribute == "LimAOv"))
            {
                return new LimAOvProxy(this);
            }
            if ((attribute == "LimVOv"))
            {
                return new LimVOvProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TapChg"))
            {
                return new TapChgProxy(this);
            }
            if ((reference == "BlkEF"))
            {
                return new BlkEFProxy(this);
            }
            if ((reference == "BlkAOv"))
            {
                return new BlkAOvProxy(this);
            }
            if ((reference == "BlkVOv"))
            {
                return new BlkVOvProxy(this);
            }
            if ((reference == "LimAOv"))
            {
                return new LimAOvProxy(this);
            }
            if ((reference == "LimVOv"))
            {
                return new LimVOvProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupA/AVCO")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AVCO class
        /// </summary>
        public class AVCOReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AVCO _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AVCOReferencedElementsCollection(AVCO parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TapChg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkEF != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkAOv != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkVOv != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LimAOv != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LimVOv != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TapChgChanged += this.PropagateValueChanges;
                this._parent.BlkEFChanged += this.PropagateValueChanges;
                this._parent.BlkAOvChanged += this.PropagateValueChanges;
                this._parent.BlkVOvChanged += this.PropagateValueChanges;
                this._parent.LimAOvChanged += this.PropagateValueChanges;
                this._parent.LimVOvChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TapChgChanged -= this.PropagateValueChanges;
                this._parent.BlkEFChanged -= this.PropagateValueChanges;
                this._parent.BlkAOvChanged -= this.PropagateValueChanges;
                this._parent.BlkVOvChanged -= this.PropagateValueChanges;
                this._parent.LimAOvChanged -= this.PropagateValueChanges;
                this._parent.LimVOvChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TapChg == null))
                {
                    IBSC tapChgCasted = item.As<IBSC>();
                    if ((tapChgCasted != null))
                    {
                        this._parent.TapChg = tapChgCasted;
                        return;
                    }
                }
                if ((this._parent.BlkEF == null))
                {
                    ISPS blkEFCasted = item.As<ISPS>();
                    if ((blkEFCasted != null))
                    {
                        this._parent.BlkEF = blkEFCasted;
                        return;
                    }
                }
                if ((this._parent.BlkAOv == null))
                {
                    ISPS blkAOvCasted = item.As<ISPS>();
                    if ((blkAOvCasted != null))
                    {
                        this._parent.BlkAOv = blkAOvCasted;
                        return;
                    }
                }
                if ((this._parent.BlkVOv == null))
                {
                    ISPS blkVOvCasted = item.As<ISPS>();
                    if ((blkVOvCasted != null))
                    {
                        this._parent.BlkVOv = blkVOvCasted;
                        return;
                    }
                }
                if ((this._parent.LimAOv == null))
                {
                    IASG limAOvCasted = item.As<IASG>();
                    if ((limAOvCasted != null))
                    {
                        this._parent.LimAOv = limAOvCasted;
                        return;
                    }
                }
                if ((this._parent.LimVOv == null))
                {
                    IASG limVOvCasted = item.As<IASG>();
                    if ((limVOvCasted != null))
                    {
                        this._parent.LimVOv = limVOvCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TapChg = null;
                this._parent.BlkEF = null;
                this._parent.BlkAOv = null;
                this._parent.BlkVOv = null;
                this._parent.LimAOv = null;
                this._parent.LimVOv = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TapChg))
                {
                    return true;
                }
                if ((item == this._parent.BlkEF))
                {
                    return true;
                }
                if ((item == this._parent.BlkAOv))
                {
                    return true;
                }
                if ((item == this._parent.BlkVOv))
                {
                    return true;
                }
                if ((item == this._parent.LimAOv))
                {
                    return true;
                }
                if ((item == this._parent.LimVOv))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TapChg != null))
                {
                    array[arrayIndex] = this._parent.TapChg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkEF != null))
                {
                    array[arrayIndex] = this._parent.BlkEF;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkAOv != null))
                {
                    array[arrayIndex] = this._parent.BlkAOv;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkVOv != null))
                {
                    array[arrayIndex] = this._parent.BlkVOv;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LimAOv != null))
                {
                    array[arrayIndex] = this._parent.LimAOv;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LimVOv != null))
                {
                    array[arrayIndex] = this._parent.LimVOv;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TapChg == item))
                {
                    this._parent.TapChg = null;
                    return true;
                }
                if ((this._parent.BlkEF == item))
                {
                    this._parent.BlkEF = null;
                    return true;
                }
                if ((this._parent.BlkAOv == item))
                {
                    this._parent.BlkAOv = null;
                    return true;
                }
                if ((this._parent.BlkVOv == item))
                {
                    this._parent.BlkVOv = null;
                    return true;
                }
                if ((this._parent.LimAOv == item))
                {
                    this._parent.LimAOv = null;
                    return true;
                }
                if ((this._parent.LimVOv == item))
                {
                    this._parent.LimVOv = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TapChg).Concat(this._parent.BlkEF).Concat(this._parent.BlkAOv).Concat(this._parent.BlkVOv).Concat(this._parent.LimAOv).Concat(this._parent.LimVOv).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TapChg property
        /// </summary>
        private sealed class TapChgProxy : ModelPropertyChange<IAVCO, IBSC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TapChgProxy(IAVCO modelElement) : 
                    base(modelElement, "TapChg")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBSC Value
            {
                get
                {
                    return this.ModelElement.TapChg;
                }
                set
                {
                    this.ModelElement.TapChg = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkEF property
        /// </summary>
        private sealed class BlkEFProxy : ModelPropertyChange<IAVCO, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkEFProxy(IAVCO modelElement) : 
                    base(modelElement, "BlkEF")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.BlkEF;
                }
                set
                {
                    this.ModelElement.BlkEF = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkAOv property
        /// </summary>
        private sealed class BlkAOvProxy : ModelPropertyChange<IAVCO, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkAOvProxy(IAVCO modelElement) : 
                    base(modelElement, "BlkAOv")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.BlkAOv;
                }
                set
                {
                    this.ModelElement.BlkAOv = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkVOv property
        /// </summary>
        private sealed class BlkVOvProxy : ModelPropertyChange<IAVCO, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkVOvProxy(IAVCO modelElement) : 
                    base(modelElement, "BlkVOv")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.BlkVOv;
                }
                set
                {
                    this.ModelElement.BlkVOv = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LimAOv property
        /// </summary>
        private sealed class LimAOvProxy : ModelPropertyChange<IAVCO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LimAOvProxy(IAVCO modelElement) : 
                    base(modelElement, "LimAOv")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LimAOv;
                }
                set
                {
                    this.ModelElement.LimAOv = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LimVOv property
        /// </summary>
        private sealed class LimVOvProxy : ModelPropertyChange<IAVCO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LimVOvProxy(IAVCO modelElement) : 
                    base(modelElement, "LimVOv")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LimVOv;
                }
                set
                {
                    this.ModelElement.LimVOv = value;
                }
            }
        }
    }
}

