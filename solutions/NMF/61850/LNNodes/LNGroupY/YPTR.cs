using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupY
{
    
    
    /// <summary>
    /// The default implementation of the YPTR class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pY")]
    [XmlNamespacePrefixAttribute("groupy")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupY/YPTR")]
    public partial class YPTR : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupY.GroupY, IYPTR, IModelElement
    {
        
        private static Lazy<ITypedElement> _opTmhReference = new Lazy<ITypedElement>(RetrieveOpTmhReference);
        
        /// <summary>
        /// The backing field for the OpTmh property
        /// </summary>
        private IINS _opTmh;
        
        private static Lazy<ITypedElement> _hPTmpReference = new Lazy<ITypedElement>(RetrieveHPTmpReference);
        
        /// <summary>
        /// The backing field for the HPTmp property
        /// </summary>
        private IMV _hPTmp;
        
        private static Lazy<ITypedElement> _hPZmpAlmReference = new Lazy<ITypedElement>(RetrieveHPZmpAlmReference);
        
        /// <summary>
        /// The backing field for the HPZmpAlm property
        /// </summary>
        private ISPS _hPZmpAlm;
        
        private static Lazy<ITypedElement> _hPTmpTrReference = new Lazy<ITypedElement>(RetrieveHPTmpTrReference);
        
        /// <summary>
        /// The backing field for the HPTmpTr property
        /// </summary>
        private ISPS _hPTmpTr;
        
        private static Lazy<ITypedElement> _oANLReference = new Lazy<ITypedElement>(RetrieveOANLReference);
        
        /// <summary>
        /// The backing field for the OANL property
        /// </summary>
        private ISPS _oANL;
        
        private static Lazy<ITypedElement> _opOvAReference = new Lazy<ITypedElement>(RetrieveOpOvAReference);
        
        /// <summary>
        /// The backing field for the OpOvA property
        /// </summary>
        private ISPS _opOvA;
        
        private static Lazy<ITypedElement> _opOvVReference = new Lazy<ITypedElement>(RetrieveOpOvVReference);
        
        /// <summary>
        /// The backing field for the OpOvV property
        /// </summary>
        private ISPS _opOvV;
        
        private static Lazy<ITypedElement> _opUnVReference = new Lazy<ITypedElement>(RetrieveOpUnVReference);
        
        /// <summary>
        /// The backing field for the OpUnV property
        /// </summary>
        private ISPS _opUnV;
        
        private static Lazy<ITypedElement> _cGAlmReference = new Lazy<ITypedElement>(RetrieveCGAlmReference);
        
        /// <summary>
        /// The backing field for the CGAlm property
        /// </summary>
        private ISPS _cGAlm;
        
        private static Lazy<ITypedElement> _hiVRtgReference = new Lazy<ITypedElement>(RetrieveHiVRtgReference);
        
        /// <summary>
        /// The backing field for the HiVRtg property
        /// </summary>
        private IASG _hiVRtg;
        
        private static Lazy<ITypedElement> _loVRtgReference = new Lazy<ITypedElement>(RetrieveLoVRtgReference);
        
        /// <summary>
        /// The backing field for the LoVRtg property
        /// </summary>
        private IASG _loVRtg;
        
        private static Lazy<ITypedElement> _pwrRtgReference = new Lazy<ITypedElement>(RetrievePwrRtgReference);
        
        /// <summary>
        /// The backing field for the PwrRtg property
        /// </summary>
        private IASG _pwrRtg;
        
        private static Lazy<ITypedElement> _transformerControlReference = new Lazy<ITypedElement>(RetrieveTransformerControlReference);
        
        /// <summary>
        /// The backing field for the TransformerControl property
        /// </summary>
        private IATCC _transformerControl;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The OpTmh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS OpTmh
        {
            get
            {
                return this._opTmh;
            }
            set
            {
                if ((this._opTmh != value))
                {
                    IINS old = this._opTmh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpTmhChanging(e);
                    this.OnPropertyChanging("OpTmh", e, _opTmhReference);
                    this._opTmh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpTmh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpTmh;
                    }
                    this.OnOpTmhChanged(e);
                    this.OnPropertyChanged("OpTmh", e, _opTmhReference);
                }
            }
        }
        
        /// <summary>
        /// The HPTmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HPTmp
        {
            get
            {
                return this._hPTmp;
            }
            set
            {
                if ((this._hPTmp != value))
                {
                    IMV old = this._hPTmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHPTmpChanging(e);
                    this.OnPropertyChanging("HPTmp", e, _hPTmpReference);
                    this._hPTmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHPTmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHPTmp;
                    }
                    this.OnHPTmpChanged(e);
                    this.OnPropertyChanged("HPTmp", e, _hPTmpReference);
                }
            }
        }
        
        /// <summary>
        /// The HPZmpAlm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS HPZmpAlm
        {
            get
            {
                return this._hPZmpAlm;
            }
            set
            {
                if ((this._hPZmpAlm != value))
                {
                    ISPS old = this._hPZmpAlm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHPZmpAlmChanging(e);
                    this.OnPropertyChanging("HPZmpAlm", e, _hPZmpAlmReference);
                    this._hPZmpAlm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHPZmpAlm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHPZmpAlm;
                    }
                    this.OnHPZmpAlmChanged(e);
                    this.OnPropertyChanged("HPZmpAlm", e, _hPZmpAlmReference);
                }
            }
        }
        
        /// <summary>
        /// The HPTmpTr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS HPTmpTr
        {
            get
            {
                return this._hPTmpTr;
            }
            set
            {
                if ((this._hPTmpTr != value))
                {
                    ISPS old = this._hPTmpTr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHPTmpTrChanging(e);
                    this.OnPropertyChanging("HPTmpTr", e, _hPTmpTrReference);
                    this._hPTmpTr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHPTmpTr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHPTmpTr;
                    }
                    this.OnHPTmpTrChanged(e);
                    this.OnPropertyChanged("HPTmpTr", e, _hPTmpTrReference);
                }
            }
        }
        
        /// <summary>
        /// The OANL property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS OANL
        {
            get
            {
                return this._oANL;
            }
            set
            {
                if ((this._oANL != value))
                {
                    ISPS old = this._oANL;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOANLChanging(e);
                    this.OnPropertyChanging("OANL", e, _oANLReference);
                    this._oANL = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOANL;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOANL;
                    }
                    this.OnOANLChanged(e);
                    this.OnPropertyChanged("OANL", e, _oANLReference);
                }
            }
        }
        
        /// <summary>
        /// The OpOvA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS OpOvA
        {
            get
            {
                return this._opOvA;
            }
            set
            {
                if ((this._opOvA != value))
                {
                    ISPS old = this._opOvA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpOvAChanging(e);
                    this.OnPropertyChanging("OpOvA", e, _opOvAReference);
                    this._opOvA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpOvA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpOvA;
                    }
                    this.OnOpOvAChanged(e);
                    this.OnPropertyChanged("OpOvA", e, _opOvAReference);
                }
            }
        }
        
        /// <summary>
        /// The OpOvV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS OpOvV
        {
            get
            {
                return this._opOvV;
            }
            set
            {
                if ((this._opOvV != value))
                {
                    ISPS old = this._opOvV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpOvVChanging(e);
                    this.OnPropertyChanging("OpOvV", e, _opOvVReference);
                    this._opOvV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpOvV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpOvV;
                    }
                    this.OnOpOvVChanged(e);
                    this.OnPropertyChanged("OpOvV", e, _opOvVReference);
                }
            }
        }
        
        /// <summary>
        /// The OpUnV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS OpUnV
        {
            get
            {
                return this._opUnV;
            }
            set
            {
                if ((this._opUnV != value))
                {
                    ISPS old = this._opUnV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpUnVChanging(e);
                    this.OnPropertyChanging("OpUnV", e, _opUnVReference);
                    this._opUnV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpUnV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpUnV;
                    }
                    this.OnOpUnVChanged(e);
                    this.OnPropertyChanged("OpUnV", e, _opUnVReference);
                }
            }
        }
        
        /// <summary>
        /// The CGAlm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS CGAlm
        {
            get
            {
                return this._cGAlm;
            }
            set
            {
                if ((this._cGAlm != value))
                {
                    ISPS old = this._cGAlm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCGAlmChanging(e);
                    this.OnPropertyChanging("CGAlm", e, _cGAlmReference);
                    this._cGAlm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCGAlm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCGAlm;
                    }
                    this.OnCGAlmChanged(e);
                    this.OnPropertyChanged("CGAlm", e, _cGAlmReference);
                }
            }
        }
        
        /// <summary>
        /// The HiVRtg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG HiVRtg
        {
            get
            {
                return this._hiVRtg;
            }
            set
            {
                if ((this._hiVRtg != value))
                {
                    IASG old = this._hiVRtg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHiVRtgChanging(e);
                    this.OnPropertyChanging("HiVRtg", e, _hiVRtgReference);
                    this._hiVRtg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHiVRtg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHiVRtg;
                    }
                    this.OnHiVRtgChanged(e);
                    this.OnPropertyChanged("HiVRtg", e, _hiVRtgReference);
                }
            }
        }
        
        /// <summary>
        /// The LoVRtg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LoVRtg
        {
            get
            {
                return this._loVRtg;
            }
            set
            {
                if ((this._loVRtg != value))
                {
                    IASG old = this._loVRtg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoVRtgChanging(e);
                    this.OnPropertyChanging("LoVRtg", e, _loVRtgReference);
                    this._loVRtg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLoVRtg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLoVRtg;
                    }
                    this.OnLoVRtgChanged(e);
                    this.OnPropertyChanged("LoVRtg", e, _loVRtgReference);
                }
            }
        }
        
        /// <summary>
        /// The PwrRtg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG PwrRtg
        {
            get
            {
                return this._pwrRtg;
            }
            set
            {
                if ((this._pwrRtg != value))
                {
                    IASG old = this._pwrRtg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPwrRtgChanging(e);
                    this.OnPropertyChanging("PwrRtg", e, _pwrRtgReference);
                    this._pwrRtg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPwrRtg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPwrRtg;
                    }
                    this.OnPwrRtgChanged(e);
                    this.OnPropertyChanged("PwrRtg", e, _pwrRtgReference);
                }
            }
        }
        
        /// <summary>
        /// The TransformerControl property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IATCC TransformerControl
        {
            get
            {
                return this._transformerControl;
            }
            set
            {
                if ((this._transformerControl != value))
                {
                    IATCC old = this._transformerControl;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerControlChanging(e);
                    this.OnPropertyChanging("TransformerControl", e, _transformerControlReference);
                    this._transformerControl = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTransformerControl;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTransformerControl;
                    }
                    this.OnTransformerControlChanged(e);
                    this.OnPropertyChanged("TransformerControl", e, _transformerControlReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new YPTRReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupY/YPTR")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OpTmh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpTmhChanging;
        
        /// <summary>
        /// Gets fired when the OpTmh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpTmhChanged;
        
        /// <summary>
        /// Gets fired before the HPTmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HPTmpChanging;
        
        /// <summary>
        /// Gets fired when the HPTmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HPTmpChanged;
        
        /// <summary>
        /// Gets fired before the HPZmpAlm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HPZmpAlmChanging;
        
        /// <summary>
        /// Gets fired when the HPZmpAlm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HPZmpAlmChanged;
        
        /// <summary>
        /// Gets fired before the HPTmpTr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HPTmpTrChanging;
        
        /// <summary>
        /// Gets fired when the HPTmpTr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HPTmpTrChanged;
        
        /// <summary>
        /// Gets fired before the OANL property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OANLChanging;
        
        /// <summary>
        /// Gets fired when the OANL property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OANLChanged;
        
        /// <summary>
        /// Gets fired before the OpOvA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpOvAChanging;
        
        /// <summary>
        /// Gets fired when the OpOvA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpOvAChanged;
        
        /// <summary>
        /// Gets fired before the OpOvV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpOvVChanging;
        
        /// <summary>
        /// Gets fired when the OpOvV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpOvVChanged;
        
        /// <summary>
        /// Gets fired before the OpUnV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpUnVChanging;
        
        /// <summary>
        /// Gets fired when the OpUnV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpUnVChanged;
        
        /// <summary>
        /// Gets fired before the CGAlm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CGAlmChanging;
        
        /// <summary>
        /// Gets fired when the CGAlm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CGAlmChanged;
        
        /// <summary>
        /// Gets fired before the HiVRtg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiVRtgChanging;
        
        /// <summary>
        /// Gets fired when the HiVRtg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiVRtgChanged;
        
        /// <summary>
        /// Gets fired before the LoVRtg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoVRtgChanging;
        
        /// <summary>
        /// Gets fired when the LoVRtg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoVRtgChanged;
        
        /// <summary>
        /// Gets fired before the PwrRtg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PwrRtgChanging;
        
        /// <summary>
        /// Gets fired when the PwrRtg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PwrRtgChanged;
        
        /// <summary>
        /// Gets fired before the TransformerControl property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerControlChanging;
        
        /// <summary>
        /// Gets fired when the TransformerControl property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerControlChanged;
        
        private static ITypedElement RetrieveOpTmhReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("OpTmh")));
        }
        
        /// <summary>
        /// Raises the OpTmhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpTmhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpTmhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpTmhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpTmhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpTmhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpTmh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpTmh(object sender, System.EventArgs eventArgs)
        {
            this.OpTmh = null;
        }
        
        private static ITypedElement RetrieveHPTmpReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("HPTmp")));
        }
        
        /// <summary>
        /// Raises the HPTmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHPTmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HPTmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HPTmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHPTmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HPTmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HPTmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHPTmp(object sender, System.EventArgs eventArgs)
        {
            this.HPTmp = null;
        }
        
        private static ITypedElement RetrieveHPZmpAlmReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("HPZmpAlm")));
        }
        
        /// <summary>
        /// Raises the HPZmpAlmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHPZmpAlmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HPZmpAlmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HPZmpAlmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHPZmpAlmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HPZmpAlmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HPZmpAlm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHPZmpAlm(object sender, System.EventArgs eventArgs)
        {
            this.HPZmpAlm = null;
        }
        
        private static ITypedElement RetrieveHPTmpTrReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("HPTmpTr")));
        }
        
        /// <summary>
        /// Raises the HPTmpTrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHPTmpTrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HPTmpTrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HPTmpTrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHPTmpTrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HPTmpTrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HPTmpTr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHPTmpTr(object sender, System.EventArgs eventArgs)
        {
            this.HPTmpTr = null;
        }
        
        private static ITypedElement RetrieveOANLReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("OANL")));
        }
        
        /// <summary>
        /// Raises the OANLChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOANLChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OANLChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OANLChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOANLChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OANLChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OANL property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOANL(object sender, System.EventArgs eventArgs)
        {
            this.OANL = null;
        }
        
        private static ITypedElement RetrieveOpOvAReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("OpOvA")));
        }
        
        /// <summary>
        /// Raises the OpOvAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpOvAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpOvAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpOvAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpOvAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpOvAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpOvA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpOvA(object sender, System.EventArgs eventArgs)
        {
            this.OpOvA = null;
        }
        
        private static ITypedElement RetrieveOpOvVReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("OpOvV")));
        }
        
        /// <summary>
        /// Raises the OpOvVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpOvVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpOvVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpOvVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpOvVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpOvVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpOvV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpOvV(object sender, System.EventArgs eventArgs)
        {
            this.OpOvV = null;
        }
        
        private static ITypedElement RetrieveOpUnVReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("OpUnV")));
        }
        
        /// <summary>
        /// Raises the OpUnVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpUnVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpUnVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpUnVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpUnVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpUnVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpUnV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpUnV(object sender, System.EventArgs eventArgs)
        {
            this.OpUnV = null;
        }
        
        private static ITypedElement RetrieveCGAlmReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("CGAlm")));
        }
        
        /// <summary>
        /// Raises the CGAlmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCGAlmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CGAlmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CGAlmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCGAlmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CGAlmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CGAlm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCGAlm(object sender, System.EventArgs eventArgs)
        {
            this.CGAlm = null;
        }
        
        private static ITypedElement RetrieveHiVRtgReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("HiVRtg")));
        }
        
        /// <summary>
        /// Raises the HiVRtgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiVRtgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiVRtgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HiVRtgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiVRtgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiVRtgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HiVRtg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHiVRtg(object sender, System.EventArgs eventArgs)
        {
            this.HiVRtg = null;
        }
        
        private static ITypedElement RetrieveLoVRtgReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("LoVRtg")));
        }
        
        /// <summary>
        /// Raises the LoVRtgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoVRtgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoVRtgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoVRtgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoVRtgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoVRtgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LoVRtg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoVRtg(object sender, System.EventArgs eventArgs)
        {
            this.LoVRtg = null;
        }
        
        private static ITypedElement RetrievePwrRtgReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("PwrRtg")));
        }
        
        /// <summary>
        /// Raises the PwrRtgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPwrRtgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PwrRtgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PwrRtgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPwrRtgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PwrRtgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PwrRtg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPwrRtg(object sender, System.EventArgs eventArgs)
        {
            this.PwrRtg = null;
        }
        
        private static ITypedElement RetrieveTransformerControlReference()
        {
            return ((ITypedElement)(((ModelElement)(YPTR.ClassInstance)).Resolve("TransformerControl")));
        }
        
        /// <summary>
        /// Raises the TransformerControlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerControlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerControlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerControlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerControlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerControlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerControl property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerControl(object sender, System.EventArgs eventArgs)
        {
            this.TransformerControl = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPTMH"))
            {
                this.OpTmh = ((IINS)(value));
                return;
            }
            if ((feature == "HPTMP"))
            {
                this.HPTmp = ((IMV)(value));
                return;
            }
            if ((feature == "HPZMPALM"))
            {
                this.HPZmpAlm = ((ISPS)(value));
                return;
            }
            if ((feature == "HPTMPTR"))
            {
                this.HPTmpTr = ((ISPS)(value));
                return;
            }
            if ((feature == "OANL"))
            {
                this.OANL = ((ISPS)(value));
                return;
            }
            if ((feature == "OPOVA"))
            {
                this.OpOvA = ((ISPS)(value));
                return;
            }
            if ((feature == "OPOVV"))
            {
                this.OpOvV = ((ISPS)(value));
                return;
            }
            if ((feature == "OPUNV"))
            {
                this.OpUnV = ((ISPS)(value));
                return;
            }
            if ((feature == "CGALM"))
            {
                this.CGAlm = ((ISPS)(value));
                return;
            }
            if ((feature == "HIVRTG"))
            {
                this.HiVRtg = ((IASG)(value));
                return;
            }
            if ((feature == "LOVRTG"))
            {
                this.LoVRtg = ((IASG)(value));
                return;
            }
            if ((feature == "PWRRTG"))
            {
                this.PwrRtg = ((IASG)(value));
                return;
            }
            if ((feature == "TRANSFORMERCONTROL"))
            {
                this.TransformerControl = ((IATCC)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpTmh"))
            {
                return new OpTmhProxy(this);
            }
            if ((attribute == "HPTmp"))
            {
                return new HPTmpProxy(this);
            }
            if ((attribute == "HPZmpAlm"))
            {
                return new HPZmpAlmProxy(this);
            }
            if ((attribute == "HPTmpTr"))
            {
                return new HPTmpTrProxy(this);
            }
            if ((attribute == "OANL"))
            {
                return new OANLProxy(this);
            }
            if ((attribute == "OpOvA"))
            {
                return new OpOvAProxy(this);
            }
            if ((attribute == "OpOvV"))
            {
                return new OpOvVProxy(this);
            }
            if ((attribute == "OpUnV"))
            {
                return new OpUnVProxy(this);
            }
            if ((attribute == "CGAlm"))
            {
                return new CGAlmProxy(this);
            }
            if ((attribute == "HiVRtg"))
            {
                return new HiVRtgProxy(this);
            }
            if ((attribute == "LoVRtg"))
            {
                return new LoVRtgProxy(this);
            }
            if ((attribute == "PwrRtg"))
            {
                return new PwrRtgProxy(this);
            }
            if ((attribute == "TransformerControl"))
            {
                return new TransformerControlProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpTmh"))
            {
                return new OpTmhProxy(this);
            }
            if ((reference == "HPTmp"))
            {
                return new HPTmpProxy(this);
            }
            if ((reference == "HPZmpAlm"))
            {
                return new HPZmpAlmProxy(this);
            }
            if ((reference == "HPTmpTr"))
            {
                return new HPTmpTrProxy(this);
            }
            if ((reference == "OANL"))
            {
                return new OANLProxy(this);
            }
            if ((reference == "OpOvA"))
            {
                return new OpOvAProxy(this);
            }
            if ((reference == "OpOvV"))
            {
                return new OpOvVProxy(this);
            }
            if ((reference == "OpUnV"))
            {
                return new OpUnVProxy(this);
            }
            if ((reference == "CGAlm"))
            {
                return new CGAlmProxy(this);
            }
            if ((reference == "HiVRtg"))
            {
                return new HiVRtgProxy(this);
            }
            if ((reference == "LoVRtg"))
            {
                return new LoVRtgProxy(this);
            }
            if ((reference == "PwrRtg"))
            {
                return new PwrRtgProxy(this);
            }
            if ((reference == "TransformerControl"))
            {
                return new TransformerControlProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupY/YPTR")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the YPTR class
        /// </summary>
        public class YPTRReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private YPTR _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public YPTRReferencedElementsCollection(YPTR parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpTmh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HPTmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HPZmpAlm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HPTmpTr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OANL != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpOvA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpOvV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpUnV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CGAlm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HiVRtg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LoVRtg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PwrRtg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TransformerControl != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpTmhChanged += this.PropagateValueChanges;
                this._parent.HPTmpChanged += this.PropagateValueChanges;
                this._parent.HPZmpAlmChanged += this.PropagateValueChanges;
                this._parent.HPTmpTrChanged += this.PropagateValueChanges;
                this._parent.OANLChanged += this.PropagateValueChanges;
                this._parent.OpOvAChanged += this.PropagateValueChanges;
                this._parent.OpOvVChanged += this.PropagateValueChanges;
                this._parent.OpUnVChanged += this.PropagateValueChanges;
                this._parent.CGAlmChanged += this.PropagateValueChanges;
                this._parent.HiVRtgChanged += this.PropagateValueChanges;
                this._parent.LoVRtgChanged += this.PropagateValueChanges;
                this._parent.PwrRtgChanged += this.PropagateValueChanges;
                this._parent.TransformerControlChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpTmhChanged -= this.PropagateValueChanges;
                this._parent.HPTmpChanged -= this.PropagateValueChanges;
                this._parent.HPZmpAlmChanged -= this.PropagateValueChanges;
                this._parent.HPTmpTrChanged -= this.PropagateValueChanges;
                this._parent.OANLChanged -= this.PropagateValueChanges;
                this._parent.OpOvAChanged -= this.PropagateValueChanges;
                this._parent.OpOvVChanged -= this.PropagateValueChanges;
                this._parent.OpUnVChanged -= this.PropagateValueChanges;
                this._parent.CGAlmChanged -= this.PropagateValueChanges;
                this._parent.HiVRtgChanged -= this.PropagateValueChanges;
                this._parent.LoVRtgChanged -= this.PropagateValueChanges;
                this._parent.PwrRtgChanged -= this.PropagateValueChanges;
                this._parent.TransformerControlChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpTmh == null))
                {
                    IINS opTmhCasted = item.As<IINS>();
                    if ((opTmhCasted != null))
                    {
                        this._parent.OpTmh = opTmhCasted;
                        return;
                    }
                }
                if ((this._parent.HPTmp == null))
                {
                    IMV hPTmpCasted = item.As<IMV>();
                    if ((hPTmpCasted != null))
                    {
                        this._parent.HPTmp = hPTmpCasted;
                        return;
                    }
                }
                if ((this._parent.HPZmpAlm == null))
                {
                    ISPS hPZmpAlmCasted = item.As<ISPS>();
                    if ((hPZmpAlmCasted != null))
                    {
                        this._parent.HPZmpAlm = hPZmpAlmCasted;
                        return;
                    }
                }
                if ((this._parent.HPTmpTr == null))
                {
                    ISPS hPTmpTrCasted = item.As<ISPS>();
                    if ((hPTmpTrCasted != null))
                    {
                        this._parent.HPTmpTr = hPTmpTrCasted;
                        return;
                    }
                }
                if ((this._parent.OANL == null))
                {
                    ISPS oANLCasted = item.As<ISPS>();
                    if ((oANLCasted != null))
                    {
                        this._parent.OANL = oANLCasted;
                        return;
                    }
                }
                if ((this._parent.OpOvA == null))
                {
                    ISPS opOvACasted = item.As<ISPS>();
                    if ((opOvACasted != null))
                    {
                        this._parent.OpOvA = opOvACasted;
                        return;
                    }
                }
                if ((this._parent.OpOvV == null))
                {
                    ISPS opOvVCasted = item.As<ISPS>();
                    if ((opOvVCasted != null))
                    {
                        this._parent.OpOvV = opOvVCasted;
                        return;
                    }
                }
                if ((this._parent.OpUnV == null))
                {
                    ISPS opUnVCasted = item.As<ISPS>();
                    if ((opUnVCasted != null))
                    {
                        this._parent.OpUnV = opUnVCasted;
                        return;
                    }
                }
                if ((this._parent.CGAlm == null))
                {
                    ISPS cGAlmCasted = item.As<ISPS>();
                    if ((cGAlmCasted != null))
                    {
                        this._parent.CGAlm = cGAlmCasted;
                        return;
                    }
                }
                if ((this._parent.HiVRtg == null))
                {
                    IASG hiVRtgCasted = item.As<IASG>();
                    if ((hiVRtgCasted != null))
                    {
                        this._parent.HiVRtg = hiVRtgCasted;
                        return;
                    }
                }
                if ((this._parent.LoVRtg == null))
                {
                    IASG loVRtgCasted = item.As<IASG>();
                    if ((loVRtgCasted != null))
                    {
                        this._parent.LoVRtg = loVRtgCasted;
                        return;
                    }
                }
                if ((this._parent.PwrRtg == null))
                {
                    IASG pwrRtgCasted = item.As<IASG>();
                    if ((pwrRtgCasted != null))
                    {
                        this._parent.PwrRtg = pwrRtgCasted;
                        return;
                    }
                }
                if ((this._parent.TransformerControl == null))
                {
                    IATCC transformerControlCasted = item.As<IATCC>();
                    if ((transformerControlCasted != null))
                    {
                        this._parent.TransformerControl = transformerControlCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpTmh = null;
                this._parent.HPTmp = null;
                this._parent.HPZmpAlm = null;
                this._parent.HPTmpTr = null;
                this._parent.OANL = null;
                this._parent.OpOvA = null;
                this._parent.OpOvV = null;
                this._parent.OpUnV = null;
                this._parent.CGAlm = null;
                this._parent.HiVRtg = null;
                this._parent.LoVRtg = null;
                this._parent.PwrRtg = null;
                this._parent.TransformerControl = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpTmh))
                {
                    return true;
                }
                if ((item == this._parent.HPTmp))
                {
                    return true;
                }
                if ((item == this._parent.HPZmpAlm))
                {
                    return true;
                }
                if ((item == this._parent.HPTmpTr))
                {
                    return true;
                }
                if ((item == this._parent.OANL))
                {
                    return true;
                }
                if ((item == this._parent.OpOvA))
                {
                    return true;
                }
                if ((item == this._parent.OpOvV))
                {
                    return true;
                }
                if ((item == this._parent.OpUnV))
                {
                    return true;
                }
                if ((item == this._parent.CGAlm))
                {
                    return true;
                }
                if ((item == this._parent.HiVRtg))
                {
                    return true;
                }
                if ((item == this._parent.LoVRtg))
                {
                    return true;
                }
                if ((item == this._parent.PwrRtg))
                {
                    return true;
                }
                if ((item == this._parent.TransformerControl))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpTmh != null))
                {
                    array[arrayIndex] = this._parent.OpTmh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HPTmp != null))
                {
                    array[arrayIndex] = this._parent.HPTmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HPZmpAlm != null))
                {
                    array[arrayIndex] = this._parent.HPZmpAlm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HPTmpTr != null))
                {
                    array[arrayIndex] = this._parent.HPTmpTr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OANL != null))
                {
                    array[arrayIndex] = this._parent.OANL;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpOvA != null))
                {
                    array[arrayIndex] = this._parent.OpOvA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpOvV != null))
                {
                    array[arrayIndex] = this._parent.OpOvV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpUnV != null))
                {
                    array[arrayIndex] = this._parent.OpUnV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CGAlm != null))
                {
                    array[arrayIndex] = this._parent.CGAlm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HiVRtg != null))
                {
                    array[arrayIndex] = this._parent.HiVRtg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LoVRtg != null))
                {
                    array[arrayIndex] = this._parent.LoVRtg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PwrRtg != null))
                {
                    array[arrayIndex] = this._parent.PwrRtg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TransformerControl != null))
                {
                    array[arrayIndex] = this._parent.TransformerControl;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpTmh == item))
                {
                    this._parent.OpTmh = null;
                    return true;
                }
                if ((this._parent.HPTmp == item))
                {
                    this._parent.HPTmp = null;
                    return true;
                }
                if ((this._parent.HPZmpAlm == item))
                {
                    this._parent.HPZmpAlm = null;
                    return true;
                }
                if ((this._parent.HPTmpTr == item))
                {
                    this._parent.HPTmpTr = null;
                    return true;
                }
                if ((this._parent.OANL == item))
                {
                    this._parent.OANL = null;
                    return true;
                }
                if ((this._parent.OpOvA == item))
                {
                    this._parent.OpOvA = null;
                    return true;
                }
                if ((this._parent.OpOvV == item))
                {
                    this._parent.OpOvV = null;
                    return true;
                }
                if ((this._parent.OpUnV == item))
                {
                    this._parent.OpUnV = null;
                    return true;
                }
                if ((this._parent.CGAlm == item))
                {
                    this._parent.CGAlm = null;
                    return true;
                }
                if ((this._parent.HiVRtg == item))
                {
                    this._parent.HiVRtg = null;
                    return true;
                }
                if ((this._parent.LoVRtg == item))
                {
                    this._parent.LoVRtg = null;
                    return true;
                }
                if ((this._parent.PwrRtg == item))
                {
                    this._parent.PwrRtg = null;
                    return true;
                }
                if ((this._parent.TransformerControl == item))
                {
                    this._parent.TransformerControl = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpTmh).Concat(this._parent.HPTmp).Concat(this._parent.HPZmpAlm).Concat(this._parent.HPTmpTr).Concat(this._parent.OANL).Concat(this._parent.OpOvA).Concat(this._parent.OpOvV).Concat(this._parent.OpUnV).Concat(this._parent.CGAlm).Concat(this._parent.HiVRtg).Concat(this._parent.LoVRtg).Concat(this._parent.PwrRtg).Concat(this._parent.TransformerControl).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpTmh property
        /// </summary>
        private sealed class OpTmhProxy : ModelPropertyChange<IYPTR, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpTmhProxy(IYPTR modelElement) : 
                    base(modelElement, "OpTmh")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.OpTmh;
                }
                set
                {
                    this.ModelElement.OpTmh = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HPTmp property
        /// </summary>
        private sealed class HPTmpProxy : ModelPropertyChange<IYPTR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HPTmpProxy(IYPTR modelElement) : 
                    base(modelElement, "HPTmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HPTmp;
                }
                set
                {
                    this.ModelElement.HPTmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HPZmpAlm property
        /// </summary>
        private sealed class HPZmpAlmProxy : ModelPropertyChange<IYPTR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HPZmpAlmProxy(IYPTR modelElement) : 
                    base(modelElement, "HPZmpAlm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.HPZmpAlm;
                }
                set
                {
                    this.ModelElement.HPZmpAlm = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HPTmpTr property
        /// </summary>
        private sealed class HPTmpTrProxy : ModelPropertyChange<IYPTR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HPTmpTrProxy(IYPTR modelElement) : 
                    base(modelElement, "HPTmpTr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.HPTmpTr;
                }
                set
                {
                    this.ModelElement.HPTmpTr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OANL property
        /// </summary>
        private sealed class OANLProxy : ModelPropertyChange<IYPTR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OANLProxy(IYPTR modelElement) : 
                    base(modelElement, "OANL")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.OANL;
                }
                set
                {
                    this.ModelElement.OANL = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpOvA property
        /// </summary>
        private sealed class OpOvAProxy : ModelPropertyChange<IYPTR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpOvAProxy(IYPTR modelElement) : 
                    base(modelElement, "OpOvA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.OpOvA;
                }
                set
                {
                    this.ModelElement.OpOvA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpOvV property
        /// </summary>
        private sealed class OpOvVProxy : ModelPropertyChange<IYPTR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpOvVProxy(IYPTR modelElement) : 
                    base(modelElement, "OpOvV")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.OpOvV;
                }
                set
                {
                    this.ModelElement.OpOvV = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpUnV property
        /// </summary>
        private sealed class OpUnVProxy : ModelPropertyChange<IYPTR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpUnVProxy(IYPTR modelElement) : 
                    base(modelElement, "OpUnV")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.OpUnV;
                }
                set
                {
                    this.ModelElement.OpUnV = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CGAlm property
        /// </summary>
        private sealed class CGAlmProxy : ModelPropertyChange<IYPTR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CGAlmProxy(IYPTR modelElement) : 
                    base(modelElement, "CGAlm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.CGAlm;
                }
                set
                {
                    this.ModelElement.CGAlm = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HiVRtg property
        /// </summary>
        private sealed class HiVRtgProxy : ModelPropertyChange<IYPTR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HiVRtgProxy(IYPTR modelElement) : 
                    base(modelElement, "HiVRtg")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.HiVRtg;
                }
                set
                {
                    this.ModelElement.HiVRtg = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LoVRtg property
        /// </summary>
        private sealed class LoVRtgProxy : ModelPropertyChange<IYPTR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoVRtgProxy(IYPTR modelElement) : 
                    base(modelElement, "LoVRtg")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LoVRtg;
                }
                set
                {
                    this.ModelElement.LoVRtg = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PwrRtg property
        /// </summary>
        private sealed class PwrRtgProxy : ModelPropertyChange<IYPTR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PwrRtgProxy(IYPTR modelElement) : 
                    base(modelElement, "PwrRtg")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.PwrRtg;
                }
                set
                {
                    this.ModelElement.PwrRtg = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerControl property
        /// </summary>
        private sealed class TransformerControlProxy : ModelPropertyChange<IYPTR, IATCC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerControlProxy(IYPTR modelElement) : 
                    base(modelElement, "TransformerControl")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IATCC Value
            {
                get
                {
                    return this.ModelElement.TransformerControl;
                }
                set
                {
                    this.ModelElement.TransformerControl = value;
                }
            }
        }
    }
}

