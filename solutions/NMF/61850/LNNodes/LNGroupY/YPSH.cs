using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupY
{
    
    
    /// <summary>
    /// The default implementation of the YPSH class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pY")]
    [XmlNamespacePrefixAttribute("groupy")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupY/YPSH")]
    public partial class YPSH : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupY.GroupY, IYPSH, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ShOpCap property
        /// </summary>
        private Nullable<SwitchingCapabilityKind> _shOpCap;
        
        private static Lazy<ITypedElement> _shOpCapAttribute = new Lazy<ITypedElement>(RetrieveShOpCapAttribute);
        
        /// <summary>
        /// The backing field for the MaxOpCap property
        /// </summary>
        private Nullable<SwitchingCapabilityKind> _maxOpCap;
        
        private static Lazy<ITypedElement> _maxOpCapAttribute = new Lazy<ITypedElement>(RetrieveMaxOpCapAttribute);
        
        private static Lazy<ITypedElement> _opTmhReference = new Lazy<ITypedElement>(RetrieveOpTmhReference);
        
        /// <summary>
        /// The backing field for the OpTmh property
        /// </summary>
        private IINS _opTmh;
        
        private static Lazy<ITypedElement> _posReference = new Lazy<ITypedElement>(RetrievePosReference);
        
        /// <summary>
        /// The backing field for the Pos property
        /// </summary>
        private IDPC _pos;
        
        private static Lazy<ITypedElement> _blkOpnReference = new Lazy<ITypedElement>(RetrieveBlkOpnReference);
        
        /// <summary>
        /// The backing field for the BlkOpn property
        /// </summary>
        private ISPC _blkOpn;
        
        private static Lazy<ITypedElement> _blkClsReference = new Lazy<ITypedElement>(RetrieveBlkClsReference);
        
        /// <summary>
        /// The backing field for the BlkCls property
        /// </summary>
        private ISPC _blkCls;
        
        private static Lazy<ITypedElement> _chaMotEnaReference = new Lazy<ITypedElement>(RetrieveChaMotEnaReference);
        
        /// <summary>
        /// The backing field for the ChaMotEna property
        /// </summary>
        private ISPC _chaMotEna;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ShOpCap property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SwitchingCapabilityKind> ShOpCap
        {
            get
            {
                return this._shOpCap;
            }
            set
            {
                if ((this._shOpCap != value))
                {
                    Nullable<SwitchingCapabilityKind> old = this._shOpCap;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShOpCapChanging(e);
                    this.OnPropertyChanging("ShOpCap", e, _shOpCapAttribute);
                    this._shOpCap = value;
                    this.OnShOpCapChanged(e);
                    this.OnPropertyChanged("ShOpCap", e, _shOpCapAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MaxOpCap property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SwitchingCapabilityKind> MaxOpCap
        {
            get
            {
                return this._maxOpCap;
            }
            set
            {
                if ((this._maxOpCap != value))
                {
                    Nullable<SwitchingCapabilityKind> old = this._maxOpCap;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxOpCapChanging(e);
                    this.OnPropertyChanging("MaxOpCap", e, _maxOpCapAttribute);
                    this._maxOpCap = value;
                    this.OnMaxOpCapChanged(e);
                    this.OnPropertyChanged("MaxOpCap", e, _maxOpCapAttribute);
                }
            }
        }
        
        /// <summary>
        /// The OpTmh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS OpTmh
        {
            get
            {
                return this._opTmh;
            }
            set
            {
                if ((this._opTmh != value))
                {
                    IINS old = this._opTmh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpTmhChanging(e);
                    this.OnPropertyChanging("OpTmh", e, _opTmhReference);
                    this._opTmh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpTmh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpTmh;
                    }
                    this.OnOpTmhChanged(e);
                    this.OnPropertyChanged("OpTmh", e, _opTmhReference);
                }
            }
        }
        
        /// <summary>
        /// The Pos property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPC Pos
        {
            get
            {
                return this._pos;
            }
            set
            {
                if ((this._pos != value))
                {
                    IDPC old = this._pos;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPosChanging(e);
                    this.OnPropertyChanging("Pos", e, _posReference);
                    this._pos = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPos;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPos;
                    }
                    this.OnPosChanged(e);
                    this.OnPropertyChanged("Pos", e, _posReference);
                }
            }
        }
        
        /// <summary>
        /// The BlkOpn property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC BlkOpn
        {
            get
            {
                return this._blkOpn;
            }
            set
            {
                if ((this._blkOpn != value))
                {
                    ISPC old = this._blkOpn;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkOpnChanging(e);
                    this.OnPropertyChanging("BlkOpn", e, _blkOpnReference);
                    this._blkOpn = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkOpn;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkOpn;
                    }
                    this.OnBlkOpnChanged(e);
                    this.OnPropertyChanged("BlkOpn", e, _blkOpnReference);
                }
            }
        }
        
        /// <summary>
        /// The BlkCls property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC BlkCls
        {
            get
            {
                return this._blkCls;
            }
            set
            {
                if ((this._blkCls != value))
                {
                    ISPC old = this._blkCls;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkClsChanging(e);
                    this.OnPropertyChanging("BlkCls", e, _blkClsReference);
                    this._blkCls = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkCls;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkCls;
                    }
                    this.OnBlkClsChanged(e);
                    this.OnPropertyChanged("BlkCls", e, _blkClsReference);
                }
            }
        }
        
        /// <summary>
        /// The ChaMotEna property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC ChaMotEna
        {
            get
            {
                return this._chaMotEna;
            }
            set
            {
                if ((this._chaMotEna != value))
                {
                    ISPC old = this._chaMotEna;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChaMotEnaChanging(e);
                    this.OnPropertyChanging("ChaMotEna", e, _chaMotEnaReference);
                    this._chaMotEna = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetChaMotEna;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetChaMotEna;
                    }
                    this.OnChaMotEnaChanged(e);
                    this.OnPropertyChanged("ChaMotEna", e, _chaMotEnaReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new YPSHReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupY/YPSH")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ShOpCap property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShOpCapChanging;
        
        /// <summary>
        /// Gets fired when the ShOpCap property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShOpCapChanged;
        
        /// <summary>
        /// Gets fired before the MaxOpCap property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOpCapChanging;
        
        /// <summary>
        /// Gets fired when the MaxOpCap property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOpCapChanged;
        
        /// <summary>
        /// Gets fired before the OpTmh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpTmhChanging;
        
        /// <summary>
        /// Gets fired when the OpTmh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpTmhChanged;
        
        /// <summary>
        /// Gets fired before the Pos property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosChanging;
        
        /// <summary>
        /// Gets fired when the Pos property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosChanged;
        
        /// <summary>
        /// Gets fired before the BlkOpn property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkOpnChanging;
        
        /// <summary>
        /// Gets fired when the BlkOpn property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkOpnChanged;
        
        /// <summary>
        /// Gets fired before the BlkCls property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkClsChanging;
        
        /// <summary>
        /// Gets fired when the BlkCls property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkClsChanged;
        
        /// <summary>
        /// Gets fired before the ChaMotEna property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChaMotEnaChanging;
        
        /// <summary>
        /// Gets fired when the ChaMotEna property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChaMotEnaChanged;
        
        private static ITypedElement RetrieveShOpCapAttribute()
        {
            return ((ITypedElement)(((ModelElement)(YPSH.ClassInstance)).Resolve("ShOpCap")));
        }
        
        /// <summary>
        /// Raises the ShOpCapChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShOpCapChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShOpCapChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShOpCapChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShOpCapChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShOpCapChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxOpCapAttribute()
        {
            return ((ITypedElement)(((ModelElement)(YPSH.ClassInstance)).Resolve("MaxOpCap")));
        }
        
        /// <summary>
        /// Raises the MaxOpCapChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOpCapChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOpCapChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxOpCapChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOpCapChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOpCapChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOpTmhReference()
        {
            return ((ITypedElement)(((ModelElement)(YPSH.ClassInstance)).Resolve("OpTmh")));
        }
        
        /// <summary>
        /// Raises the OpTmhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpTmhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpTmhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpTmhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpTmhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpTmhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpTmh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpTmh(object sender, System.EventArgs eventArgs)
        {
            this.OpTmh = null;
        }
        
        private static ITypedElement RetrievePosReference()
        {
            return ((ITypedElement)(((ModelElement)(YPSH.ClassInstance)).Resolve("Pos")));
        }
        
        /// <summary>
        /// Raises the PosChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PosChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Pos property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPos(object sender, System.EventArgs eventArgs)
        {
            this.Pos = null;
        }
        
        private static ITypedElement RetrieveBlkOpnReference()
        {
            return ((ITypedElement)(((ModelElement)(YPSH.ClassInstance)).Resolve("BlkOpn")));
        }
        
        /// <summary>
        /// Raises the BlkOpnChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkOpnChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkOpnChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkOpnChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkOpnChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkOpnChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkOpn property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkOpn(object sender, System.EventArgs eventArgs)
        {
            this.BlkOpn = null;
        }
        
        private static ITypedElement RetrieveBlkClsReference()
        {
            return ((ITypedElement)(((ModelElement)(YPSH.ClassInstance)).Resolve("BlkCls")));
        }
        
        /// <summary>
        /// Raises the BlkClsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkClsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkClsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkClsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkClsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkClsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkCls property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkCls(object sender, System.EventArgs eventArgs)
        {
            this.BlkCls = null;
        }
        
        private static ITypedElement RetrieveChaMotEnaReference()
        {
            return ((ITypedElement)(((ModelElement)(YPSH.ClassInstance)).Resolve("ChaMotEna")));
        }
        
        /// <summary>
        /// Raises the ChaMotEnaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChaMotEnaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChaMotEnaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChaMotEnaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChaMotEnaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChaMotEnaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChaMotEna property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChaMotEna(object sender, System.EventArgs eventArgs)
        {
            this.ChaMotEna = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SHOPCAP"))
            {
                return this.ShOpCap;
            }
            if ((attribute == "MAXOPCAP"))
            {
                return this.MaxOpCap;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPTMH"))
            {
                this.OpTmh = ((IINS)(value));
                return;
            }
            if ((feature == "POS"))
            {
                this.Pos = ((IDPC)(value));
                return;
            }
            if ((feature == "BLKOPN"))
            {
                this.BlkOpn = ((ISPC)(value));
                return;
            }
            if ((feature == "BLKCLS"))
            {
                this.BlkCls = ((ISPC)(value));
                return;
            }
            if ((feature == "CHAMOTENA"))
            {
                this.ChaMotEna = ((ISPC)(value));
                return;
            }
            if ((feature == "SHOPCAP"))
            {
                this.ShOpCap = ((SwitchingCapabilityKind)(value));
                return;
            }
            if ((feature == "MAXOPCAP"))
            {
                this.MaxOpCap = ((SwitchingCapabilityKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpTmh"))
            {
                return new OpTmhProxy(this);
            }
            if ((attribute == "Pos"))
            {
                return new PosProxy(this);
            }
            if ((attribute == "BlkOpn"))
            {
                return new BlkOpnProxy(this);
            }
            if ((attribute == "BlkCls"))
            {
                return new BlkClsProxy(this);
            }
            if ((attribute == "ChaMotEna"))
            {
                return new ChaMotEnaProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpTmh"))
            {
                return new OpTmhProxy(this);
            }
            if ((reference == "Pos"))
            {
                return new PosProxy(this);
            }
            if ((reference == "BlkOpn"))
            {
                return new BlkOpnProxy(this);
            }
            if ((reference == "BlkCls"))
            {
                return new BlkClsProxy(this);
            }
            if ((reference == "ChaMotEna"))
            {
                return new ChaMotEnaProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupY/YPSH")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the YPSH class
        /// </summary>
        public class YPSHReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private YPSH _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public YPSHReferencedElementsCollection(YPSH parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpTmh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Pos != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkOpn != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkCls != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ChaMotEna != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpTmhChanged += this.PropagateValueChanges;
                this._parent.PosChanged += this.PropagateValueChanges;
                this._parent.BlkOpnChanged += this.PropagateValueChanges;
                this._parent.BlkClsChanged += this.PropagateValueChanges;
                this._parent.ChaMotEnaChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpTmhChanged -= this.PropagateValueChanges;
                this._parent.PosChanged -= this.PropagateValueChanges;
                this._parent.BlkOpnChanged -= this.PropagateValueChanges;
                this._parent.BlkClsChanged -= this.PropagateValueChanges;
                this._parent.ChaMotEnaChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpTmh == null))
                {
                    IINS opTmhCasted = item.As<IINS>();
                    if ((opTmhCasted != null))
                    {
                        this._parent.OpTmh = opTmhCasted;
                        return;
                    }
                }
                if ((this._parent.Pos == null))
                {
                    IDPC posCasted = item.As<IDPC>();
                    if ((posCasted != null))
                    {
                        this._parent.Pos = posCasted;
                        return;
                    }
                }
                if ((this._parent.BlkOpn == null))
                {
                    ISPC blkOpnCasted = item.As<ISPC>();
                    if ((blkOpnCasted != null))
                    {
                        this._parent.BlkOpn = blkOpnCasted;
                        return;
                    }
                }
                if ((this._parent.BlkCls == null))
                {
                    ISPC blkClsCasted = item.As<ISPC>();
                    if ((blkClsCasted != null))
                    {
                        this._parent.BlkCls = blkClsCasted;
                        return;
                    }
                }
                if ((this._parent.ChaMotEna == null))
                {
                    ISPC chaMotEnaCasted = item.As<ISPC>();
                    if ((chaMotEnaCasted != null))
                    {
                        this._parent.ChaMotEna = chaMotEnaCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpTmh = null;
                this._parent.Pos = null;
                this._parent.BlkOpn = null;
                this._parent.BlkCls = null;
                this._parent.ChaMotEna = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpTmh))
                {
                    return true;
                }
                if ((item == this._parent.Pos))
                {
                    return true;
                }
                if ((item == this._parent.BlkOpn))
                {
                    return true;
                }
                if ((item == this._parent.BlkCls))
                {
                    return true;
                }
                if ((item == this._parent.ChaMotEna))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpTmh != null))
                {
                    array[arrayIndex] = this._parent.OpTmh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Pos != null))
                {
                    array[arrayIndex] = this._parent.Pos;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkOpn != null))
                {
                    array[arrayIndex] = this._parent.BlkOpn;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkCls != null))
                {
                    array[arrayIndex] = this._parent.BlkCls;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ChaMotEna != null))
                {
                    array[arrayIndex] = this._parent.ChaMotEna;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpTmh == item))
                {
                    this._parent.OpTmh = null;
                    return true;
                }
                if ((this._parent.Pos == item))
                {
                    this._parent.Pos = null;
                    return true;
                }
                if ((this._parent.BlkOpn == item))
                {
                    this._parent.BlkOpn = null;
                    return true;
                }
                if ((this._parent.BlkCls == item))
                {
                    this._parent.BlkCls = null;
                    return true;
                }
                if ((this._parent.ChaMotEna == item))
                {
                    this._parent.ChaMotEna = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpTmh).Concat(this._parent.Pos).Concat(this._parent.BlkOpn).Concat(this._parent.BlkCls).Concat(this._parent.ChaMotEna).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ShOpCap property
        /// </summary>
        private sealed class ShOpCapProxy : ModelPropertyChange<IYPSH, Nullable<SwitchingCapabilityKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShOpCapProxy(IYPSH modelElement) : 
                    base(modelElement, "ShOpCap")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SwitchingCapabilityKind> Value
            {
                get
                {
                    return this.ModelElement.ShOpCap;
                }
                set
                {
                    this.ModelElement.ShOpCap = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxOpCap property
        /// </summary>
        private sealed class MaxOpCapProxy : ModelPropertyChange<IYPSH, Nullable<SwitchingCapabilityKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxOpCapProxy(IYPSH modelElement) : 
                    base(modelElement, "MaxOpCap")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SwitchingCapabilityKind> Value
            {
                get
                {
                    return this.ModelElement.MaxOpCap;
                }
                set
                {
                    this.ModelElement.MaxOpCap = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpTmh property
        /// </summary>
        private sealed class OpTmhProxy : ModelPropertyChange<IYPSH, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpTmhProxy(IYPSH modelElement) : 
                    base(modelElement, "OpTmh")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.OpTmh;
                }
                set
                {
                    this.ModelElement.OpTmh = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Pos property
        /// </summary>
        private sealed class PosProxy : ModelPropertyChange<IYPSH, IDPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PosProxy(IYPSH modelElement) : 
                    base(modelElement, "Pos")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPC Value
            {
                get
                {
                    return this.ModelElement.Pos;
                }
                set
                {
                    this.ModelElement.Pos = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkOpn property
        /// </summary>
        private sealed class BlkOpnProxy : ModelPropertyChange<IYPSH, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkOpnProxy(IYPSH modelElement) : 
                    base(modelElement, "BlkOpn")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.BlkOpn;
                }
                set
                {
                    this.ModelElement.BlkOpn = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkCls property
        /// </summary>
        private sealed class BlkClsProxy : ModelPropertyChange<IYPSH, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkClsProxy(IYPSH modelElement) : 
                    base(modelElement, "BlkCls")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.BlkCls;
                }
                set
                {
                    this.ModelElement.BlkCls = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChaMotEna property
        /// </summary>
        private sealed class ChaMotEnaProxy : ModelPropertyChange<IYPSH, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChaMotEnaProxy(IYPSH modelElement) : 
                    base(modelElement, "ChaMotEna")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.ChaMotEna;
                }
                set
                {
                    this.ModelElement.ChaMotEna = value;
                }
            }
        }
    }
}

