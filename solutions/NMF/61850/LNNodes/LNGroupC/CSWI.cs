using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupC
{
    
    
    /// <summary>
    /// The default implementation of the CSWI class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pC")]
    [XmlNamespacePrefixAttribute("groupc")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupC/CSWI")]
    public partial class CSWI : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupC.GroupC, ICSWI, IModelElement
    {
        
        private static Lazy<ITypedElement> _locReference = new Lazy<ITypedElement>(RetrieveLocReference);
        
        /// <summary>
        /// The backing field for the Loc property
        /// </summary>
        private ISPS _loc;
        
        private static Lazy<ITypedElement> _opCntRsReference = new Lazy<ITypedElement>(RetrieveOpCntRsReference);
        
        /// <summary>
        /// The backing field for the OpCntRs property
        /// </summary>
        private IINC _opCntRs;
        
        private static Lazy<ITypedElement> _posReference = new Lazy<ITypedElement>(RetrievePosReference);
        
        /// <summary>
        /// The backing field for the Pos property
        /// </summary>
        private IDPC _pos;
        
        private static Lazy<ITypedElement> _posAReference = new Lazy<ITypedElement>(RetrievePosAReference);
        
        /// <summary>
        /// The backing field for the PosA property
        /// </summary>
        private IDPC _posA;
        
        private static Lazy<ITypedElement> _posBReference = new Lazy<ITypedElement>(RetrievePosBReference);
        
        /// <summary>
        /// The backing field for the PosB property
        /// </summary>
        private IDPC _posB;
        
        private static Lazy<ITypedElement> _posCReference = new Lazy<ITypedElement>(RetrievePosCReference);
        
        /// <summary>
        /// The backing field for the PosC property
        /// </summary>
        private IDPC _posC;
        
        private static Lazy<ITypedElement> _opOpnReference = new Lazy<ITypedElement>(RetrieveOpOpnReference);
        
        /// <summary>
        /// The backing field for the OpOpn property
        /// </summary>
        private IACT _opOpn;
        
        private static Lazy<ITypedElement> _opClsReference = new Lazy<ITypedElement>(RetrieveOpClsReference);
        
        /// <summary>
        /// The backing field for the OpCls property
        /// </summary>
        private IACT _opCls;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Loc property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS Loc
        {
            get
            {
                return this._loc;
            }
            set
            {
                if ((this._loc != value))
                {
                    ISPS old = this._loc;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocChanging(e);
                    this.OnPropertyChanging("Loc", e, _locReference);
                    this._loc = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLoc;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLoc;
                    }
                    this.OnLocChanged(e);
                    this.OnPropertyChanged("Loc", e, _locReference);
                }
            }
        }
        
        /// <summary>
        /// The OpCntRs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC OpCntRs
        {
            get
            {
                return this._opCntRs;
            }
            set
            {
                if ((this._opCntRs != value))
                {
                    IINC old = this._opCntRs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpCntRsChanging(e);
                    this.OnPropertyChanging("OpCntRs", e, _opCntRsReference);
                    this._opCntRs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpCntRs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpCntRs;
                    }
                    this.OnOpCntRsChanged(e);
                    this.OnPropertyChanged("OpCntRs", e, _opCntRsReference);
                }
            }
        }
        
        /// <summary>
        /// The Pos property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPC Pos
        {
            get
            {
                return this._pos;
            }
            set
            {
                if ((this._pos != value))
                {
                    IDPC old = this._pos;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPosChanging(e);
                    this.OnPropertyChanging("Pos", e, _posReference);
                    this._pos = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPos;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPos;
                    }
                    this.OnPosChanged(e);
                    this.OnPropertyChanged("Pos", e, _posReference);
                }
            }
        }
        
        /// <summary>
        /// The PosA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPC PosA
        {
            get
            {
                return this._posA;
            }
            set
            {
                if ((this._posA != value))
                {
                    IDPC old = this._posA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPosAChanging(e);
                    this.OnPropertyChanging("PosA", e, _posAReference);
                    this._posA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPosA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPosA;
                    }
                    this.OnPosAChanged(e);
                    this.OnPropertyChanged("PosA", e, _posAReference);
                }
            }
        }
        
        /// <summary>
        /// The PosB property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPC PosB
        {
            get
            {
                return this._posB;
            }
            set
            {
                if ((this._posB != value))
                {
                    IDPC old = this._posB;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPosBChanging(e);
                    this.OnPropertyChanging("PosB", e, _posBReference);
                    this._posB = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPosB;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPosB;
                    }
                    this.OnPosBChanged(e);
                    this.OnPropertyChanged("PosB", e, _posBReference);
                }
            }
        }
        
        /// <summary>
        /// The PosC property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPC PosC
        {
            get
            {
                return this._posC;
            }
            set
            {
                if ((this._posC != value))
                {
                    IDPC old = this._posC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPosCChanging(e);
                    this.OnPropertyChanging("PosC", e, _posCReference);
                    this._posC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPosC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPosC;
                    }
                    this.OnPosCChanged(e);
                    this.OnPropertyChanged("PosC", e, _posCReference);
                }
            }
        }
        
        /// <summary>
        /// The OpOpn property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT OpOpn
        {
            get
            {
                return this._opOpn;
            }
            set
            {
                if ((this._opOpn != value))
                {
                    IACT old = this._opOpn;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpOpnChanging(e);
                    this.OnPropertyChanging("OpOpn", e, _opOpnReference);
                    this._opOpn = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpOpn;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpOpn;
                    }
                    this.OnOpOpnChanged(e);
                    this.OnPropertyChanged("OpOpn", e, _opOpnReference);
                }
            }
        }
        
        /// <summary>
        /// The OpCls property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT OpCls
        {
            get
            {
                return this._opCls;
            }
            set
            {
                if ((this._opCls != value))
                {
                    IACT old = this._opCls;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpClsChanging(e);
                    this.OnPropertyChanging("OpCls", e, _opClsReference);
                    this._opCls = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpCls;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpCls;
                    }
                    this.OnOpClsChanged(e);
                    this.OnPropertyChanged("OpCls", e, _opClsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CSWIReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupC/CSWI")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Loc property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocChanging;
        
        /// <summary>
        /// Gets fired when the Loc property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocChanged;
        
        /// <summary>
        /// Gets fired before the OpCntRs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanging;
        
        /// <summary>
        /// Gets fired when the OpCntRs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanged;
        
        /// <summary>
        /// Gets fired before the Pos property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosChanging;
        
        /// <summary>
        /// Gets fired when the Pos property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosChanged;
        
        /// <summary>
        /// Gets fired before the PosA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosAChanging;
        
        /// <summary>
        /// Gets fired when the PosA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosAChanged;
        
        /// <summary>
        /// Gets fired before the PosB property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosBChanging;
        
        /// <summary>
        /// Gets fired when the PosB property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosBChanged;
        
        /// <summary>
        /// Gets fired before the PosC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosCChanging;
        
        /// <summary>
        /// Gets fired when the PosC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosCChanged;
        
        /// <summary>
        /// Gets fired before the OpOpn property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpOpnChanging;
        
        /// <summary>
        /// Gets fired when the OpOpn property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpOpnChanged;
        
        /// <summary>
        /// Gets fired before the OpCls property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpClsChanging;
        
        /// <summary>
        /// Gets fired when the OpCls property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpClsChanged;
        
        private static ITypedElement RetrieveLocReference()
        {
            return ((ITypedElement)(((ModelElement)(CSWI.ClassInstance)).Resolve("Loc")));
        }
        
        /// <summary>
        /// Raises the LocChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Loc property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoc(object sender, System.EventArgs eventArgs)
        {
            this.Loc = null;
        }
        
        private static ITypedElement RetrieveOpCntRsReference()
        {
            return ((ITypedElement)(((ModelElement)(CSWI.ClassInstance)).Resolve("OpCntRs")));
        }
        
        /// <summary>
        /// Raises the OpCntRsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpCntRsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpCntRs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpCntRs(object sender, System.EventArgs eventArgs)
        {
            this.OpCntRs = null;
        }
        
        private static ITypedElement RetrievePosReference()
        {
            return ((ITypedElement)(((ModelElement)(CSWI.ClassInstance)).Resolve("Pos")));
        }
        
        /// <summary>
        /// Raises the PosChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PosChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Pos property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPos(object sender, System.EventArgs eventArgs)
        {
            this.Pos = null;
        }
        
        private static ITypedElement RetrievePosAReference()
        {
            return ((ITypedElement)(((ModelElement)(CSWI.ClassInstance)).Resolve("PosA")));
        }
        
        /// <summary>
        /// Raises the PosAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PosAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PosA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPosA(object sender, System.EventArgs eventArgs)
        {
            this.PosA = null;
        }
        
        private static ITypedElement RetrievePosBReference()
        {
            return ((ITypedElement)(((ModelElement)(CSWI.ClassInstance)).Resolve("PosB")));
        }
        
        /// <summary>
        /// Raises the PosBChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosBChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PosBChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosBChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PosB property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPosB(object sender, System.EventArgs eventArgs)
        {
            this.PosB = null;
        }
        
        private static ITypedElement RetrievePosCReference()
        {
            return ((ITypedElement)(((ModelElement)(CSWI.ClassInstance)).Resolve("PosC")));
        }
        
        /// <summary>
        /// Raises the PosCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PosCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PosC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPosC(object sender, System.EventArgs eventArgs)
        {
            this.PosC = null;
        }
        
        private static ITypedElement RetrieveOpOpnReference()
        {
            return ((ITypedElement)(((ModelElement)(CSWI.ClassInstance)).Resolve("OpOpn")));
        }
        
        /// <summary>
        /// Raises the OpOpnChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpOpnChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpOpnChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpOpnChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpOpnChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpOpnChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpOpn property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpOpn(object sender, System.EventArgs eventArgs)
        {
            this.OpOpn = null;
        }
        
        private static ITypedElement RetrieveOpClsReference()
        {
            return ((ITypedElement)(((ModelElement)(CSWI.ClassInstance)).Resolve("OpCls")));
        }
        
        /// <summary>
        /// Raises the OpClsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpClsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpClsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpClsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpClsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpClsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpCls property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpCls(object sender, System.EventArgs eventArgs)
        {
            this.OpCls = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOC"))
            {
                this.Loc = ((ISPS)(value));
                return;
            }
            if ((feature == "OPCNTRS"))
            {
                this.OpCntRs = ((IINC)(value));
                return;
            }
            if ((feature == "POS"))
            {
                this.Pos = ((IDPC)(value));
                return;
            }
            if ((feature == "POSA"))
            {
                this.PosA = ((IDPC)(value));
                return;
            }
            if ((feature == "POSB"))
            {
                this.PosB = ((IDPC)(value));
                return;
            }
            if ((feature == "POSC"))
            {
                this.PosC = ((IDPC)(value));
                return;
            }
            if ((feature == "OPOPN"))
            {
                this.OpOpn = ((IACT)(value));
                return;
            }
            if ((feature == "OPCLS"))
            {
                this.OpCls = ((IACT)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Loc"))
            {
                return new LocProxy(this);
            }
            if ((attribute == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((attribute == "Pos"))
            {
                return new PosProxy(this);
            }
            if ((attribute == "PosA"))
            {
                return new PosAProxy(this);
            }
            if ((attribute == "PosB"))
            {
                return new PosBProxy(this);
            }
            if ((attribute == "PosC"))
            {
                return new PosCProxy(this);
            }
            if ((attribute == "OpOpn"))
            {
                return new OpOpnProxy(this);
            }
            if ((attribute == "OpCls"))
            {
                return new OpClsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Loc"))
            {
                return new LocProxy(this);
            }
            if ((reference == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((reference == "Pos"))
            {
                return new PosProxy(this);
            }
            if ((reference == "PosA"))
            {
                return new PosAProxy(this);
            }
            if ((reference == "PosB"))
            {
                return new PosBProxy(this);
            }
            if ((reference == "PosC"))
            {
                return new PosCProxy(this);
            }
            if ((reference == "OpOpn"))
            {
                return new OpOpnProxy(this);
            }
            if ((reference == "OpCls"))
            {
                return new OpClsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupC/CSWI")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CSWI class
        /// </summary>
        public class CSWIReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CSWI _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CSWIReferencedElementsCollection(CSWI parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Loc != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpCntRs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Pos != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PosA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PosB != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PosC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpOpn != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpCls != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LocChanged += this.PropagateValueChanges;
                this._parent.OpCntRsChanged += this.PropagateValueChanges;
                this._parent.PosChanged += this.PropagateValueChanges;
                this._parent.PosAChanged += this.PropagateValueChanges;
                this._parent.PosBChanged += this.PropagateValueChanges;
                this._parent.PosCChanged += this.PropagateValueChanges;
                this._parent.OpOpnChanged += this.PropagateValueChanges;
                this._parent.OpClsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LocChanged -= this.PropagateValueChanges;
                this._parent.OpCntRsChanged -= this.PropagateValueChanges;
                this._parent.PosChanged -= this.PropagateValueChanges;
                this._parent.PosAChanged -= this.PropagateValueChanges;
                this._parent.PosBChanged -= this.PropagateValueChanges;
                this._parent.PosCChanged -= this.PropagateValueChanges;
                this._parent.OpOpnChanged -= this.PropagateValueChanges;
                this._parent.OpClsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Loc == null))
                {
                    ISPS locCasted = item.As<ISPS>();
                    if ((locCasted != null))
                    {
                        this._parent.Loc = locCasted;
                        return;
                    }
                }
                if ((this._parent.OpCntRs == null))
                {
                    IINC opCntRsCasted = item.As<IINC>();
                    if ((opCntRsCasted != null))
                    {
                        this._parent.OpCntRs = opCntRsCasted;
                        return;
                    }
                }
                if ((this._parent.Pos == null))
                {
                    IDPC posCasted = item.As<IDPC>();
                    if ((posCasted != null))
                    {
                        this._parent.Pos = posCasted;
                        return;
                    }
                }
                if ((this._parent.PosA == null))
                {
                    IDPC posACasted = item.As<IDPC>();
                    if ((posACasted != null))
                    {
                        this._parent.PosA = posACasted;
                        return;
                    }
                }
                if ((this._parent.PosB == null))
                {
                    IDPC posBCasted = item.As<IDPC>();
                    if ((posBCasted != null))
                    {
                        this._parent.PosB = posBCasted;
                        return;
                    }
                }
                if ((this._parent.PosC == null))
                {
                    IDPC posCCasted = item.As<IDPC>();
                    if ((posCCasted != null))
                    {
                        this._parent.PosC = posCCasted;
                        return;
                    }
                }
                if ((this._parent.OpOpn == null))
                {
                    IACT opOpnCasted = item.As<IACT>();
                    if ((opOpnCasted != null))
                    {
                        this._parent.OpOpn = opOpnCasted;
                        return;
                    }
                }
                if ((this._parent.OpCls == null))
                {
                    IACT opClsCasted = item.As<IACT>();
                    if ((opClsCasted != null))
                    {
                        this._parent.OpCls = opClsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Loc = null;
                this._parent.OpCntRs = null;
                this._parent.Pos = null;
                this._parent.PosA = null;
                this._parent.PosB = null;
                this._parent.PosC = null;
                this._parent.OpOpn = null;
                this._parent.OpCls = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Loc))
                {
                    return true;
                }
                if ((item == this._parent.OpCntRs))
                {
                    return true;
                }
                if ((item == this._parent.Pos))
                {
                    return true;
                }
                if ((item == this._parent.PosA))
                {
                    return true;
                }
                if ((item == this._parent.PosB))
                {
                    return true;
                }
                if ((item == this._parent.PosC))
                {
                    return true;
                }
                if ((item == this._parent.OpOpn))
                {
                    return true;
                }
                if ((item == this._parent.OpCls))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Loc != null))
                {
                    array[arrayIndex] = this._parent.Loc;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpCntRs != null))
                {
                    array[arrayIndex] = this._parent.OpCntRs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Pos != null))
                {
                    array[arrayIndex] = this._parent.Pos;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PosA != null))
                {
                    array[arrayIndex] = this._parent.PosA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PosB != null))
                {
                    array[arrayIndex] = this._parent.PosB;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PosC != null))
                {
                    array[arrayIndex] = this._parent.PosC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpOpn != null))
                {
                    array[arrayIndex] = this._parent.OpOpn;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpCls != null))
                {
                    array[arrayIndex] = this._parent.OpCls;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Loc == item))
                {
                    this._parent.Loc = null;
                    return true;
                }
                if ((this._parent.OpCntRs == item))
                {
                    this._parent.OpCntRs = null;
                    return true;
                }
                if ((this._parent.Pos == item))
                {
                    this._parent.Pos = null;
                    return true;
                }
                if ((this._parent.PosA == item))
                {
                    this._parent.PosA = null;
                    return true;
                }
                if ((this._parent.PosB == item))
                {
                    this._parent.PosB = null;
                    return true;
                }
                if ((this._parent.PosC == item))
                {
                    this._parent.PosC = null;
                    return true;
                }
                if ((this._parent.OpOpn == item))
                {
                    this._parent.OpOpn = null;
                    return true;
                }
                if ((this._parent.OpCls == item))
                {
                    this._parent.OpCls = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Loc).Concat(this._parent.OpCntRs).Concat(this._parent.Pos).Concat(this._parent.PosA).Concat(this._parent.PosB).Concat(this._parent.PosC).Concat(this._parent.OpOpn).Concat(this._parent.OpCls).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Loc property
        /// </summary>
        private sealed class LocProxy : ModelPropertyChange<ICSWI, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocProxy(ICSWI modelElement) : 
                    base(modelElement, "Loc")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.Loc;
                }
                set
                {
                    this.ModelElement.Loc = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpCntRs property
        /// </summary>
        private sealed class OpCntRsProxy : ModelPropertyChange<ICSWI, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpCntRsProxy(ICSWI modelElement) : 
                    base(modelElement, "OpCntRs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.OpCntRs;
                }
                set
                {
                    this.ModelElement.OpCntRs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Pos property
        /// </summary>
        private sealed class PosProxy : ModelPropertyChange<ICSWI, IDPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PosProxy(ICSWI modelElement) : 
                    base(modelElement, "Pos")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPC Value
            {
                get
                {
                    return this.ModelElement.Pos;
                }
                set
                {
                    this.ModelElement.Pos = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PosA property
        /// </summary>
        private sealed class PosAProxy : ModelPropertyChange<ICSWI, IDPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PosAProxy(ICSWI modelElement) : 
                    base(modelElement, "PosA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPC Value
            {
                get
                {
                    return this.ModelElement.PosA;
                }
                set
                {
                    this.ModelElement.PosA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PosB property
        /// </summary>
        private sealed class PosBProxy : ModelPropertyChange<ICSWI, IDPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PosBProxy(ICSWI modelElement) : 
                    base(modelElement, "PosB")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPC Value
            {
                get
                {
                    return this.ModelElement.PosB;
                }
                set
                {
                    this.ModelElement.PosB = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PosC property
        /// </summary>
        private sealed class PosCProxy : ModelPropertyChange<ICSWI, IDPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PosCProxy(ICSWI modelElement) : 
                    base(modelElement, "PosC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPC Value
            {
                get
                {
                    return this.ModelElement.PosC;
                }
                set
                {
                    this.ModelElement.PosC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpOpn property
        /// </summary>
        private sealed class OpOpnProxy : ModelPropertyChange<ICSWI, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpOpnProxy(ICSWI modelElement) : 
                    base(modelElement, "OpOpn")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.OpOpn;
                }
                set
                {
                    this.ModelElement.OpOpn = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpCls property
        /// </summary>
        private sealed class OpClsProxy : ModelPropertyChange<ICSWI, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpClsProxy(ICSWI modelElement) : 
                    base(modelElement, "OpCls")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.OpCls;
                }
                set
                {
                    this.ModelElement.OpCls = value;
                }
            }
        }
    }
}

