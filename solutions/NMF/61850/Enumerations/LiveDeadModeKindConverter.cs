using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.SmartGrids.SubstationStandard.Enumerations
{
    
    
    public class LiveDeadModeKindConverter : System.ComponentModel.TypeConverter
    {
        
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
        {
            return (sourceType == typeof(string));
        }
        
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
        {
            return (destinationType == typeof(string));
        }
        
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
        {
            if ((value == null))
            {
                return default(LiveDeadModeKind);
            }
            string valueString = value.ToString();
            if ((valueString == "lineLive"))
            {
                return LiveDeadModeKind.LineLive;
            }
            if ((valueString == "bothDead"))
            {
                return LiveDeadModeKind.BothDead;
            }
            if ((valueString == "busLive"))
            {
                return LiveDeadModeKind.BusLive;
            }
            if ((valueString == "bothDeadOrLineLive"))
            {
                return LiveDeadModeKind.BothDeadOrLineLive;
            }
            if ((valueString == "bothDeadOrBusLive"))
            {
                return LiveDeadModeKind.BothDeadOrBusLive;
            }
            if ((valueString == "lineLiveBusDeadOrBusLiveLineDead"))
            {
                return LiveDeadModeKind.LineLiveBusDeadOrBusLiveLineDead;
            }
            if ((valueString == "bothDeadOrOnlyOneLive"))
            {
                return LiveDeadModeKind.BothDeadOrOnlyOneLive;
            }
            return default(LiveDeadModeKind);
        }
        
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)
        {
            if ((value == null))
            {
                return null;
            }
            LiveDeadModeKind valueCasted = ((LiveDeadModeKind)(value));
            if ((valueCasted == LiveDeadModeKind.LineLive))
            {
                return "lineLive";
            }
            if ((valueCasted == LiveDeadModeKind.BothDead))
            {
                return "bothDead";
            }
            if ((valueCasted == LiveDeadModeKind.BusLive))
            {
                return "busLive";
            }
            if ((valueCasted == LiveDeadModeKind.BothDeadOrLineLive))
            {
                return "bothDeadOrLineLive";
            }
            if ((valueCasted == LiveDeadModeKind.BothDeadOrBusLive))
            {
                return "bothDeadOrBusLive";
            }
            if ((valueCasted == LiveDeadModeKind.LineLiveBusDeadOrBusLiveLineDead))
            {
                return "lineLiveBusDeadOrBusLiveLineDead";
            }
            if ((valueCasted == LiveDeadModeKind.BothDeadOrOnlyOneLive))
            {
                return "bothDeadOrOnlyOneLive";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
}

