using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the ControllableAnalogueInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/ControllableAnalogueInfo")]
    public partial class ControllableAnalogueInfo : ModelElement, IControllableAnalogueInfo, IModelElement
    {
        
        private static Lazy<ITypedElement> _aPCReference = new Lazy<ITypedElement>(RetrieveAPCReference);
        
        /// <summary>
        /// The backing field for the APC property
        /// </summary>
        private ObservableAssociationOrderedSet<IAPC> _aPC;
        
        private static Lazy<ITypedElement> _c_PrimitiveCDCReference = new Lazy<ITypedElement>(RetrieveC_PrimitiveCDCReference);
        
        /// <summary>
        /// The backing field for the C_PrimitiveCDC property
        /// </summary>
        private ObservableAssociationOrderedSet<IC_PrimitiveCDC> _c_PrimitiveCDC;
        
        private static IClass _classInstance;
        
        public ControllableAnalogueInfo()
        {
            this._aPC = new ObservableAssociationOrderedSet<IAPC>();
            this._aPC.CollectionChanging += this.APCCollectionChanging;
            this._aPC.CollectionChanged += this.APCCollectionChanged;
            this._c_PrimitiveCDC = new ObservableAssociationOrderedSet<IC_PrimitiveCDC>();
            this._c_PrimitiveCDC.CollectionChanging += this.C_PrimitiveCDCCollectionChanging;
            this._c_PrimitiveCDC.CollectionChanged += this.C_PrimitiveCDCCollectionChanged;
        }
        
        /// <summary>
        /// The APC property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAPC> APC
        {
            get
            {
                return this._aPC;
            }
        }
        
        /// <summary>
        /// The C_PrimitiveCDC property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IC_PrimitiveCDC> C_PrimitiveCDC
        {
            get
            {
                return this._c_PrimitiveCDC;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ControllableAnalogueInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/ControllableAnalogueInfo")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveAPCReference()
        {
            return ((ITypedElement)(((ModelElement)(ControllableAnalogueInfo.ClassInstance)).Resolve("APC")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the APC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void APCCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("APC", e, _aPCReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the APC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void APCCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("APC", e, _aPCReference);
        }
        
        private static ITypedElement RetrieveC_PrimitiveCDCReference()
        {
            return ((ITypedElement)(((ModelElement)(ControllableAnalogueInfo.ClassInstance)).Resolve("C_PrimitiveCDC")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the C_PrimitiveCDC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void C_PrimitiveCDCCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("C_PrimitiveCDC", e, _c_PrimitiveCDCReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the C_PrimitiveCDC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void C_PrimitiveCDCCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("C_PrimitiveCDC", e, _c_PrimitiveCDCReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "APC"))
            {
                return this._aPC;
            }
            if ((feature == "C_PRIMITIVECDC"))
            {
                return this._c_PrimitiveCDC;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/ControllableAnalogueInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ControllableAnalogueInfo class
        /// </summary>
        public class ControllableAnalogueInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ControllableAnalogueInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ControllableAnalogueInfoReferencedElementsCollection(ControllableAnalogueInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.APC.Count);
                    count = (count + this._parent.C_PrimitiveCDC.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.APC.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.C_PrimitiveCDC.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.APC.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.C_PrimitiveCDC.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAPC aPCCasted = item.As<IAPC>();
                if ((aPCCasted != null))
                {
                    this._parent.APC.Add(aPCCasted);
                }
                IC_PrimitiveCDC c_PrimitiveCDCCasted = item.As<IC_PrimitiveCDC>();
                if ((c_PrimitiveCDCCasted != null))
                {
                    this._parent.C_PrimitiveCDC.Add(c_PrimitiveCDCCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.APC.Clear();
                this._parent.C_PrimitiveCDC.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.APC.Contains(item))
                {
                    return true;
                }
                if (this._parent.C_PrimitiveCDC.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> aPCEnumerator = this._parent.APC.GetEnumerator();
                try
                {
                    for (
                    ; aPCEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = aPCEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    aPCEnumerator.Dispose();
                }
                IEnumerator<IModelElement> c_PrimitiveCDCEnumerator = this._parent.C_PrimitiveCDC.GetEnumerator();
                try
                {
                    for (
                    ; c_PrimitiveCDCEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = c_PrimitiveCDCEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    c_PrimitiveCDCEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAPC aPCItem = item.As<IAPC>();
                if (((aPCItem != null) 
                            && this._parent.APC.Remove(aPCItem)))
                {
                    return true;
                }
                IC_PrimitiveCDC c_PrimitiveCDCItem = item.As<IC_PrimitiveCDC>();
                if (((c_PrimitiveCDCItem != null) 
                            && this._parent.C_PrimitiveCDC.Remove(c_PrimitiveCDCItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.APC).Concat(this._parent.C_PrimitiveCDC).GetEnumerator();
            }
        }
    }
}

