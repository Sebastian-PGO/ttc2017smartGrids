using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the SEC class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/SEC")]
    public partial class SEC : ModelElement, ISEC, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Cnt property
        /// </summary>
        private Nullable<int> _cnt;
        
        private static Lazy<ITypedElement> _cntAttribute = new Lazy<ITypedElement>(RetrieveCntAttribute);
        
        /// <summary>
        /// The backing field for the Addr property
        /// </summary>
        private string _addr;
        
        private static Lazy<ITypedElement> _addrAttribute = new Lazy<ITypedElement>(RetrieveAddrAttribute);
        
        /// <summary>
        /// The backing field for the AddInfo property
        /// </summary>
        private string _addInfo;
        
        private static Lazy<ITypedElement> _addInfoAttribute = new Lazy<ITypedElement>(RetrieveAddInfoAttribute);
        
        private static Lazy<ITypedElement> _sevReference = new Lazy<ITypedElement>(RetrieveSevReference);
        
        /// <summary>
        /// The backing field for the Sev property
        /// </summary>
        private ISeverity _sev;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The cnt property
        /// </summary>
        [XmlElementNameAttribute("cnt")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Cnt
        {
            get
            {
                return this._cnt;
            }
            set
            {
                if ((this._cnt != value))
                {
                    Nullable<int> old = this._cnt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCntChanging(e);
                    this.OnPropertyChanging("Cnt", e, _cntAttribute);
                    this._cnt = value;
                    this.OnCntChanged(e);
                    this.OnPropertyChanged("Cnt", e, _cntAttribute);
                }
            }
        }
        
        /// <summary>
        /// The addr property
        /// </summary>
        [XmlElementNameAttribute("addr")]
        [XmlAttributeAttribute(true)]
        public virtual string Addr
        {
            get
            {
                return this._addr;
            }
            set
            {
                if ((this._addr != value))
                {
                    string old = this._addr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAddrChanging(e);
                    this.OnPropertyChanging("Addr", e, _addrAttribute);
                    this._addr = value;
                    this.OnAddrChanged(e);
                    this.OnPropertyChanged("Addr", e, _addrAttribute);
                }
            }
        }
        
        /// <summary>
        /// The addInfo property
        /// </summary>
        [XmlElementNameAttribute("addInfo")]
        [XmlAttributeAttribute(true)]
        public virtual string AddInfo
        {
            get
            {
                return this._addInfo;
            }
            set
            {
                if ((this._addInfo != value))
                {
                    string old = this._addInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAddInfoChanging(e);
                    this.OnPropertyChanging("AddInfo", e, _addInfoAttribute);
                    this._addInfo = value;
                    this.OnAddInfoChanged(e);
                    this.OnPropertyChanged("AddInfo", e, _addInfoAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sev property
        /// </summary>
        [XmlElementNameAttribute("sev")]
        [XmlAttributeAttribute(true)]
        public virtual ISeverity Sev
        {
            get
            {
                return this._sev;
            }
            set
            {
                if ((this._sev != value))
                {
                    ISeverity old = this._sev;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSevChanging(e);
                    this.OnPropertyChanging("Sev", e, _sevReference);
                    this._sev = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSev;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSev;
                    }
                    this.OnSevChanged(e);
                    this.OnPropertyChanged("Sev", e, _sevReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SECReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/SEC")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Cnt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CntChanging;
        
        /// <summary>
        /// Gets fired when the Cnt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CntChanged;
        
        /// <summary>
        /// Gets fired before the Addr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AddrChanging;
        
        /// <summary>
        /// Gets fired when the Addr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AddrChanged;
        
        /// <summary>
        /// Gets fired before the AddInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AddInfoChanging;
        
        /// <summary>
        /// Gets fired when the AddInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AddInfoChanged;
        
        /// <summary>
        /// Gets fired before the Sev property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SevChanging;
        
        /// <summary>
        /// Gets fired when the Sev property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SevChanged;
        
        private static ITypedElement RetrieveCntAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SEC.ClassInstance)).Resolve("cnt")));
        }
        
        /// <summary>
        /// Raises the CntChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCntChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CntChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CntChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCntChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CntChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAddrAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SEC.ClassInstance)).Resolve("addr")));
        }
        
        /// <summary>
        /// Raises the AddrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AddrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AddrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AddrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAddInfoAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SEC.ClassInstance)).Resolve("addInfo")));
        }
        
        /// <summary>
        /// Raises the AddInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AddInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AddInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AddInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSevReference()
        {
            return ((ITypedElement)(((ModelElement)(SEC.ClassInstance)).Resolve("sev")));
        }
        
        /// <summary>
        /// Raises the SevChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSevChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SevChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SevChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSevChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SevChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Sev property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSev(object sender, System.EventArgs eventArgs)
        {
            this.Sev = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CNT"))
            {
                return this.Cnt;
            }
            if ((attribute == "ADDR"))
            {
                return this.Addr;
            }
            if ((attribute == "ADDINFO"))
            {
                return this.AddInfo;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SEV"))
            {
                this.Sev = ((ISeverity)(value));
                return;
            }
            if ((feature == "CNT"))
            {
                this.Cnt = ((int)(value));
                return;
            }
            if ((feature == "ADDR"))
            {
                this.Addr = ((string)(value));
                return;
            }
            if ((feature == "ADDINFO"))
            {
                this.AddInfo = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Sev"))
            {
                return new SevProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Sev"))
            {
                return new SevProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/SEC")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SEC class
        /// </summary>
        public class SECReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SEC _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SECReferencedElementsCollection(SEC parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Sev != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SevChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SevChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Sev == null))
                {
                    ISeverity sevCasted = item.As<ISeverity>();
                    if ((sevCasted != null))
                    {
                        this._parent.Sev = sevCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Sev = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Sev))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Sev != null))
                {
                    array[arrayIndex] = this._parent.Sev;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Sev == item))
                {
                    this._parent.Sev = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Sev).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cnt property
        /// </summary>
        private sealed class CntProxy : ModelPropertyChange<ISEC, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CntProxy(ISEC modelElement) : 
                    base(modelElement, "cnt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Cnt;
                }
                set
                {
                    this.ModelElement.Cnt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the addr property
        /// </summary>
        private sealed class AddrProxy : ModelPropertyChange<ISEC, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AddrProxy(ISEC modelElement) : 
                    base(modelElement, "addr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Addr;
                }
                set
                {
                    this.ModelElement.Addr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the addInfo property
        /// </summary>
        private sealed class AddInfoProxy : ModelPropertyChange<ISEC, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AddInfoProxy(ISEC modelElement) : 
                    base(modelElement, "addInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AddInfo;
                }
                set
                {
                    this.ModelElement.AddInfo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sev property
        /// </summary>
        private sealed class SevProxy : ModelPropertyChange<ISEC, ISeverity>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SevProxy(ISEC modelElement) : 
                    base(modelElement, "sev")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISeverity Value
            {
                get
                {
                    return this.ModelElement.Sev;
                }
                set
                {
                    this.ModelElement.Sev = value;
                }
            }
        }
    }
}

