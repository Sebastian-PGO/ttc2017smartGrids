using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the BSC class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/BSC")]
    public partial class BSC : ModelElement, IBSC, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Persistent property
        /// </summary>
        private Nullable<bool> _persistent;
        
        private static Lazy<ITypedElement> _persistentAttribute = new Lazy<ITypedElement>(RetrievePersistentAttribute);
        
        /// <summary>
        /// The backing field for the MinVal property
        /// </summary>
        private Nullable<int> _minVal;
        
        private static Lazy<ITypedElement> _minValAttribute = new Lazy<ITypedElement>(RetrieveMinValAttribute);
        
        /// <summary>
        /// The backing field for the MaxVal property
        /// </summary>
        private Nullable<int> _maxVal;
        
        private static Lazy<ITypedElement> _maxValAttribute = new Lazy<ITypedElement>(RetrieveMaxValAttribute);
        
        /// <summary>
        /// The backing field for the StepSize property
        /// </summary>
        private Nullable<int> _stepSize;
        
        private static Lazy<ITypedElement> _stepSizeAttribute = new Lazy<ITypedElement>(RetrieveStepSizeAttribute);
        
        private static Lazy<ITypedElement> _ctlValReference = new Lazy<ITypedElement>(RetrieveCtlValReference);
        
        /// <summary>
        /// The backing field for the CtlVal property
        /// </summary>
        private IBSControl _ctlVal;
        
        private static Lazy<ITypedElement> _valWTrReference = new Lazy<ITypedElement>(RetrieveValWTrReference);
        
        /// <summary>
        /// The backing field for the ValWTr property
        /// </summary>
        private IValWithTrans _valWTr;
        
        private static Lazy<ITypedElement> _qReference = new Lazy<ITypedElement>(RetrieveQReference);
        
        /// <summary>
        /// The backing field for the Q property
        /// </summary>
        private IQuality _q;
        
        private static Lazy<ITypedElement> _tReference = new Lazy<ITypedElement>(RetrieveTReference);
        
        /// <summary>
        /// The backing field for the T property
        /// </summary>
        private ITimeStamp _t;
        
        private static Lazy<ITypedElement> _subValReference = new Lazy<ITypedElement>(RetrieveSubValReference);
        
        /// <summary>
        /// The backing field for the SubVal property
        /// </summary>
        private IValWithTrans _subVal;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The persistent property
        /// </summary>
        [XmlElementNameAttribute("persistent")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Persistent
        {
            get
            {
                return this._persistent;
            }
            set
            {
                if ((this._persistent != value))
                {
                    Nullable<bool> old = this._persistent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPersistentChanging(e);
                    this.OnPropertyChanging("Persistent", e, _persistentAttribute);
                    this._persistent = value;
                    this.OnPersistentChanged(e);
                    this.OnPropertyChanged("Persistent", e, _persistentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minVal property
        /// </summary>
        [XmlElementNameAttribute("minVal")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> MinVal
        {
            get
            {
                return this._minVal;
            }
            set
            {
                if ((this._minVal != value))
                {
                    Nullable<int> old = this._minVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinValChanging(e);
                    this.OnPropertyChanging("MinVal", e, _minValAttribute);
                    this._minVal = value;
                    this.OnMinValChanged(e);
                    this.OnPropertyChanged("MinVal", e, _minValAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxVal property
        /// </summary>
        [XmlElementNameAttribute("maxVal")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> MaxVal
        {
            get
            {
                return this._maxVal;
            }
            set
            {
                if ((this._maxVal != value))
                {
                    Nullable<int> old = this._maxVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxValChanging(e);
                    this.OnPropertyChanging("MaxVal", e, _maxValAttribute);
                    this._maxVal = value;
                    this.OnMaxValChanged(e);
                    this.OnPropertyChanged("MaxVal", e, _maxValAttribute);
                }
            }
        }
        
        /// <summary>
        /// The stepSize property
        /// </summary>
        [XmlElementNameAttribute("stepSize")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> StepSize
        {
            get
            {
                return this._stepSize;
            }
            set
            {
                if ((this._stepSize != value))
                {
                    Nullable<int> old = this._stepSize;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStepSizeChanging(e);
                    this.OnPropertyChanging("StepSize", e, _stepSizeAttribute);
                    this._stepSize = value;
                    this.OnStepSizeChanged(e);
                    this.OnPropertyChanged("StepSize", e, _stepSizeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ctlVal property
        /// </summary>
        [XmlElementNameAttribute("ctlVal")]
        [XmlAttributeAttribute(true)]
        public virtual IBSControl CtlVal
        {
            get
            {
                return this._ctlVal;
            }
            set
            {
                if ((this._ctlVal != value))
                {
                    IBSControl old = this._ctlVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCtlValChanging(e);
                    this.OnPropertyChanging("CtlVal", e, _ctlValReference);
                    this._ctlVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCtlVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCtlVal;
                    }
                    this.OnCtlValChanged(e);
                    this.OnPropertyChanged("CtlVal", e, _ctlValReference);
                }
            }
        }
        
        /// <summary>
        /// The valWTr property
        /// </summary>
        [XmlElementNameAttribute("valWTr")]
        [XmlAttributeAttribute(true)]
        public virtual IValWithTrans ValWTr
        {
            get
            {
                return this._valWTr;
            }
            set
            {
                if ((this._valWTr != value))
                {
                    IValWithTrans old = this._valWTr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValWTrChanging(e);
                    this.OnPropertyChanging("ValWTr", e, _valWTrReference);
                    this._valWTr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetValWTr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetValWTr;
                    }
                    this.OnValWTrChanged(e);
                    this.OnPropertyChanged("ValWTr", e, _valWTrReference);
                }
            }
        }
        
        /// <summary>
        /// The q property
        /// </summary>
        [XmlElementNameAttribute("q")]
        [XmlAttributeAttribute(true)]
        public virtual IQuality Q
        {
            get
            {
                return this._q;
            }
            set
            {
                if ((this._q != value))
                {
                    IQuality old = this._q;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQChanging(e);
                    this.OnPropertyChanging("Q", e, _qReference);
                    this._q = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetQ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetQ;
                    }
                    this.OnQChanged(e);
                    this.OnPropertyChanged("Q", e, _qReference);
                }
            }
        }
        
        /// <summary>
        /// The t property
        /// </summary>
        [XmlElementNameAttribute("t")]
        [XmlAttributeAttribute(true)]
        public virtual ITimeStamp T
        {
            get
            {
                return this._t;
            }
            set
            {
                if ((this._t != value))
                {
                    ITimeStamp old = this._t;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTChanging(e);
                    this.OnPropertyChanging("T", e, _tReference);
                    this._t = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetT;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetT;
                    }
                    this.OnTChanged(e);
                    this.OnPropertyChanged("T", e, _tReference);
                }
            }
        }
        
        /// <summary>
        /// The subVal property
        /// </summary>
        [XmlElementNameAttribute("subVal")]
        [XmlAttributeAttribute(true)]
        public virtual IValWithTrans SubVal
        {
            get
            {
                return this._subVal;
            }
            set
            {
                if ((this._subVal != value))
                {
                    IValWithTrans old = this._subVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubValChanging(e);
                    this.OnPropertyChanging("SubVal", e, _subValReference);
                    this._subVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSubVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSubVal;
                    }
                    this.OnSubValChanged(e);
                    this.OnPropertyChanged("SubVal", e, _subValReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BSCReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/BSC")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Persistent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PersistentChanging;
        
        /// <summary>
        /// Gets fired when the Persistent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PersistentChanged;
        
        /// <summary>
        /// Gets fired before the MinVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValChanging;
        
        /// <summary>
        /// Gets fired when the MinVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValChanged;
        
        /// <summary>
        /// Gets fired before the MaxVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValChanging;
        
        /// <summary>
        /// Gets fired when the MaxVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValChanged;
        
        /// <summary>
        /// Gets fired before the StepSize property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepSizeChanging;
        
        /// <summary>
        /// Gets fired when the StepSize property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepSizeChanged;
        
        /// <summary>
        /// Gets fired before the CtlVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlValChanging;
        
        /// <summary>
        /// Gets fired when the CtlVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlValChanged;
        
        /// <summary>
        /// Gets fired before the ValWTr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValWTrChanging;
        
        /// <summary>
        /// Gets fired when the ValWTr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValWTrChanged;
        
        /// <summary>
        /// Gets fired before the Q property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanging;
        
        /// <summary>
        /// Gets fired when the Q property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanged;
        
        /// <summary>
        /// Gets fired before the T property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TChanging;
        
        /// <summary>
        /// Gets fired when the T property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TChanged;
        
        /// <summary>
        /// Gets fired before the SubVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubValChanging;
        
        /// <summary>
        /// Gets fired when the SubVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubValChanged;
        
        private static ITypedElement RetrievePersistentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BSC.ClassInstance)).Resolve("persistent")));
        }
        
        /// <summary>
        /// Raises the PersistentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPersistentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PersistentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PersistentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPersistentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PersistentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinValAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BSC.ClassInstance)).Resolve("minVal")));
        }
        
        /// <summary>
        /// Raises the MinValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxValAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BSC.ClassInstance)).Resolve("maxVal")));
        }
        
        /// <summary>
        /// Raises the MaxValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStepSizeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BSC.ClassInstance)).Resolve("stepSize")));
        }
        
        /// <summary>
        /// Raises the StepSizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepSizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepSizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepSizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepSizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepSizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCtlValReference()
        {
            return ((ITypedElement)(((ModelElement)(BSC.ClassInstance)).Resolve("ctlVal")));
        }
        
        /// <summary>
        /// Raises the CtlValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CtlValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CtlVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCtlVal(object sender, System.EventArgs eventArgs)
        {
            this.CtlVal = null;
        }
        
        private static ITypedElement RetrieveValWTrReference()
        {
            return ((ITypedElement)(((ModelElement)(BSC.ClassInstance)).Resolve("valWTr")));
        }
        
        /// <summary>
        /// Raises the ValWTrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValWTrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValWTrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValWTrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValWTrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValWTrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ValWTr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetValWTr(object sender, System.EventArgs eventArgs)
        {
            this.ValWTr = null;
        }
        
        private static ITypedElement RetrieveQReference()
        {
            return ((ITypedElement)(((ModelElement)(BSC.ClassInstance)).Resolve("q")));
        }
        
        /// <summary>
        /// Raises the QChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Q property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetQ(object sender, System.EventArgs eventArgs)
        {
            this.Q = null;
        }
        
        private static ITypedElement RetrieveTReference()
        {
            return ((ITypedElement)(((ModelElement)(BSC.ClassInstance)).Resolve("t")));
        }
        
        /// <summary>
        /// Raises the TChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the T property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetT(object sender, System.EventArgs eventArgs)
        {
            this.T = null;
        }
        
        private static ITypedElement RetrieveSubValReference()
        {
            return ((ITypedElement)(((ModelElement)(BSC.ClassInstance)).Resolve("subVal")));
        }
        
        /// <summary>
        /// Raises the SubValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SubVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubVal(object sender, System.EventArgs eventArgs)
        {
            this.SubVal = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PERSISTENT"))
            {
                return this.Persistent;
            }
            if ((attribute == "MINVAL"))
            {
                return this.MinVal;
            }
            if ((attribute == "MAXVAL"))
            {
                return this.MaxVal;
            }
            if ((attribute == "STEPSIZE"))
            {
                return this.StepSize;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CTLVAL"))
            {
                this.CtlVal = ((IBSControl)(value));
                return;
            }
            if ((feature == "VALWTR"))
            {
                this.ValWTr = ((IValWithTrans)(value));
                return;
            }
            if ((feature == "Q"))
            {
                this.Q = ((IQuality)(value));
                return;
            }
            if ((feature == "T"))
            {
                this.T = ((ITimeStamp)(value));
                return;
            }
            if ((feature == "SUBVAL"))
            {
                this.SubVal = ((IValWithTrans)(value));
                return;
            }
            if ((feature == "PERSISTENT"))
            {
                this.Persistent = ((bool)(value));
                return;
            }
            if ((feature == "MINVAL"))
            {
                this.MinVal = ((int)(value));
                return;
            }
            if ((feature == "MAXVAL"))
            {
                this.MaxVal = ((int)(value));
                return;
            }
            if ((feature == "STEPSIZE"))
            {
                this.StepSize = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CtlVal"))
            {
                return new CtlValProxy(this);
            }
            if ((attribute == "ValWTr"))
            {
                return new ValWTrProxy(this);
            }
            if ((attribute == "Q"))
            {
                return new QProxy(this);
            }
            if ((attribute == "T"))
            {
                return new TProxy(this);
            }
            if ((attribute == "SubVal"))
            {
                return new SubValProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CtlVal"))
            {
                return new CtlValProxy(this);
            }
            if ((reference == "ValWTr"))
            {
                return new ValWTrProxy(this);
            }
            if ((reference == "Q"))
            {
                return new QProxy(this);
            }
            if ((reference == "T"))
            {
                return new TProxy(this);
            }
            if ((reference == "SubVal"))
            {
                return new SubValProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/BSC")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BSC class
        /// </summary>
        public class BSCReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BSC _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BSCReferencedElementsCollection(BSC parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CtlVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ValWTr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Q != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.T != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SubVal != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CtlValChanged += this.PropagateValueChanges;
                this._parent.ValWTrChanged += this.PropagateValueChanges;
                this._parent.QChanged += this.PropagateValueChanges;
                this._parent.TChanged += this.PropagateValueChanges;
                this._parent.SubValChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CtlValChanged -= this.PropagateValueChanges;
                this._parent.ValWTrChanged -= this.PropagateValueChanges;
                this._parent.QChanged -= this.PropagateValueChanges;
                this._parent.TChanged -= this.PropagateValueChanges;
                this._parent.SubValChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CtlVal == null))
                {
                    IBSControl ctlValCasted = item.As<IBSControl>();
                    if ((ctlValCasted != null))
                    {
                        this._parent.CtlVal = ctlValCasted;
                        return;
                    }
                }
                if ((this._parent.ValWTr == null))
                {
                    IValWithTrans valWTrCasted = item.As<IValWithTrans>();
                    if ((valWTrCasted != null))
                    {
                        this._parent.ValWTr = valWTrCasted;
                        return;
                    }
                }
                if ((this._parent.Q == null))
                {
                    IQuality qCasted = item.As<IQuality>();
                    if ((qCasted != null))
                    {
                        this._parent.Q = qCasted;
                        return;
                    }
                }
                if ((this._parent.T == null))
                {
                    ITimeStamp tCasted = item.As<ITimeStamp>();
                    if ((tCasted != null))
                    {
                        this._parent.T = tCasted;
                        return;
                    }
                }
                if ((this._parent.SubVal == null))
                {
                    IValWithTrans subValCasted = item.As<IValWithTrans>();
                    if ((subValCasted != null))
                    {
                        this._parent.SubVal = subValCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CtlVal = null;
                this._parent.ValWTr = null;
                this._parent.Q = null;
                this._parent.T = null;
                this._parent.SubVal = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CtlVal))
                {
                    return true;
                }
                if ((item == this._parent.ValWTr))
                {
                    return true;
                }
                if ((item == this._parent.Q))
                {
                    return true;
                }
                if ((item == this._parent.T))
                {
                    return true;
                }
                if ((item == this._parent.SubVal))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CtlVal != null))
                {
                    array[arrayIndex] = this._parent.CtlVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ValWTr != null))
                {
                    array[arrayIndex] = this._parent.ValWTr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Q != null))
                {
                    array[arrayIndex] = this._parent.Q;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.T != null))
                {
                    array[arrayIndex] = this._parent.T;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SubVal != null))
                {
                    array[arrayIndex] = this._parent.SubVal;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CtlVal == item))
                {
                    this._parent.CtlVal = null;
                    return true;
                }
                if ((this._parent.ValWTr == item))
                {
                    this._parent.ValWTr = null;
                    return true;
                }
                if ((this._parent.Q == item))
                {
                    this._parent.Q = null;
                    return true;
                }
                if ((this._parent.T == item))
                {
                    this._parent.T = null;
                    return true;
                }
                if ((this._parent.SubVal == item))
                {
                    this._parent.SubVal = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CtlVal).Concat(this._parent.ValWTr).Concat(this._parent.Q).Concat(this._parent.T).Concat(this._parent.SubVal).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the persistent property
        /// </summary>
        private sealed class PersistentProxy : ModelPropertyChange<IBSC, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PersistentProxy(IBSC modelElement) : 
                    base(modelElement, "persistent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Persistent;
                }
                set
                {
                    this.ModelElement.Persistent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minVal property
        /// </summary>
        private sealed class MinValProxy : ModelPropertyChange<IBSC, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinValProxy(IBSC modelElement) : 
                    base(modelElement, "minVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.MinVal;
                }
                set
                {
                    this.ModelElement.MinVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxVal property
        /// </summary>
        private sealed class MaxValProxy : ModelPropertyChange<IBSC, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxValProxy(IBSC modelElement) : 
                    base(modelElement, "maxVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.MaxVal;
                }
                set
                {
                    this.ModelElement.MaxVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stepSize property
        /// </summary>
        private sealed class StepSizeProxy : ModelPropertyChange<IBSC, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StepSizeProxy(IBSC modelElement) : 
                    base(modelElement, "stepSize")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.StepSize;
                }
                set
                {
                    this.ModelElement.StepSize = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ctlVal property
        /// </summary>
        private sealed class CtlValProxy : ModelPropertyChange<IBSC, IBSControl>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CtlValProxy(IBSC modelElement) : 
                    base(modelElement, "ctlVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBSControl Value
            {
                get
                {
                    return this.ModelElement.CtlVal;
                }
                set
                {
                    this.ModelElement.CtlVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the valWTr property
        /// </summary>
        private sealed class ValWTrProxy : ModelPropertyChange<IBSC, IValWithTrans>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValWTrProxy(IBSC modelElement) : 
                    base(modelElement, "valWTr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValWithTrans Value
            {
                get
                {
                    return this.ModelElement.ValWTr;
                }
                set
                {
                    this.ModelElement.ValWTr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the q property
        /// </summary>
        private sealed class QProxy : ModelPropertyChange<IBSC, IQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QProxy(IBSC modelElement) : 
                    base(modelElement, "q")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IQuality Value
            {
                get
                {
                    return this.ModelElement.Q;
                }
                set
                {
                    this.ModelElement.Q = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the t property
        /// </summary>
        private sealed class TProxy : ModelPropertyChange<IBSC, ITimeStamp>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TProxy(IBSC modelElement) : 
                    base(modelElement, "t")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeStamp Value
            {
                get
                {
                    return this.ModelElement.T;
                }
                set
                {
                    this.ModelElement.T = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subVal property
        /// </summary>
        private sealed class SubValProxy : ModelPropertyChange<IBSC, IValWithTrans>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubValProxy(IBSC modelElement) : 
                    base(modelElement, "subVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValWithTrans Value
            {
                get
                {
                    return this.ModelElement.SubVal;
                }
                set
                {
                    this.ModelElement.SubVal = value;
                }
            }
        }
    }
}

