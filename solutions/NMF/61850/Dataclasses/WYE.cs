using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the WYE class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/WYE")]
    public partial class WYE : ModelElement, IWYE, IModelElement
    {
        
        private static Lazy<ITypedElement> _phsAReference = new Lazy<ITypedElement>(RetrievePhsAReference);
        
        /// <summary>
        /// The backing field for the PhsA property
        /// </summary>
        private ICMV _phsA;
        
        private static Lazy<ITypedElement> _phsBReference = new Lazy<ITypedElement>(RetrievePhsBReference);
        
        /// <summary>
        /// The backing field for the PhsB property
        /// </summary>
        private ICMV _phsB;
        
        private static Lazy<ITypedElement> _phsCReference = new Lazy<ITypedElement>(RetrievePhsCReference);
        
        /// <summary>
        /// The backing field for the PhsC property
        /// </summary>
        private ICMV _phsC;
        
        private static Lazy<ITypedElement> _neutReference = new Lazy<ITypedElement>(RetrieveNeutReference);
        
        /// <summary>
        /// The backing field for the Neut property
        /// </summary>
        private ICMV _neut;
        
        private static Lazy<ITypedElement> _netReference = new Lazy<ITypedElement>(RetrieveNetReference);
        
        /// <summary>
        /// The backing field for the Net property
        /// </summary>
        private ICMV _net;
        
        private static Lazy<ITypedElement> _resReference = new Lazy<ITypedElement>(RetrieveResReference);
        
        /// <summary>
        /// The backing field for the Res property
        /// </summary>
        private ICMV _res;
        
        private static Lazy<ITypedElement> _angRefReference = new Lazy<ITypedElement>(RetrieveAngRefReference);
        
        /// <summary>
        /// The backing field for the AngRef property
        /// </summary>
        private IAngleReference _angRef;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The phsA property
        /// </summary>
        [XmlElementNameAttribute("phsA")]
        [XmlAttributeAttribute(true)]
        public virtual ICMV PhsA
        {
            get
            {
                return this._phsA;
            }
            set
            {
                if ((this._phsA != value))
                {
                    ICMV old = this._phsA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhsAChanging(e);
                    this.OnPropertyChanging("PhsA", e, _phsAReference);
                    this._phsA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhsA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhsA;
                    }
                    this.OnPhsAChanged(e);
                    this.OnPropertyChanged("PhsA", e, _phsAReference);
                }
            }
        }
        
        /// <summary>
        /// The phsB property
        /// </summary>
        [XmlElementNameAttribute("phsB")]
        [XmlAttributeAttribute(true)]
        public virtual ICMV PhsB
        {
            get
            {
                return this._phsB;
            }
            set
            {
                if ((this._phsB != value))
                {
                    ICMV old = this._phsB;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhsBChanging(e);
                    this.OnPropertyChanging("PhsB", e, _phsBReference);
                    this._phsB = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhsB;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhsB;
                    }
                    this.OnPhsBChanged(e);
                    this.OnPropertyChanged("PhsB", e, _phsBReference);
                }
            }
        }
        
        /// <summary>
        /// The phsC property
        /// </summary>
        [XmlElementNameAttribute("phsC")]
        [XmlAttributeAttribute(true)]
        public virtual ICMV PhsC
        {
            get
            {
                return this._phsC;
            }
            set
            {
                if ((this._phsC != value))
                {
                    ICMV old = this._phsC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhsCChanging(e);
                    this.OnPropertyChanging("PhsC", e, _phsCReference);
                    this._phsC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhsC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhsC;
                    }
                    this.OnPhsCChanged(e);
                    this.OnPropertyChanged("PhsC", e, _phsCReference);
                }
            }
        }
        
        /// <summary>
        /// The neut property
        /// </summary>
        [XmlElementNameAttribute("neut")]
        [XmlAttributeAttribute(true)]
        public virtual ICMV Neut
        {
            get
            {
                return this._neut;
            }
            set
            {
                if ((this._neut != value))
                {
                    ICMV old = this._neut;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeutChanging(e);
                    this.OnPropertyChanging("Neut", e, _neutReference);
                    this._neut = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNeut;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNeut;
                    }
                    this.OnNeutChanged(e);
                    this.OnPropertyChanged("Neut", e, _neutReference);
                }
            }
        }
        
        /// <summary>
        /// The net property
        /// </summary>
        [XmlElementNameAttribute("net")]
        [XmlAttributeAttribute(true)]
        public virtual ICMV Net
        {
            get
            {
                return this._net;
            }
            set
            {
                if ((this._net != value))
                {
                    ICMV old = this._net;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNetChanging(e);
                    this.OnPropertyChanging("Net", e, _netReference);
                    this._net = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNet;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNet;
                    }
                    this.OnNetChanged(e);
                    this.OnPropertyChanged("Net", e, _netReference);
                }
            }
        }
        
        /// <summary>
        /// The res property
        /// </summary>
        [XmlElementNameAttribute("res")]
        [XmlAttributeAttribute(true)]
        public virtual ICMV Res
        {
            get
            {
                return this._res;
            }
            set
            {
                if ((this._res != value))
                {
                    ICMV old = this._res;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResChanging(e);
                    this.OnPropertyChanging("Res", e, _resReference);
                    this._res = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRes;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRes;
                    }
                    this.OnResChanged(e);
                    this.OnPropertyChanged("Res", e, _resReference);
                }
            }
        }
        
        /// <summary>
        /// The angRef property
        /// </summary>
        [XmlElementNameAttribute("angRef")]
        [XmlAttributeAttribute(true)]
        public virtual IAngleReference AngRef
        {
            get
            {
                return this._angRef;
            }
            set
            {
                if ((this._angRef != value))
                {
                    IAngleReference old = this._angRef;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAngRefChanging(e);
                    this.OnPropertyChanging("AngRef", e, _angRefReference);
                    this._angRef = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAngRef;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAngRef;
                    }
                    this.OnAngRefChanged(e);
                    this.OnPropertyChanged("AngRef", e, _angRefReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new WYEReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/WYE")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PhsA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsAChanging;
        
        /// <summary>
        /// Gets fired when the PhsA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsAChanged;
        
        /// <summary>
        /// Gets fired before the PhsB property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsBChanging;
        
        /// <summary>
        /// Gets fired when the PhsB property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsBChanged;
        
        /// <summary>
        /// Gets fired before the PhsC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsCChanging;
        
        /// <summary>
        /// Gets fired when the PhsC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsCChanged;
        
        /// <summary>
        /// Gets fired before the Neut property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutChanging;
        
        /// <summary>
        /// Gets fired when the Neut property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutChanged;
        
        /// <summary>
        /// Gets fired before the Net property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetChanging;
        
        /// <summary>
        /// Gets fired when the Net property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetChanged;
        
        /// <summary>
        /// Gets fired before the Res property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResChanging;
        
        /// <summary>
        /// Gets fired when the Res property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResChanged;
        
        /// <summary>
        /// Gets fired before the AngRef property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngRefChanging;
        
        /// <summary>
        /// Gets fired when the AngRef property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngRefChanged;
        
        private static ITypedElement RetrievePhsAReference()
        {
            return ((ITypedElement)(((ModelElement)(WYE.ClassInstance)).Resolve("phsA")));
        }
        
        /// <summary>
        /// Raises the PhsAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhsA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhsA(object sender, System.EventArgs eventArgs)
        {
            this.PhsA = null;
        }
        
        private static ITypedElement RetrievePhsBReference()
        {
            return ((ITypedElement)(((ModelElement)(WYE.ClassInstance)).Resolve("phsB")));
        }
        
        /// <summary>
        /// Raises the PhsBChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsBChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsBChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsBChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhsB property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhsB(object sender, System.EventArgs eventArgs)
        {
            this.PhsB = null;
        }
        
        private static ITypedElement RetrievePhsCReference()
        {
            return ((ITypedElement)(((ModelElement)(WYE.ClassInstance)).Resolve("phsC")));
        }
        
        /// <summary>
        /// Raises the PhsCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhsC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhsC(object sender, System.EventArgs eventArgs)
        {
            this.PhsC = null;
        }
        
        private static ITypedElement RetrieveNeutReference()
        {
            return ((ITypedElement)(((ModelElement)(WYE.ClassInstance)).Resolve("neut")));
        }
        
        /// <summary>
        /// Raises the NeutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Neut property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNeut(object sender, System.EventArgs eventArgs)
        {
            this.Neut = null;
        }
        
        private static ITypedElement RetrieveNetReference()
        {
            return ((ITypedElement)(((ModelElement)(WYE.ClassInstance)).Resolve("net")));
        }
        
        /// <summary>
        /// Raises the NetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Net property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNet(object sender, System.EventArgs eventArgs)
        {
            this.Net = null;
        }
        
        private static ITypedElement RetrieveResReference()
        {
            return ((ITypedElement)(((ModelElement)(WYE.ClassInstance)).Resolve("res")));
        }
        
        /// <summary>
        /// Raises the ResChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Res property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRes(object sender, System.EventArgs eventArgs)
        {
            this.Res = null;
        }
        
        private static ITypedElement RetrieveAngRefReference()
        {
            return ((ITypedElement)(((ModelElement)(WYE.ClassInstance)).Resolve("angRef")));
        }
        
        /// <summary>
        /// Raises the AngRefChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngRefChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngRefChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AngRefChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngRefChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngRefChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AngRef property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAngRef(object sender, System.EventArgs eventArgs)
        {
            this.AngRef = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PHSA"))
            {
                this.PhsA = ((ICMV)(value));
                return;
            }
            if ((feature == "PHSB"))
            {
                this.PhsB = ((ICMV)(value));
                return;
            }
            if ((feature == "PHSC"))
            {
                this.PhsC = ((ICMV)(value));
                return;
            }
            if ((feature == "NEUT"))
            {
                this.Neut = ((ICMV)(value));
                return;
            }
            if ((feature == "NET"))
            {
                this.Net = ((ICMV)(value));
                return;
            }
            if ((feature == "RES"))
            {
                this.Res = ((ICMV)(value));
                return;
            }
            if ((feature == "ANGREF"))
            {
                this.AngRef = ((IAngleReference)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PhsA"))
            {
                return new PhsAProxy(this);
            }
            if ((attribute == "PhsB"))
            {
                return new PhsBProxy(this);
            }
            if ((attribute == "PhsC"))
            {
                return new PhsCProxy(this);
            }
            if ((attribute == "Neut"))
            {
                return new NeutProxy(this);
            }
            if ((attribute == "Net"))
            {
                return new NetProxy(this);
            }
            if ((attribute == "Res"))
            {
                return new ResProxy(this);
            }
            if ((attribute == "AngRef"))
            {
                return new AngRefProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PhsA"))
            {
                return new PhsAProxy(this);
            }
            if ((reference == "PhsB"))
            {
                return new PhsBProxy(this);
            }
            if ((reference == "PhsC"))
            {
                return new PhsCProxy(this);
            }
            if ((reference == "Neut"))
            {
                return new NeutProxy(this);
            }
            if ((reference == "Net"))
            {
                return new NetProxy(this);
            }
            if ((reference == "Res"))
            {
                return new ResProxy(this);
            }
            if ((reference == "AngRef"))
            {
                return new AngRefProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/WYE")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the WYE class
        /// </summary>
        public class WYEReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private WYE _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public WYEReferencedElementsCollection(WYE parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PhsA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhsB != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhsC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Neut != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Net != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Res != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AngRef != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PhsAChanged += this.PropagateValueChanges;
                this._parent.PhsBChanged += this.PropagateValueChanges;
                this._parent.PhsCChanged += this.PropagateValueChanges;
                this._parent.NeutChanged += this.PropagateValueChanges;
                this._parent.NetChanged += this.PropagateValueChanges;
                this._parent.ResChanged += this.PropagateValueChanges;
                this._parent.AngRefChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PhsAChanged -= this.PropagateValueChanges;
                this._parent.PhsBChanged -= this.PropagateValueChanges;
                this._parent.PhsCChanged -= this.PropagateValueChanges;
                this._parent.NeutChanged -= this.PropagateValueChanges;
                this._parent.NetChanged -= this.PropagateValueChanges;
                this._parent.ResChanged -= this.PropagateValueChanges;
                this._parent.AngRefChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PhsA == null))
                {
                    ICMV phsACasted = item.As<ICMV>();
                    if ((phsACasted != null))
                    {
                        this._parent.PhsA = phsACasted;
                        return;
                    }
                }
                if ((this._parent.PhsB == null))
                {
                    ICMV phsBCasted = item.As<ICMV>();
                    if ((phsBCasted != null))
                    {
                        this._parent.PhsB = phsBCasted;
                        return;
                    }
                }
                if ((this._parent.PhsC == null))
                {
                    ICMV phsCCasted = item.As<ICMV>();
                    if ((phsCCasted != null))
                    {
                        this._parent.PhsC = phsCCasted;
                        return;
                    }
                }
                if ((this._parent.Neut == null))
                {
                    ICMV neutCasted = item.As<ICMV>();
                    if ((neutCasted != null))
                    {
                        this._parent.Neut = neutCasted;
                        return;
                    }
                }
                if ((this._parent.Net == null))
                {
                    ICMV netCasted = item.As<ICMV>();
                    if ((netCasted != null))
                    {
                        this._parent.Net = netCasted;
                        return;
                    }
                }
                if ((this._parent.Res == null))
                {
                    ICMV resCasted = item.As<ICMV>();
                    if ((resCasted != null))
                    {
                        this._parent.Res = resCasted;
                        return;
                    }
                }
                if ((this._parent.AngRef == null))
                {
                    IAngleReference angRefCasted = item.As<IAngleReference>();
                    if ((angRefCasted != null))
                    {
                        this._parent.AngRef = angRefCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PhsA = null;
                this._parent.PhsB = null;
                this._parent.PhsC = null;
                this._parent.Neut = null;
                this._parent.Net = null;
                this._parent.Res = null;
                this._parent.AngRef = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PhsA))
                {
                    return true;
                }
                if ((item == this._parent.PhsB))
                {
                    return true;
                }
                if ((item == this._parent.PhsC))
                {
                    return true;
                }
                if ((item == this._parent.Neut))
                {
                    return true;
                }
                if ((item == this._parent.Net))
                {
                    return true;
                }
                if ((item == this._parent.Res))
                {
                    return true;
                }
                if ((item == this._parent.AngRef))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PhsA != null))
                {
                    array[arrayIndex] = this._parent.PhsA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhsB != null))
                {
                    array[arrayIndex] = this._parent.PhsB;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhsC != null))
                {
                    array[arrayIndex] = this._parent.PhsC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Neut != null))
                {
                    array[arrayIndex] = this._parent.Neut;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Net != null))
                {
                    array[arrayIndex] = this._parent.Net;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Res != null))
                {
                    array[arrayIndex] = this._parent.Res;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AngRef != null))
                {
                    array[arrayIndex] = this._parent.AngRef;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PhsA == item))
                {
                    this._parent.PhsA = null;
                    return true;
                }
                if ((this._parent.PhsB == item))
                {
                    this._parent.PhsB = null;
                    return true;
                }
                if ((this._parent.PhsC == item))
                {
                    this._parent.PhsC = null;
                    return true;
                }
                if ((this._parent.Neut == item))
                {
                    this._parent.Neut = null;
                    return true;
                }
                if ((this._parent.Net == item))
                {
                    this._parent.Net = null;
                    return true;
                }
                if ((this._parent.Res == item))
                {
                    this._parent.Res = null;
                    return true;
                }
                if ((this._parent.AngRef == item))
                {
                    this._parent.AngRef = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PhsA).Concat(this._parent.PhsB).Concat(this._parent.PhsC).Concat(this._parent.Neut).Concat(this._parent.Net).Concat(this._parent.Res).Concat(this._parent.AngRef).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phsA property
        /// </summary>
        private sealed class PhsAProxy : ModelPropertyChange<IWYE, ICMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhsAProxy(IWYE modelElement) : 
                    base(modelElement, "phsA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMV Value
            {
                get
                {
                    return this.ModelElement.PhsA;
                }
                set
                {
                    this.ModelElement.PhsA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phsB property
        /// </summary>
        private sealed class PhsBProxy : ModelPropertyChange<IWYE, ICMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhsBProxy(IWYE modelElement) : 
                    base(modelElement, "phsB")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMV Value
            {
                get
                {
                    return this.ModelElement.PhsB;
                }
                set
                {
                    this.ModelElement.PhsB = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phsC property
        /// </summary>
        private sealed class PhsCProxy : ModelPropertyChange<IWYE, ICMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhsCProxy(IWYE modelElement) : 
                    base(modelElement, "phsC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMV Value
            {
                get
                {
                    return this.ModelElement.PhsC;
                }
                set
                {
                    this.ModelElement.PhsC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the neut property
        /// </summary>
        private sealed class NeutProxy : ModelPropertyChange<IWYE, ICMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeutProxy(IWYE modelElement) : 
                    base(modelElement, "neut")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMV Value
            {
                get
                {
                    return this.ModelElement.Neut;
                }
                set
                {
                    this.ModelElement.Neut = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the net property
        /// </summary>
        private sealed class NetProxy : ModelPropertyChange<IWYE, ICMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NetProxy(IWYE modelElement) : 
                    base(modelElement, "net")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMV Value
            {
                get
                {
                    return this.ModelElement.Net;
                }
                set
                {
                    this.ModelElement.Net = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the res property
        /// </summary>
        private sealed class ResProxy : ModelPropertyChange<IWYE, ICMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResProxy(IWYE modelElement) : 
                    base(modelElement, "res")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMV Value
            {
                get
                {
                    return this.ModelElement.Res;
                }
                set
                {
                    this.ModelElement.Res = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the angRef property
        /// </summary>
        private sealed class AngRefProxy : ModelPropertyChange<IWYE, IAngleReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AngRefProxy(IWYE modelElement) : 
                    base(modelElement, "angRef")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAngleReference Value
            {
                get
                {
                    return this.ModelElement.AngRef;
                }
                set
                {
                    this.ModelElement.AngRef = value;
                }
            }
        }
    }
}

