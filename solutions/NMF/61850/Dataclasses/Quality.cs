//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the Quality class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/Quality")]
    public partial class Quality : ModelElement, IQuality, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Test property
        /// </summary>
        private Nullable<bool> _test;
        
        private static Lazy<ITypedElement> _testAttribute = new Lazy<ITypedElement>(RetrieveTestAttribute);
        
        /// <summary>
        /// The backing field for the OperatorBlocked property
        /// </summary>
        private Nullable<bool> _operatorBlocked;
        
        private static Lazy<ITypedElement> _operatorBlockedAttribute = new Lazy<ITypedElement>(RetrieveOperatorBlockedAttribute);
        
        /// <summary>
        /// The backing field for the Validity property
        /// </summary>
        private Nullable<ValidityKind> _validity;
        
        private static Lazy<ITypedElement> _validityAttribute = new Lazy<ITypedElement>(RetrieveValidityAttribute);
        
        /// <summary>
        /// The backing field for the Source property
        /// </summary>
        private Nullable<SourceKind> _source;
        
        private static Lazy<ITypedElement> _sourceAttribute = new Lazy<ITypedElement>(RetrieveSourceAttribute);
        
        private static Lazy<ITypedElement> _detailQualReference = new Lazy<ITypedElement>(RetrieveDetailQualReference);
        
        /// <summary>
        /// The backing field for the DetailQual property
        /// </summary>
        private IDetailQual _detailQual;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The test property
        /// </summary>
        [XmlElementNameAttribute("test")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Test
        {
            get
            {
                return this._test;
            }
            set
            {
                if ((this._test != value))
                {
                    Nullable<bool> old = this._test;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTestChanging(e);
                    this.OnPropertyChanging("Test", e, _testAttribute);
                    this._test = value;
                    this.OnTestChanged(e);
                    this.OnPropertyChanged("Test", e, _testAttribute);
                }
            }
        }
        
        /// <summary>
        /// The operatorBlocked property
        /// </summary>
        [XmlElementNameAttribute("operatorBlocked")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> OperatorBlocked
        {
            get
            {
                return this._operatorBlocked;
            }
            set
            {
                if ((this._operatorBlocked != value))
                {
                    Nullable<bool> old = this._operatorBlocked;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperatorBlockedChanging(e);
                    this.OnPropertyChanging("OperatorBlocked", e, _operatorBlockedAttribute);
                    this._operatorBlocked = value;
                    this.OnOperatorBlockedChanged(e);
                    this.OnPropertyChanged("OperatorBlocked", e, _operatorBlockedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The validity property
        /// </summary>
        [XmlElementNameAttribute("validity")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ValidityKind> Validity
        {
            get
            {
                return this._validity;
            }
            set
            {
                if ((this._validity != value))
                {
                    Nullable<ValidityKind> old = this._validity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValidityChanging(e);
                    this.OnPropertyChanging("Validity", e, _validityAttribute);
                    this._validity = value;
                    this.OnValidityChanged(e);
                    this.OnPropertyChanged("Validity", e, _validityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The source property
        /// </summary>
        [XmlElementNameAttribute("source")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SourceKind> Source
        {
            get
            {
                return this._source;
            }
            set
            {
                if ((this._source != value))
                {
                    Nullable<SourceKind> old = this._source;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSourceChanging(e);
                    this.OnPropertyChanging("Source", e, _sourceAttribute);
                    this._source = value;
                    this.OnSourceChanged(e);
                    this.OnPropertyChanged("Source", e, _sourceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The detailQual property
        /// </summary>
        [XmlElementNameAttribute("detailQual")]
        [XmlAttributeAttribute(true)]
        public virtual IDetailQual DetailQual
        {
            get
            {
                return this._detailQual;
            }
            set
            {
                if ((this._detailQual != value))
                {
                    IDetailQual old = this._detailQual;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDetailQualChanging(e);
                    this.OnPropertyChanging("DetailQual", e, _detailQualReference);
                    this._detailQual = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDetailQual;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDetailQual;
                    }
                    this.OnDetailQualChanged(e);
                    this.OnPropertyChanged("DetailQual", e, _detailQualReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new QualityReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/Quality")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Test property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TestChanging;
        
        /// <summary>
        /// Gets fired when the Test property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TestChanged;
        
        /// <summary>
        /// Gets fired before the OperatorBlocked property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatorBlockedChanging;
        
        /// <summary>
        /// Gets fired when the OperatorBlocked property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatorBlockedChanged;
        
        /// <summary>
        /// Gets fired before the Validity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValidityChanging;
        
        /// <summary>
        /// Gets fired when the Validity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValidityChanged;
        
        /// <summary>
        /// Gets fired before the Source property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourceChanging;
        
        /// <summary>
        /// Gets fired when the Source property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourceChanged;
        
        /// <summary>
        /// Gets fired before the DetailQual property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DetailQualChanging;
        
        /// <summary>
        /// Gets fired when the DetailQual property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DetailQualChanged;
        
        private static ITypedElement RetrieveTestAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality.ClassInstance)).Resolve("test")));
        }
        
        /// <summary>
        /// Raises the TestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOperatorBlockedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality.ClassInstance)).Resolve("operatorBlocked")));
        }
        
        /// <summary>
        /// Raises the OperatorBlockedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatorBlockedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatorBlockedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperatorBlockedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatorBlockedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatorBlockedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveValidityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality.ClassInstance)).Resolve("validity")));
        }
        
        /// <summary>
        /// Raises the ValidityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValidityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValidityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValidityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValidityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValidityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSourceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality.ClassInstance)).Resolve("source")));
        }
        
        /// <summary>
        /// Raises the SourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDetailQualReference()
        {
            return ((ITypedElement)(((ModelElement)(Quality.ClassInstance)).Resolve("detailQual")));
        }
        
        /// <summary>
        /// Raises the DetailQualChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDetailQualChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DetailQualChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DetailQualChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDetailQualChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DetailQualChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DetailQual property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDetailQual(object sender, System.EventArgs eventArgs)
        {
            this.DetailQual = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TEST"))
            {
                return this.Test;
            }
            if ((attribute == "OPERATORBLOCKED"))
            {
                return this.OperatorBlocked;
            }
            if ((attribute == "VALIDITY"))
            {
                return this.Validity;
            }
            if ((attribute == "SOURCE"))
            {
                return this.Source;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DETAILQUAL"))
            {
                this.DetailQual = ((IDetailQual)(value));
                return;
            }
            if ((feature == "TEST"))
            {
                this.Test = ((bool)(value));
                return;
            }
            if ((feature == "OPERATORBLOCKED"))
            {
                this.OperatorBlocked = ((bool)(value));
                return;
            }
            if ((feature == "VALIDITY"))
            {
                this.Validity = ((ValidityKind)(value));
                return;
            }
            if ((feature == "SOURCE"))
            {
                this.Source = ((SourceKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DetailQual"))
            {
                return new DetailQualProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DetailQual"))
            {
                return new DetailQualProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/Quality")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Quality class
        /// </summary>
        public class QualityReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Quality _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public QualityReferencedElementsCollection(Quality parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DetailQual != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DetailQualChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DetailQualChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DetailQual == null))
                {
                    IDetailQual detailQualCasted = item.As<IDetailQual>();
                    if ((detailQualCasted != null))
                    {
                        this._parent.DetailQual = detailQualCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DetailQual = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DetailQual))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DetailQual != null))
                {
                    array[arrayIndex] = this._parent.DetailQual;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DetailQual == item))
                {
                    this._parent.DetailQual = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DetailQual).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the test property
        /// </summary>
        private sealed class TestProxy : ModelPropertyChange<IQuality, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TestProxy(IQuality modelElement) : 
                    base(modelElement, "test")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Test;
                }
                set
                {
                    this.ModelElement.Test = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operatorBlocked property
        /// </summary>
        private sealed class OperatorBlockedProxy : ModelPropertyChange<IQuality, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperatorBlockedProxy(IQuality modelElement) : 
                    base(modelElement, "operatorBlocked")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.OperatorBlocked;
                }
                set
                {
                    this.ModelElement.OperatorBlocked = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the validity property
        /// </summary>
        private sealed class ValidityProxy : ModelPropertyChange<IQuality, Nullable<ValidityKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValidityProxy(IQuality modelElement) : 
                    base(modelElement, "validity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ValidityKind> Value
            {
                get
                {
                    return this.ModelElement.Validity;
                }
                set
                {
                    this.ModelElement.Validity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the source property
        /// </summary>
        private sealed class SourceProxy : ModelPropertyChange<IQuality, Nullable<SourceKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SourceProxy(IQuality modelElement) : 
                    base(modelElement, "source")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SourceKind> Value
            {
                get
                {
                    return this.ModelElement.Source;
                }
                set
                {
                    this.ModelElement.Source = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the detailQual property
        /// </summary>
        private sealed class DetailQualProxy : ModelPropertyChange<IQuality, IDetailQual>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DetailQualProxy(IQuality modelElement) : 
                    base(modelElement, "detailQual")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDetailQual Value
            {
                get
                {
                    return this.ModelElement.DetailQual;
                }
                set
                {
                    this.ModelElement.DetailQual = value;
                }
            }
        }
    }
}

