using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the RangeConfig class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/RangeConfig")]
    public partial class RangeConfig : ModelElement, IRangeConfig, IModelElement
    {
        
        private static Lazy<ITypedElement> _hhLimReference = new Lazy<ITypedElement>(RetrieveHhLimReference);
        
        /// <summary>
        /// The backing field for the HhLim property
        /// </summary>
        private IAnalogueValue _hhLim;
        
        private static Lazy<ITypedElement> _hLimReference = new Lazy<ITypedElement>(RetrieveHLimReference);
        
        /// <summary>
        /// The backing field for the HLim property
        /// </summary>
        private IAnalogueValue _hLim;
        
        private static Lazy<ITypedElement> _lLimReference = new Lazy<ITypedElement>(RetrieveLLimReference);
        
        /// <summary>
        /// The backing field for the LLim property
        /// </summary>
        private IAnalogueValue _lLim;
        
        private static Lazy<ITypedElement> _llLimReference = new Lazy<ITypedElement>(RetrieveLlLimReference);
        
        /// <summary>
        /// The backing field for the LlLim property
        /// </summary>
        private IAnalogueValue _llLim;
        
        private static Lazy<ITypedElement> _minReference = new Lazy<ITypedElement>(RetrieveMinReference);
        
        /// <summary>
        /// The backing field for the Min property
        /// </summary>
        private IAnalogueValue _min;
        
        private static Lazy<ITypedElement> _maxReference = new Lazy<ITypedElement>(RetrieveMaxReference);
        
        /// <summary>
        /// The backing field for the Max property
        /// </summary>
        private IAnalogueValue _max;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The hhLim property
        /// </summary>
        [XmlElementNameAttribute("hhLim")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue HhLim
        {
            get
            {
                return this._hhLim;
            }
            set
            {
                if ((this._hhLim != value))
                {
                    IAnalogueValue old = this._hhLim;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHhLimChanging(e);
                    this.OnPropertyChanging("HhLim", e, _hhLimReference);
                    this._hhLim = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHhLim;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHhLim;
                    }
                    this.OnHhLimChanged(e);
                    this.OnPropertyChanged("HhLim", e, _hhLimReference);
                }
            }
        }
        
        /// <summary>
        /// The hLim property
        /// </summary>
        [XmlElementNameAttribute("hLim")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue HLim
        {
            get
            {
                return this._hLim;
            }
            set
            {
                if ((this._hLim != value))
                {
                    IAnalogueValue old = this._hLim;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHLimChanging(e);
                    this.OnPropertyChanging("HLim", e, _hLimReference);
                    this._hLim = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHLim;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHLim;
                    }
                    this.OnHLimChanged(e);
                    this.OnPropertyChanged("HLim", e, _hLimReference);
                }
            }
        }
        
        /// <summary>
        /// The lLim property
        /// </summary>
        [XmlElementNameAttribute("lLim")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue LLim
        {
            get
            {
                return this._lLim;
            }
            set
            {
                if ((this._lLim != value))
                {
                    IAnalogueValue old = this._lLim;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLLimChanging(e);
                    this.OnPropertyChanging("LLim", e, _lLimReference);
                    this._lLim = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLLim;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLLim;
                    }
                    this.OnLLimChanged(e);
                    this.OnPropertyChanged("LLim", e, _lLimReference);
                }
            }
        }
        
        /// <summary>
        /// The llLim property
        /// </summary>
        [XmlElementNameAttribute("llLim")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue LlLim
        {
            get
            {
                return this._llLim;
            }
            set
            {
                if ((this._llLim != value))
                {
                    IAnalogueValue old = this._llLim;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLlLimChanging(e);
                    this.OnPropertyChanging("LlLim", e, _llLimReference);
                    this._llLim = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLlLim;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLlLim;
                    }
                    this.OnLlLimChanged(e);
                    this.OnPropertyChanged("LlLim", e, _llLimReference);
                }
            }
        }
        
        /// <summary>
        /// The min property
        /// </summary>
        [XmlElementNameAttribute("min")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue Min
        {
            get
            {
                return this._min;
            }
            set
            {
                if ((this._min != value))
                {
                    IAnalogueValue old = this._min;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinChanging(e);
                    this.OnPropertyChanging("Min", e, _minReference);
                    this._min = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMin;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMin;
                    }
                    this.OnMinChanged(e);
                    this.OnPropertyChanged("Min", e, _minReference);
                }
            }
        }
        
        /// <summary>
        /// The max property
        /// </summary>
        [XmlElementNameAttribute("max")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue Max
        {
            get
            {
                return this._max;
            }
            set
            {
                if ((this._max != value))
                {
                    IAnalogueValue old = this._max;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxChanging(e);
                    this.OnPropertyChanging("Max", e, _maxReference);
                    this._max = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMax;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMax;
                    }
                    this.OnMaxChanged(e);
                    this.OnPropertyChanged("Max", e, _maxReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RangeConfigReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/RangeConfig")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the HhLim property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HhLimChanging;
        
        /// <summary>
        /// Gets fired when the HhLim property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HhLimChanged;
        
        /// <summary>
        /// Gets fired before the HLim property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HLimChanging;
        
        /// <summary>
        /// Gets fired when the HLim property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HLimChanged;
        
        /// <summary>
        /// Gets fired before the LLim property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LLimChanging;
        
        /// <summary>
        /// Gets fired when the LLim property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LLimChanged;
        
        /// <summary>
        /// Gets fired before the LlLim property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LlLimChanging;
        
        /// <summary>
        /// Gets fired when the LlLim property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LlLimChanged;
        
        /// <summary>
        /// Gets fired before the Min property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinChanging;
        
        /// <summary>
        /// Gets fired when the Min property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinChanged;
        
        /// <summary>
        /// Gets fired before the Max property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxChanging;
        
        /// <summary>
        /// Gets fired when the Max property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxChanged;
        
        private static ITypedElement RetrieveHhLimReference()
        {
            return ((ITypedElement)(((ModelElement)(RangeConfig.ClassInstance)).Resolve("hhLim")));
        }
        
        /// <summary>
        /// Raises the HhLimChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHhLimChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HhLimChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HhLimChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHhLimChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HhLimChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HhLim property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHhLim(object sender, System.EventArgs eventArgs)
        {
            this.HhLim = null;
        }
        
        private static ITypedElement RetrieveHLimReference()
        {
            return ((ITypedElement)(((ModelElement)(RangeConfig.ClassInstance)).Resolve("hLim")));
        }
        
        /// <summary>
        /// Raises the HLimChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHLimChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HLimChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HLimChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHLimChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HLimChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HLim property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHLim(object sender, System.EventArgs eventArgs)
        {
            this.HLim = null;
        }
        
        private static ITypedElement RetrieveLLimReference()
        {
            return ((ITypedElement)(((ModelElement)(RangeConfig.ClassInstance)).Resolve("lLim")));
        }
        
        /// <summary>
        /// Raises the LLimChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLLimChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LLimChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LLimChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLLimChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LLimChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LLim property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLLim(object sender, System.EventArgs eventArgs)
        {
            this.LLim = null;
        }
        
        private static ITypedElement RetrieveLlLimReference()
        {
            return ((ITypedElement)(((ModelElement)(RangeConfig.ClassInstance)).Resolve("llLim")));
        }
        
        /// <summary>
        /// Raises the LlLimChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLlLimChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LlLimChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LlLimChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLlLimChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LlLimChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LlLim property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLlLim(object sender, System.EventArgs eventArgs)
        {
            this.LlLim = null;
        }
        
        private static ITypedElement RetrieveMinReference()
        {
            return ((ITypedElement)(((ModelElement)(RangeConfig.ClassInstance)).Resolve("min")));
        }
        
        /// <summary>
        /// Raises the MinChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Min property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMin(object sender, System.EventArgs eventArgs)
        {
            this.Min = null;
        }
        
        private static ITypedElement RetrieveMaxReference()
        {
            return ((ITypedElement)(((ModelElement)(RangeConfig.ClassInstance)).Resolve("max")));
        }
        
        /// <summary>
        /// Raises the MaxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Max property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMax(object sender, System.EventArgs eventArgs)
        {
            this.Max = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "HHLIM"))
            {
                this.HhLim = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "HLIM"))
            {
                this.HLim = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "LLIM"))
            {
                this.LLim = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "LLLIM"))
            {
                this.LlLim = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "MIN"))
            {
                this.Min = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "MAX"))
            {
                this.Max = ((IAnalogueValue)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "HhLim"))
            {
                return new HhLimProxy(this);
            }
            if ((attribute == "HLim"))
            {
                return new HLimProxy(this);
            }
            if ((attribute == "LLim"))
            {
                return new LLimProxy(this);
            }
            if ((attribute == "LlLim"))
            {
                return new LlLimProxy(this);
            }
            if ((attribute == "Min"))
            {
                return new MinProxy(this);
            }
            if ((attribute == "Max"))
            {
                return new MaxProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "HhLim"))
            {
                return new HhLimProxy(this);
            }
            if ((reference == "HLim"))
            {
                return new HLimProxy(this);
            }
            if ((reference == "LLim"))
            {
                return new LLimProxy(this);
            }
            if ((reference == "LlLim"))
            {
                return new LlLimProxy(this);
            }
            if ((reference == "Min"))
            {
                return new MinProxy(this);
            }
            if ((reference == "Max"))
            {
                return new MaxProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/RangeConfig")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RangeConfig class
        /// </summary>
        public class RangeConfigReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RangeConfig _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RangeConfigReferencedElementsCollection(RangeConfig parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.HhLim != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HLim != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LLim != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LlLim != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Min != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Max != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.HhLimChanged += this.PropagateValueChanges;
                this._parent.HLimChanged += this.PropagateValueChanges;
                this._parent.LLimChanged += this.PropagateValueChanges;
                this._parent.LlLimChanged += this.PropagateValueChanges;
                this._parent.MinChanged += this.PropagateValueChanges;
                this._parent.MaxChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.HhLimChanged -= this.PropagateValueChanges;
                this._parent.HLimChanged -= this.PropagateValueChanges;
                this._parent.LLimChanged -= this.PropagateValueChanges;
                this._parent.LlLimChanged -= this.PropagateValueChanges;
                this._parent.MinChanged -= this.PropagateValueChanges;
                this._parent.MaxChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.HhLim == null))
                {
                    IAnalogueValue hhLimCasted = item.As<IAnalogueValue>();
                    if ((hhLimCasted != null))
                    {
                        this._parent.HhLim = hhLimCasted;
                        return;
                    }
                }
                if ((this._parent.HLim == null))
                {
                    IAnalogueValue hLimCasted = item.As<IAnalogueValue>();
                    if ((hLimCasted != null))
                    {
                        this._parent.HLim = hLimCasted;
                        return;
                    }
                }
                if ((this._parent.LLim == null))
                {
                    IAnalogueValue lLimCasted = item.As<IAnalogueValue>();
                    if ((lLimCasted != null))
                    {
                        this._parent.LLim = lLimCasted;
                        return;
                    }
                }
                if ((this._parent.LlLim == null))
                {
                    IAnalogueValue llLimCasted = item.As<IAnalogueValue>();
                    if ((llLimCasted != null))
                    {
                        this._parent.LlLim = llLimCasted;
                        return;
                    }
                }
                if ((this._parent.Min == null))
                {
                    IAnalogueValue minCasted = item.As<IAnalogueValue>();
                    if ((minCasted != null))
                    {
                        this._parent.Min = minCasted;
                        return;
                    }
                }
                if ((this._parent.Max == null))
                {
                    IAnalogueValue maxCasted = item.As<IAnalogueValue>();
                    if ((maxCasted != null))
                    {
                        this._parent.Max = maxCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.HhLim = null;
                this._parent.HLim = null;
                this._parent.LLim = null;
                this._parent.LlLim = null;
                this._parent.Min = null;
                this._parent.Max = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.HhLim))
                {
                    return true;
                }
                if ((item == this._parent.HLim))
                {
                    return true;
                }
                if ((item == this._parent.LLim))
                {
                    return true;
                }
                if ((item == this._parent.LlLim))
                {
                    return true;
                }
                if ((item == this._parent.Min))
                {
                    return true;
                }
                if ((item == this._parent.Max))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.HhLim != null))
                {
                    array[arrayIndex] = this._parent.HhLim;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HLim != null))
                {
                    array[arrayIndex] = this._parent.HLim;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LLim != null))
                {
                    array[arrayIndex] = this._parent.LLim;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LlLim != null))
                {
                    array[arrayIndex] = this._parent.LlLim;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Min != null))
                {
                    array[arrayIndex] = this._parent.Min;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Max != null))
                {
                    array[arrayIndex] = this._parent.Max;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.HhLim == item))
                {
                    this._parent.HhLim = null;
                    return true;
                }
                if ((this._parent.HLim == item))
                {
                    this._parent.HLim = null;
                    return true;
                }
                if ((this._parent.LLim == item))
                {
                    this._parent.LLim = null;
                    return true;
                }
                if ((this._parent.LlLim == item))
                {
                    this._parent.LlLim = null;
                    return true;
                }
                if ((this._parent.Min == item))
                {
                    this._parent.Min = null;
                    return true;
                }
                if ((this._parent.Max == item))
                {
                    this._parent.Max = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.HhLim).Concat(this._parent.HLim).Concat(this._parent.LLim).Concat(this._parent.LlLim).Concat(this._parent.Min).Concat(this._parent.Max).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hhLim property
        /// </summary>
        private sealed class HhLimProxy : ModelPropertyChange<IRangeConfig, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HhLimProxy(IRangeConfig modelElement) : 
                    base(modelElement, "hhLim")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.HhLim;
                }
                set
                {
                    this.ModelElement.HhLim = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hLim property
        /// </summary>
        private sealed class HLimProxy : ModelPropertyChange<IRangeConfig, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HLimProxy(IRangeConfig modelElement) : 
                    base(modelElement, "hLim")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.HLim;
                }
                set
                {
                    this.ModelElement.HLim = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lLim property
        /// </summary>
        private sealed class LLimProxy : ModelPropertyChange<IRangeConfig, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LLimProxy(IRangeConfig modelElement) : 
                    base(modelElement, "lLim")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.LLim;
                }
                set
                {
                    this.ModelElement.LLim = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the llLim property
        /// </summary>
        private sealed class LlLimProxy : ModelPropertyChange<IRangeConfig, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LlLimProxy(IRangeConfig modelElement) : 
                    base(modelElement, "llLim")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.LlLim;
                }
                set
                {
                    this.ModelElement.LlLim = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the min property
        /// </summary>
        private sealed class MinProxy : ModelPropertyChange<IRangeConfig, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinProxy(IRangeConfig modelElement) : 
                    base(modelElement, "min")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.Min;
                }
                set
                {
                    this.ModelElement.Min = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the max property
        /// </summary>
        private sealed class MaxProxy : ModelPropertyChange<IRangeConfig, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxProxy(IRangeConfig modelElement) : 
                    base(modelElement, "max")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.Max;
                }
                set
                {
                    this.ModelElement.Max = value;
                }
            }
        }
    }
}

