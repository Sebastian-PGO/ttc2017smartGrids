//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The public interface for HDEL
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(HDEL))]
    [XmlDefaultImplementationTypeAttribute(typeof(HDEL))]
    public interface IHDEL : IModelElement
    {
        
        /// <summary>
        /// The numHar property
        /// </summary>
        Nullable<int> NumHar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The numCyc property
        /// </summary>
        Nullable<int> NumCyc
        {
            get;
            set;
        }
        
        /// <summary>
        /// The evalTm property
        /// </summary>
        Nullable<int> EvalTm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The smpRate property
        /// </summary>
        Nullable<int> SmpRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The frequency property
        /// </summary>
        Nullable<float> Frequency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rmsCyc property
        /// </summary>
        Nullable<int> RmsCyc
        {
            get;
            set;
        }
        
        /// <summary>
        /// The q property
        /// </summary>
        IQuality Q
        {
            get;
            set;
        }
        
        /// <summary>
        /// The t property
        /// </summary>
        ITimeStamp T
        {
            get;
            set;
        }
        
        /// <summary>
        /// The phsABHar property
        /// </summary>
        IVectorArray PhsABHar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The phsBCHar property
        /// </summary>
        IVectorArray PhsBCHar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The phsCAHar property
        /// </summary>
        IVectorArray PhsCAHar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The units property
        /// </summary>
        IUnits Units
        {
            get;
            set;
        }
        
        /// <summary>
        /// The angRef property
        /// </summary>
        IAngleReference AngRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// The hvRef property
        /// </summary>
        IMagReference HvRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the NumHar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NumHarChanging;
        
        /// <summary>
        /// Gets fired when the NumHar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NumHarChanged;
        
        /// <summary>
        /// Gets fired before the NumCyc property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NumCycChanging;
        
        /// <summary>
        /// Gets fired when the NumCyc property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NumCycChanged;
        
        /// <summary>
        /// Gets fired before the EvalTm property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EvalTmChanging;
        
        /// <summary>
        /// Gets fired when the EvalTm property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EvalTmChanged;
        
        /// <summary>
        /// Gets fired before the SmpRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SmpRateChanging;
        
        /// <summary>
        /// Gets fired when the SmpRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SmpRateChanged;
        
        /// <summary>
        /// Gets fired before the Frequency property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrequencyChanging;
        
        /// <summary>
        /// Gets fired when the Frequency property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrequencyChanged;
        
        /// <summary>
        /// Gets fired before the RmsCyc property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RmsCycChanging;
        
        /// <summary>
        /// Gets fired when the RmsCyc property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RmsCycChanged;
        
        /// <summary>
        /// Gets fired before the Q property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QChanging;
        
        /// <summary>
        /// Gets fired when the Q property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QChanged;
        
        /// <summary>
        /// Gets fired before the T property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TChanging;
        
        /// <summary>
        /// Gets fired when the T property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TChanged;
        
        /// <summary>
        /// Gets fired before the PhsABHar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsABHarChanging;
        
        /// <summary>
        /// Gets fired when the PhsABHar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsABHarChanged;
        
        /// <summary>
        /// Gets fired before the PhsBCHar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsBCHarChanging;
        
        /// <summary>
        /// Gets fired when the PhsBCHar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsBCHarChanged;
        
        /// <summary>
        /// Gets fired before the PhsCAHar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsCAHarChanging;
        
        /// <summary>
        /// Gets fired when the PhsCAHar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsCAHarChanged;
        
        /// <summary>
        /// Gets fired before the Units property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitsChanging;
        
        /// <summary>
        /// Gets fired when the Units property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitsChanged;
        
        /// <summary>
        /// Gets fired before the AngRef property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AngRefChanging;
        
        /// <summary>
        /// Gets fired when the AngRef property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AngRefChanged;
        
        /// <summary>
        /// Gets fired before the HvRef property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HvRefChanging;
        
        /// <summary>
        /// Gets fired when the HvRef property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HvRefChanged;
    }
}

