using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The public interface for RangeConfig
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RangeConfig))]
    [XmlDefaultImplementationTypeAttribute(typeof(RangeConfig))]
    public interface IRangeConfig : IModelElement
    {
        
        /// <summary>
        /// The hhLim property
        /// </summary>
        IAnalogueValue HhLim
        {
            get;
            set;
        }
        
        /// <summary>
        /// The hLim property
        /// </summary>
        IAnalogueValue HLim
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lLim property
        /// </summary>
        IAnalogueValue LLim
        {
            get;
            set;
        }
        
        /// <summary>
        /// The llLim property
        /// </summary>
        IAnalogueValue LlLim
        {
            get;
            set;
        }
        
        /// <summary>
        /// The min property
        /// </summary>
        IAnalogueValue Min
        {
            get;
            set;
        }
        
        /// <summary>
        /// The max property
        /// </summary>
        IAnalogueValue Max
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the HhLim property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HhLimChanging;
        
        /// <summary>
        /// Gets fired when the HhLim property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HhLimChanged;
        
        /// <summary>
        /// Gets fired before the HLim property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HLimChanging;
        
        /// <summary>
        /// Gets fired when the HLim property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HLimChanged;
        
        /// <summary>
        /// Gets fired before the LLim property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LLimChanging;
        
        /// <summary>
        /// Gets fired when the LLim property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LLimChanged;
        
        /// <summary>
        /// Gets fired before the LlLim property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LlLimChanging;
        
        /// <summary>
        /// Gets fired when the LlLim property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LlLimChanged;
        
        /// <summary>
        /// Gets fired before the Min property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinChanging;
        
        /// <summary>
        /// Gets fired when the Min property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinChanged;
        
        /// <summary>
        /// Gets fired before the Max property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxChanging;
        
        /// <summary>
        /// Gets fired when the Max property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxChanged;
    }
}

