using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The public interface for SAV
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SAV))]
    [XmlDefaultImplementationTypeAttribute(typeof(SAV))]
    public interface ISAV : IModelElement
    {
        
        /// <summary>
        /// The instMag property
        /// </summary>
        IAnalogueValue InstMag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The q property
        /// </summary>
        IQuality Q
        {
            get;
            set;
        }
        
        /// <summary>
        /// The t property
        /// </summary>
        ITimeStamp T
        {
            get;
            set;
        }
        
        /// <summary>
        /// The units property
        /// </summary>
        IUnits Units
        {
            get;
            set;
        }
        
        /// <summary>
        /// The sVC property
        /// </summary>
        IScaledValueConfig SVC
        {
            get;
            set;
        }
        
        /// <summary>
        /// The min property
        /// </summary>
        IAnalogueValue Min
        {
            get;
            set;
        }
        
        /// <summary>
        /// The max property
        /// </summary>
        IAnalogueValue Max
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the InstMag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InstMagChanging;
        
        /// <summary>
        /// Gets fired when the InstMag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InstMagChanged;
        
        /// <summary>
        /// Gets fired before the Q property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QChanging;
        
        /// <summary>
        /// Gets fired when the Q property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QChanged;
        
        /// <summary>
        /// Gets fired before the T property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TChanging;
        
        /// <summary>
        /// Gets fired when the T property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TChanged;
        
        /// <summary>
        /// Gets fired before the Units property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitsChanging;
        
        /// <summary>
        /// Gets fired when the Units property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitsChanged;
        
        /// <summary>
        /// Gets fired before the SVC property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SVCChanging;
        
        /// <summary>
        /// Gets fired when the SVC property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SVCChanged;
        
        /// <summary>
        /// Gets fired before the Min property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinChanging;
        
        /// <summary>
        /// Gets fired when the Min property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinChanged;
        
        /// <summary>
        /// Gets fired before the Max property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxChanging;
        
        /// <summary>
        /// Gets fired when the Max property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxChanged;
    }
}

