using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the ValWithTrans class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/ValWithTrans")]
    public partial class ValWithTrans : ModelElement, IValWithTrans, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PosVal property
        /// </summary>
        private Nullable<int> _posVal;
        
        private static Lazy<ITypedElement> _posValAttribute = new Lazy<ITypedElement>(RetrievePosValAttribute);
        
        /// <summary>
        /// The backing field for the TransInd property
        /// </summary>
        private Nullable<bool> _transInd;
        
        private static Lazy<ITypedElement> _transIndAttribute = new Lazy<ITypedElement>(RetrieveTransIndAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The posVal property
        /// </summary>
        [XmlElementNameAttribute("posVal")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> PosVal
        {
            get
            {
                return this._posVal;
            }
            set
            {
                if ((this._posVal != value))
                {
                    Nullable<int> old = this._posVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPosValChanging(e);
                    this.OnPropertyChanging("PosVal", e, _posValAttribute);
                    this._posVal = value;
                    this.OnPosValChanged(e);
                    this.OnPropertyChanged("PosVal", e, _posValAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transInd property
        /// </summary>
        [XmlElementNameAttribute("transInd")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> TransInd
        {
            get
            {
                return this._transInd;
            }
            set
            {
                if ((this._transInd != value))
                {
                    Nullable<bool> old = this._transInd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransIndChanging(e);
                    this.OnPropertyChanging("TransInd", e, _transIndAttribute);
                    this._transInd = value;
                    this.OnTransIndChanged(e);
                    this.OnPropertyChanged("TransInd", e, _transIndAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/ValWithTrans")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PosVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosValChanging;
        
        /// <summary>
        /// Gets fired when the PosVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosValChanged;
        
        /// <summary>
        /// Gets fired before the TransInd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransIndChanging;
        
        /// <summary>
        /// Gets fired when the TransInd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransIndChanged;
        
        private static ITypedElement RetrievePosValAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ValWithTrans.ClassInstance)).Resolve("posVal")));
        }
        
        /// <summary>
        /// Raises the PosValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PosValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransIndAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ValWithTrans.ClassInstance)).Resolve("transInd")));
        }
        
        /// <summary>
        /// Raises the TransIndChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransIndChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransIndChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransIndChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransIndChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransIndChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "POSVAL"))
            {
                return this.PosVal;
            }
            if ((attribute == "TRANSIND"))
            {
                return this.TransInd;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "POSVAL"))
            {
                this.PosVal = ((int)(value));
                return;
            }
            if ((feature == "TRANSIND"))
            {
                this.TransInd = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/ValWithTrans")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the posVal property
        /// </summary>
        private sealed class PosValProxy : ModelPropertyChange<IValWithTrans, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PosValProxy(IValWithTrans modelElement) : 
                    base(modelElement, "posVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.PosVal;
                }
                set
                {
                    this.ModelElement.PosVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transInd property
        /// </summary>
        private sealed class TransIndProxy : ModelPropertyChange<IValWithTrans, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransIndProxy(IValWithTrans modelElement) : 
                    base(modelElement, "transInd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.TransInd;
                }
                set
                {
                    this.ModelElement.TransInd = value;
                }
            }
        }
    }
}

