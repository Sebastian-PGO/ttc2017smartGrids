using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the APC class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/APC")]
    public partial class APC : ModelElement, IAPC, IModelElement
    {
        
        /// <summary>
        /// The backing field for the D property
        /// </summary>
        private string _d;
        
        private static Lazy<ITypedElement> _dAttribute = new Lazy<ITypedElement>(RetrieveDAttribute);
        
        /// <summary>
        /// The backing field for the DU property
        /// </summary>
        private string _dU;
        
        private static Lazy<ITypedElement> _dUAttribute = new Lazy<ITypedElement>(RetrieveDUAttribute);
        
        private static Lazy<ITypedElement> _setMagReference = new Lazy<ITypedElement>(RetrieveSetMagReference);
        
        /// <summary>
        /// The backing field for the SetMag property
        /// </summary>
        private IAnalogueValue _setMag;
        
        private static Lazy<ITypedElement> _originReference = new Lazy<ITypedElement>(RetrieveOriginReference);
        
        /// <summary>
        /// The backing field for the Origin property
        /// </summary>
        private IOriginator _origin;
        
        private static Lazy<ITypedElement> _operTmReference = new Lazy<ITypedElement>(RetrieveOperTmReference);
        
        /// <summary>
        /// The backing field for the OperTm property
        /// </summary>
        private ITimeStamp _operTm;
        
        private static Lazy<ITypedElement> _qReference = new Lazy<ITypedElement>(RetrieveQReference);
        
        /// <summary>
        /// The backing field for the Q property
        /// </summary>
        private IQuality _q;
        
        private static Lazy<ITypedElement> _tReference = new Lazy<ITypedElement>(RetrieveTReference);
        
        /// <summary>
        /// The backing field for the T property
        /// </summary>
        private ITimeStamp _t;
        
        private static Lazy<ITypedElement> _ctlModelReference = new Lazy<ITypedElement>(RetrieveCtlModelReference);
        
        /// <summary>
        /// The backing field for the CtlModel property
        /// </summary>
        private ICtlModels _ctlModel;
        
        private static Lazy<ITypedElement> _unitsReference = new Lazy<ITypedElement>(RetrieveUnitsReference);
        
        /// <summary>
        /// The backing field for the Units property
        /// </summary>
        private IUnits _units;
        
        private static Lazy<ITypedElement> _sVCReference = new Lazy<ITypedElement>(RetrieveSVCReference);
        
        /// <summary>
        /// The backing field for the SVC property
        /// </summary>
        private IScaledValueConfig _sVC;
        
        private static Lazy<ITypedElement> _minValReference = new Lazy<ITypedElement>(RetrieveMinValReference);
        
        /// <summary>
        /// The backing field for the MinVal property
        /// </summary>
        private IAnalogueValue _minVal;
        
        private static Lazy<ITypedElement> _maxValReference = new Lazy<ITypedElement>(RetrieveMaxValReference);
        
        /// <summary>
        /// The backing field for the MaxVal property
        /// </summary>
        private IAnalogueValue _maxVal;
        
        private static Lazy<ITypedElement> _stepSizeReference = new Lazy<ITypedElement>(RetrieveStepSizeReference);
        
        /// <summary>
        /// The backing field for the StepSize property
        /// </summary>
        private IAnalogueValue _stepSize;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The d property
        /// </summary>
        [XmlElementNameAttribute("d")]
        [XmlAttributeAttribute(true)]
        public virtual string D
        {
            get
            {
                return this._d;
            }
            set
            {
                if ((this._d != value))
                {
                    string old = this._d;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDChanging(e);
                    this.OnPropertyChanging("D", e, _dAttribute);
                    this._d = value;
                    this.OnDChanged(e);
                    this.OnPropertyChanged("D", e, _dAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dU property
        /// </summary>
        [XmlElementNameAttribute("dU")]
        [XmlAttributeAttribute(true)]
        public virtual string DU
        {
            get
            {
                return this._dU;
            }
            set
            {
                if ((this._dU != value))
                {
                    string old = this._dU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDUChanging(e);
                    this.OnPropertyChanging("DU", e, _dUAttribute);
                    this._dU = value;
                    this.OnDUChanged(e);
                    this.OnPropertyChanged("DU", e, _dUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The setMag property
        /// </summary>
        [XmlElementNameAttribute("setMag")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue SetMag
        {
            get
            {
                return this._setMag;
            }
            set
            {
                if ((this._setMag != value))
                {
                    IAnalogueValue old = this._setMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetMagChanging(e);
                    this.OnPropertyChanging("SetMag", e, _setMagReference);
                    this._setMag = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSetMag;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSetMag;
                    }
                    this.OnSetMagChanged(e);
                    this.OnPropertyChanged("SetMag", e, _setMagReference);
                }
            }
        }
        
        /// <summary>
        /// The origin property
        /// </summary>
        [XmlElementNameAttribute("origin")]
        [XmlAttributeAttribute(true)]
        public virtual IOriginator Origin
        {
            get
            {
                return this._origin;
            }
            set
            {
                if ((this._origin != value))
                {
                    IOriginator old = this._origin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOriginChanging(e);
                    this.OnPropertyChanging("Origin", e, _originReference);
                    this._origin = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOrigin;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOrigin;
                    }
                    this.OnOriginChanged(e);
                    this.OnPropertyChanged("Origin", e, _originReference);
                }
            }
        }
        
        /// <summary>
        /// The operTm property
        /// </summary>
        [XmlElementNameAttribute("operTm")]
        [XmlAttributeAttribute(true)]
        public virtual ITimeStamp OperTm
        {
            get
            {
                return this._operTm;
            }
            set
            {
                if ((this._operTm != value))
                {
                    ITimeStamp old = this._operTm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperTmChanging(e);
                    this.OnPropertyChanging("OperTm", e, _operTmReference);
                    this._operTm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOperTm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOperTm;
                    }
                    this.OnOperTmChanged(e);
                    this.OnPropertyChanged("OperTm", e, _operTmReference);
                }
            }
        }
        
        /// <summary>
        /// The q property
        /// </summary>
        [XmlElementNameAttribute("q")]
        [XmlAttributeAttribute(true)]
        public virtual IQuality Q
        {
            get
            {
                return this._q;
            }
            set
            {
                if ((this._q != value))
                {
                    IQuality old = this._q;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQChanging(e);
                    this.OnPropertyChanging("Q", e, _qReference);
                    this._q = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetQ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetQ;
                    }
                    this.OnQChanged(e);
                    this.OnPropertyChanged("Q", e, _qReference);
                }
            }
        }
        
        /// <summary>
        /// The t property
        /// </summary>
        [XmlElementNameAttribute("t")]
        [XmlAttributeAttribute(true)]
        public virtual ITimeStamp T
        {
            get
            {
                return this._t;
            }
            set
            {
                if ((this._t != value))
                {
                    ITimeStamp old = this._t;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTChanging(e);
                    this.OnPropertyChanging("T", e, _tReference);
                    this._t = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetT;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetT;
                    }
                    this.OnTChanged(e);
                    this.OnPropertyChanged("T", e, _tReference);
                }
            }
        }
        
        /// <summary>
        /// The ctlModel property
        /// </summary>
        [XmlElementNameAttribute("ctlModel")]
        [XmlAttributeAttribute(true)]
        public virtual ICtlModels CtlModel
        {
            get
            {
                return this._ctlModel;
            }
            set
            {
                if ((this._ctlModel != value))
                {
                    ICtlModels old = this._ctlModel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCtlModelChanging(e);
                    this.OnPropertyChanging("CtlModel", e, _ctlModelReference);
                    this._ctlModel = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCtlModel;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCtlModel;
                    }
                    this.OnCtlModelChanged(e);
                    this.OnPropertyChanged("CtlModel", e, _ctlModelReference);
                }
            }
        }
        
        /// <summary>
        /// The units property
        /// </summary>
        [XmlElementNameAttribute("units")]
        [XmlAttributeAttribute(true)]
        public virtual IUnits Units
        {
            get
            {
                return this._units;
            }
            set
            {
                if ((this._units != value))
                {
                    IUnits old = this._units;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitsChanging(e);
                    this.OnPropertyChanging("Units", e, _unitsReference);
                    this._units = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUnits;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUnits;
                    }
                    this.OnUnitsChanged(e);
                    this.OnPropertyChanged("Units", e, _unitsReference);
                }
            }
        }
        
        /// <summary>
        /// The sVC property
        /// </summary>
        [XmlElementNameAttribute("sVC")]
        [XmlAttributeAttribute(true)]
        public virtual IScaledValueConfig SVC
        {
            get
            {
                return this._sVC;
            }
            set
            {
                if ((this._sVC != value))
                {
                    IScaledValueConfig old = this._sVC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSVCChanging(e);
                    this.OnPropertyChanging("SVC", e, _sVCReference);
                    this._sVC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSVC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSVC;
                    }
                    this.OnSVCChanged(e);
                    this.OnPropertyChanged("SVC", e, _sVCReference);
                }
            }
        }
        
        /// <summary>
        /// The minVal property
        /// </summary>
        [XmlElementNameAttribute("minVal")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue MinVal
        {
            get
            {
                return this._minVal;
            }
            set
            {
                if ((this._minVal != value))
                {
                    IAnalogueValue old = this._minVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinValChanging(e);
                    this.OnPropertyChanging("MinVal", e, _minValReference);
                    this._minVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinVal;
                    }
                    this.OnMinValChanged(e);
                    this.OnPropertyChanged("MinVal", e, _minValReference);
                }
            }
        }
        
        /// <summary>
        /// The maxVal property
        /// </summary>
        [XmlElementNameAttribute("maxVal")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue MaxVal
        {
            get
            {
                return this._maxVal;
            }
            set
            {
                if ((this._maxVal != value))
                {
                    IAnalogueValue old = this._maxVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxValChanging(e);
                    this.OnPropertyChanging("MaxVal", e, _maxValReference);
                    this._maxVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxVal;
                    }
                    this.OnMaxValChanged(e);
                    this.OnPropertyChanged("MaxVal", e, _maxValReference);
                }
            }
        }
        
        /// <summary>
        /// The stepSize property
        /// </summary>
        [XmlElementNameAttribute("stepSize")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue StepSize
        {
            get
            {
                return this._stepSize;
            }
            set
            {
                if ((this._stepSize != value))
                {
                    IAnalogueValue old = this._stepSize;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStepSizeChanging(e);
                    this.OnPropertyChanging("StepSize", e, _stepSizeReference);
                    this._stepSize = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStepSize;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStepSize;
                    }
                    this.OnStepSizeChanged(e);
                    this.OnPropertyChanged("StepSize", e, _stepSizeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new APCReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/APC")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the D property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DChanging;
        
        /// <summary>
        /// Gets fired when the D property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DChanged;
        
        /// <summary>
        /// Gets fired before the DU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DUChanging;
        
        /// <summary>
        /// Gets fired when the DU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DUChanged;
        
        /// <summary>
        /// Gets fired before the SetMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetMagChanging;
        
        /// <summary>
        /// Gets fired when the SetMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetMagChanged;
        
        /// <summary>
        /// Gets fired before the Origin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OriginChanging;
        
        /// <summary>
        /// Gets fired when the Origin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OriginChanged;
        
        /// <summary>
        /// Gets fired before the OperTm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperTmChanging;
        
        /// <summary>
        /// Gets fired when the OperTm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperTmChanged;
        
        /// <summary>
        /// Gets fired before the Q property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanging;
        
        /// <summary>
        /// Gets fired when the Q property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanged;
        
        /// <summary>
        /// Gets fired before the T property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TChanging;
        
        /// <summary>
        /// Gets fired when the T property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TChanged;
        
        /// <summary>
        /// Gets fired before the CtlModel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlModelChanging;
        
        /// <summary>
        /// Gets fired when the CtlModel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlModelChanged;
        
        /// <summary>
        /// Gets fired before the Units property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanging;
        
        /// <summary>
        /// Gets fired when the Units property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanged;
        
        /// <summary>
        /// Gets fired before the SVC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SVCChanging;
        
        /// <summary>
        /// Gets fired when the SVC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SVCChanged;
        
        /// <summary>
        /// Gets fired before the MinVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValChanging;
        
        /// <summary>
        /// Gets fired when the MinVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValChanged;
        
        /// <summary>
        /// Gets fired before the MaxVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValChanging;
        
        /// <summary>
        /// Gets fired when the MaxVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValChanged;
        
        /// <summary>
        /// Gets fired before the StepSize property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepSizeChanging;
        
        /// <summary>
        /// Gets fired when the StepSize property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepSizeChanged;
        
        private static ITypedElement RetrieveDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("d")));
        }
        
        /// <summary>
        /// Raises the DChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("dU")));
        }
        
        /// <summary>
        /// Raises the DUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSetMagReference()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("setMag")));
        }
        
        /// <summary>
        /// Raises the SetMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SetMag property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetMag(object sender, System.EventArgs eventArgs)
        {
            this.SetMag = null;
        }
        
        private static ITypedElement RetrieveOriginReference()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("origin")));
        }
        
        /// <summary>
        /// Raises the OriginChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOriginChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OriginChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OriginChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOriginChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OriginChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Origin property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOrigin(object sender, System.EventArgs eventArgs)
        {
            this.Origin = null;
        }
        
        private static ITypedElement RetrieveOperTmReference()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("operTm")));
        }
        
        /// <summary>
        /// Raises the OperTmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperTmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperTmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperTmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperTmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperTmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OperTm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOperTm(object sender, System.EventArgs eventArgs)
        {
            this.OperTm = null;
        }
        
        private static ITypedElement RetrieveQReference()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("q")));
        }
        
        /// <summary>
        /// Raises the QChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Q property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetQ(object sender, System.EventArgs eventArgs)
        {
            this.Q = null;
        }
        
        private static ITypedElement RetrieveTReference()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("t")));
        }
        
        /// <summary>
        /// Raises the TChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the T property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetT(object sender, System.EventArgs eventArgs)
        {
            this.T = null;
        }
        
        private static ITypedElement RetrieveCtlModelReference()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("ctlModel")));
        }
        
        /// <summary>
        /// Raises the CtlModelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlModelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlModelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CtlModelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlModelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlModelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CtlModel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCtlModel(object sender, System.EventArgs eventArgs)
        {
            this.CtlModel = null;
        }
        
        private static ITypedElement RetrieveUnitsReference()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("units")));
        }
        
        /// <summary>
        /// Raises the UnitsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Units property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnits(object sender, System.EventArgs eventArgs)
        {
            this.Units = null;
        }
        
        private static ITypedElement RetrieveSVCReference()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("sVC")));
        }
        
        /// <summary>
        /// Raises the SVCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSVCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SVCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SVCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSVCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SVCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SVC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSVC(object sender, System.EventArgs eventArgs)
        {
            this.SVC = null;
        }
        
        private static ITypedElement RetrieveMinValReference()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("minVal")));
        }
        
        /// <summary>
        /// Raises the MinValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinVal(object sender, System.EventArgs eventArgs)
        {
            this.MinVal = null;
        }
        
        private static ITypedElement RetrieveMaxValReference()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("maxVal")));
        }
        
        /// <summary>
        /// Raises the MaxValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxVal(object sender, System.EventArgs eventArgs)
        {
            this.MaxVal = null;
        }
        
        private static ITypedElement RetrieveStepSizeReference()
        {
            return ((ITypedElement)(((ModelElement)(APC.ClassInstance)).Resolve("stepSize")));
        }
        
        /// <summary>
        /// Raises the StepSizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepSizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepSizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepSizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepSizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepSizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StepSize property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStepSize(object sender, System.EventArgs eventArgs)
        {
            this.StepSize = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "D"))
            {
                return this.D;
            }
            if ((attribute == "DU"))
            {
                return this.DU;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SETMAG"))
            {
                this.SetMag = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "ORIGIN"))
            {
                this.Origin = ((IOriginator)(value));
                return;
            }
            if ((feature == "OPERTM"))
            {
                this.OperTm = ((ITimeStamp)(value));
                return;
            }
            if ((feature == "Q"))
            {
                this.Q = ((IQuality)(value));
                return;
            }
            if ((feature == "T"))
            {
                this.T = ((ITimeStamp)(value));
                return;
            }
            if ((feature == "CTLMODEL"))
            {
                this.CtlModel = ((ICtlModels)(value));
                return;
            }
            if ((feature == "UNITS"))
            {
                this.Units = ((IUnits)(value));
                return;
            }
            if ((feature == "SVC"))
            {
                this.SVC = ((IScaledValueConfig)(value));
                return;
            }
            if ((feature == "MINVAL"))
            {
                this.MinVal = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "MAXVAL"))
            {
                this.MaxVal = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "STEPSIZE"))
            {
                this.StepSize = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "D"))
            {
                this.D = ((string)(value));
                return;
            }
            if ((feature == "DU"))
            {
                this.DU = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SetMag"))
            {
                return new SetMagProxy(this);
            }
            if ((attribute == "Origin"))
            {
                return new OriginProxy(this);
            }
            if ((attribute == "OperTm"))
            {
                return new OperTmProxy(this);
            }
            if ((attribute == "Q"))
            {
                return new QProxy(this);
            }
            if ((attribute == "T"))
            {
                return new TProxy(this);
            }
            if ((attribute == "CtlModel"))
            {
                return new CtlModelProxy(this);
            }
            if ((attribute == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((attribute == "SVC"))
            {
                return new SVCProxy(this);
            }
            if ((attribute == "MinVal"))
            {
                return new MinValProxy(this);
            }
            if ((attribute == "MaxVal"))
            {
                return new MaxValProxy(this);
            }
            if ((attribute == "StepSize"))
            {
                return new StepSizeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SetMag"))
            {
                return new SetMagProxy(this);
            }
            if ((reference == "Origin"))
            {
                return new OriginProxy(this);
            }
            if ((reference == "OperTm"))
            {
                return new OperTmProxy(this);
            }
            if ((reference == "Q"))
            {
                return new QProxy(this);
            }
            if ((reference == "T"))
            {
                return new TProxy(this);
            }
            if ((reference == "CtlModel"))
            {
                return new CtlModelProxy(this);
            }
            if ((reference == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((reference == "SVC"))
            {
                return new SVCProxy(this);
            }
            if ((reference == "MinVal"))
            {
                return new MinValProxy(this);
            }
            if ((reference == "MaxVal"))
            {
                return new MaxValProxy(this);
            }
            if ((reference == "StepSize"))
            {
                return new StepSizeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/APC")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the APC class
        /// </summary>
        public class APCReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private APC _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public APCReferencedElementsCollection(APC parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SetMag != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Origin != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OperTm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Q != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.T != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CtlModel != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Units != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SVC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StepSize != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SetMagChanged += this.PropagateValueChanges;
                this._parent.OriginChanged += this.PropagateValueChanges;
                this._parent.OperTmChanged += this.PropagateValueChanges;
                this._parent.QChanged += this.PropagateValueChanges;
                this._parent.TChanged += this.PropagateValueChanges;
                this._parent.CtlModelChanged += this.PropagateValueChanges;
                this._parent.UnitsChanged += this.PropagateValueChanges;
                this._parent.SVCChanged += this.PropagateValueChanges;
                this._parent.MinValChanged += this.PropagateValueChanges;
                this._parent.MaxValChanged += this.PropagateValueChanges;
                this._parent.StepSizeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SetMagChanged -= this.PropagateValueChanges;
                this._parent.OriginChanged -= this.PropagateValueChanges;
                this._parent.OperTmChanged -= this.PropagateValueChanges;
                this._parent.QChanged -= this.PropagateValueChanges;
                this._parent.TChanged -= this.PropagateValueChanges;
                this._parent.CtlModelChanged -= this.PropagateValueChanges;
                this._parent.UnitsChanged -= this.PropagateValueChanges;
                this._parent.SVCChanged -= this.PropagateValueChanges;
                this._parent.MinValChanged -= this.PropagateValueChanges;
                this._parent.MaxValChanged -= this.PropagateValueChanges;
                this._parent.StepSizeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SetMag == null))
                {
                    IAnalogueValue setMagCasted = item.As<IAnalogueValue>();
                    if ((setMagCasted != null))
                    {
                        this._parent.SetMag = setMagCasted;
                        return;
                    }
                }
                if ((this._parent.Origin == null))
                {
                    IOriginator originCasted = item.As<IOriginator>();
                    if ((originCasted != null))
                    {
                        this._parent.Origin = originCasted;
                        return;
                    }
                }
                if ((this._parent.OperTm == null))
                {
                    ITimeStamp operTmCasted = item.As<ITimeStamp>();
                    if ((operTmCasted != null))
                    {
                        this._parent.OperTm = operTmCasted;
                        return;
                    }
                }
                if ((this._parent.Q == null))
                {
                    IQuality qCasted = item.As<IQuality>();
                    if ((qCasted != null))
                    {
                        this._parent.Q = qCasted;
                        return;
                    }
                }
                if ((this._parent.T == null))
                {
                    ITimeStamp tCasted = item.As<ITimeStamp>();
                    if ((tCasted != null))
                    {
                        this._parent.T = tCasted;
                        return;
                    }
                }
                if ((this._parent.CtlModel == null))
                {
                    ICtlModels ctlModelCasted = item.As<ICtlModels>();
                    if ((ctlModelCasted != null))
                    {
                        this._parent.CtlModel = ctlModelCasted;
                        return;
                    }
                }
                if ((this._parent.Units == null))
                {
                    IUnits unitsCasted = item.As<IUnits>();
                    if ((unitsCasted != null))
                    {
                        this._parent.Units = unitsCasted;
                        return;
                    }
                }
                if ((this._parent.SVC == null))
                {
                    IScaledValueConfig sVCCasted = item.As<IScaledValueConfig>();
                    if ((sVCCasted != null))
                    {
                        this._parent.SVC = sVCCasted;
                        return;
                    }
                }
                if ((this._parent.MinVal == null))
                {
                    IAnalogueValue minValCasted = item.As<IAnalogueValue>();
                    if ((minValCasted != null))
                    {
                        this._parent.MinVal = minValCasted;
                        return;
                    }
                }
                if ((this._parent.MaxVal == null))
                {
                    IAnalogueValue maxValCasted = item.As<IAnalogueValue>();
                    if ((maxValCasted != null))
                    {
                        this._parent.MaxVal = maxValCasted;
                        return;
                    }
                }
                if ((this._parent.StepSize == null))
                {
                    IAnalogueValue stepSizeCasted = item.As<IAnalogueValue>();
                    if ((stepSizeCasted != null))
                    {
                        this._parent.StepSize = stepSizeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SetMag = null;
                this._parent.Origin = null;
                this._parent.OperTm = null;
                this._parent.Q = null;
                this._parent.T = null;
                this._parent.CtlModel = null;
                this._parent.Units = null;
                this._parent.SVC = null;
                this._parent.MinVal = null;
                this._parent.MaxVal = null;
                this._parent.StepSize = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SetMag))
                {
                    return true;
                }
                if ((item == this._parent.Origin))
                {
                    return true;
                }
                if ((item == this._parent.OperTm))
                {
                    return true;
                }
                if ((item == this._parent.Q))
                {
                    return true;
                }
                if ((item == this._parent.T))
                {
                    return true;
                }
                if ((item == this._parent.CtlModel))
                {
                    return true;
                }
                if ((item == this._parent.Units))
                {
                    return true;
                }
                if ((item == this._parent.SVC))
                {
                    return true;
                }
                if ((item == this._parent.MinVal))
                {
                    return true;
                }
                if ((item == this._parent.MaxVal))
                {
                    return true;
                }
                if ((item == this._parent.StepSize))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SetMag != null))
                {
                    array[arrayIndex] = this._parent.SetMag;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Origin != null))
                {
                    array[arrayIndex] = this._parent.Origin;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OperTm != null))
                {
                    array[arrayIndex] = this._parent.OperTm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Q != null))
                {
                    array[arrayIndex] = this._parent.Q;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.T != null))
                {
                    array[arrayIndex] = this._parent.T;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CtlModel != null))
                {
                    array[arrayIndex] = this._parent.CtlModel;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Units != null))
                {
                    array[arrayIndex] = this._parent.Units;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SVC != null))
                {
                    array[arrayIndex] = this._parent.SVC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinVal != null))
                {
                    array[arrayIndex] = this._parent.MinVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxVal != null))
                {
                    array[arrayIndex] = this._parent.MaxVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StepSize != null))
                {
                    array[arrayIndex] = this._parent.StepSize;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SetMag == item))
                {
                    this._parent.SetMag = null;
                    return true;
                }
                if ((this._parent.Origin == item))
                {
                    this._parent.Origin = null;
                    return true;
                }
                if ((this._parent.OperTm == item))
                {
                    this._parent.OperTm = null;
                    return true;
                }
                if ((this._parent.Q == item))
                {
                    this._parent.Q = null;
                    return true;
                }
                if ((this._parent.T == item))
                {
                    this._parent.T = null;
                    return true;
                }
                if ((this._parent.CtlModel == item))
                {
                    this._parent.CtlModel = null;
                    return true;
                }
                if ((this._parent.Units == item))
                {
                    this._parent.Units = null;
                    return true;
                }
                if ((this._parent.SVC == item))
                {
                    this._parent.SVC = null;
                    return true;
                }
                if ((this._parent.MinVal == item))
                {
                    this._parent.MinVal = null;
                    return true;
                }
                if ((this._parent.MaxVal == item))
                {
                    this._parent.MaxVal = null;
                    return true;
                }
                if ((this._parent.StepSize == item))
                {
                    this._parent.StepSize = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SetMag).Concat(this._parent.Origin).Concat(this._parent.OperTm).Concat(this._parent.Q).Concat(this._parent.T).Concat(this._parent.CtlModel).Concat(this._parent.Units).Concat(this._parent.SVC).Concat(this._parent.MinVal).Concat(this._parent.MaxVal).Concat(this._parent.StepSize).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the d property
        /// </summary>
        private sealed class DProxy : ModelPropertyChange<IAPC, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DProxy(IAPC modelElement) : 
                    base(modelElement, "d")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.D;
                }
                set
                {
                    this.ModelElement.D = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dU property
        /// </summary>
        private sealed class DUProxy : ModelPropertyChange<IAPC, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DUProxy(IAPC modelElement) : 
                    base(modelElement, "dU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DU;
                }
                set
                {
                    this.ModelElement.DU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the setMag property
        /// </summary>
        private sealed class SetMagProxy : ModelPropertyChange<IAPC, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetMagProxy(IAPC modelElement) : 
                    base(modelElement, "setMag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.SetMag;
                }
                set
                {
                    this.ModelElement.SetMag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the origin property
        /// </summary>
        private sealed class OriginProxy : ModelPropertyChange<IAPC, IOriginator>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OriginProxy(IAPC modelElement) : 
                    base(modelElement, "origin")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOriginator Value
            {
                get
                {
                    return this.ModelElement.Origin;
                }
                set
                {
                    this.ModelElement.Origin = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operTm property
        /// </summary>
        private sealed class OperTmProxy : ModelPropertyChange<IAPC, ITimeStamp>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperTmProxy(IAPC modelElement) : 
                    base(modelElement, "operTm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeStamp Value
            {
                get
                {
                    return this.ModelElement.OperTm;
                }
                set
                {
                    this.ModelElement.OperTm = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the q property
        /// </summary>
        private sealed class QProxy : ModelPropertyChange<IAPC, IQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QProxy(IAPC modelElement) : 
                    base(modelElement, "q")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IQuality Value
            {
                get
                {
                    return this.ModelElement.Q;
                }
                set
                {
                    this.ModelElement.Q = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the t property
        /// </summary>
        private sealed class TProxy : ModelPropertyChange<IAPC, ITimeStamp>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TProxy(IAPC modelElement) : 
                    base(modelElement, "t")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeStamp Value
            {
                get
                {
                    return this.ModelElement.T;
                }
                set
                {
                    this.ModelElement.T = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ctlModel property
        /// </summary>
        private sealed class CtlModelProxy : ModelPropertyChange<IAPC, ICtlModels>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CtlModelProxy(IAPC modelElement) : 
                    base(modelElement, "ctlModel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICtlModels Value
            {
                get
                {
                    return this.ModelElement.CtlModel;
                }
                set
                {
                    this.ModelElement.CtlModel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the units property
        /// </summary>
        private sealed class UnitsProxy : ModelPropertyChange<IAPC, IUnits>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitsProxy(IAPC modelElement) : 
                    base(modelElement, "units")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUnits Value
            {
                get
                {
                    return this.ModelElement.Units;
                }
                set
                {
                    this.ModelElement.Units = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sVC property
        /// </summary>
        private sealed class SVCProxy : ModelPropertyChange<IAPC, IScaledValueConfig>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SVCProxy(IAPC modelElement) : 
                    base(modelElement, "sVC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IScaledValueConfig Value
            {
                get
                {
                    return this.ModelElement.SVC;
                }
                set
                {
                    this.ModelElement.SVC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minVal property
        /// </summary>
        private sealed class MinValProxy : ModelPropertyChange<IAPC, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinValProxy(IAPC modelElement) : 
                    base(modelElement, "minVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.MinVal;
                }
                set
                {
                    this.ModelElement.MinVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxVal property
        /// </summary>
        private sealed class MaxValProxy : ModelPropertyChange<IAPC, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxValProxy(IAPC modelElement) : 
                    base(modelElement, "maxVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.MaxVal;
                }
                set
                {
                    this.ModelElement.MaxVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stepSize property
        /// </summary>
        private sealed class StepSizeProxy : ModelPropertyChange<IAPC, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StepSizeProxy(IAPC modelElement) : 
                    base(modelElement, "stepSize")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.StepSize;
                }
                set
                {
                    this.ModelElement.StepSize = value;
                }
            }
        }
    }
}

