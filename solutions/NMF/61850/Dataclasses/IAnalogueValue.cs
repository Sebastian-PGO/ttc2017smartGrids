//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The public interface for AnalogueValue
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AnalogueValue))]
    [XmlDefaultImplementationTypeAttribute(typeof(AnalogueValue))]
    public interface IAnalogueValue : IModelElement
    {
        
        /// <summary>
        /// The i property
        /// </summary>
        Nullable<int> I
        {
            get;
            set;
        }
        
        /// <summary>
        /// The f property
        /// </summary>
        Nullable<float> F
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the I property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IChanging;
        
        /// <summary>
        /// Gets fired when the I property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IChanged;
        
        /// <summary>
        /// Gets fired before the F property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FChanging;
        
        /// <summary>
        /// Gets fired when the F property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FChanged;
    }
}

