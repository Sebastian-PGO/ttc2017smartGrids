using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard
{
    
    
    /// <summary>
    /// The default implementation of the Substandard class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard")]
    [XmlNamespacePrefixAttribute("sub")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Su" +
        "bstandard")]
    public partial class Substandard : ModelElement, ISubstandard, IModelElement
    {
        
        private static Lazy<ITypedElement> _lNReference = new Lazy<ITypedElement>(RetrieveLNReference);
        
        /// <summary>
        /// The backing field for the LN property
        /// </summary>
        private ObservableCompositionOrderedSet<IDomainLN> _lN;
        
        private static Lazy<ITypedElement> _namePltReference = new Lazy<ITypedElement>(RetrieveNamePltReference);
        
        /// <summary>
        /// The backing field for the NamePlt property
        /// </summary>
        private ObservableCompositionOrderedSet<ILPL> _namePlt;
        
        private static Lazy<ITypedElement> _lPLReference = new Lazy<ITypedElement>(RetrieveLPLReference);
        
        /// <summary>
        /// The backing field for the LPL property
        /// </summary>
        private ObservableCompositionOrderedSet<ILPL> _lPL;
        
        private static Lazy<ITypedElement> _dPCReference = new Lazy<ITypedElement>(RetrieveDPCReference);
        
        /// <summary>
        /// The backing field for the DPC property
        /// </summary>
        private ObservableCompositionOrderedSet<IDPC> _dPC;
        
        private static Lazy<ITypedElement> _aCTReference = new Lazy<ITypedElement>(RetrieveACTReference);
        
        /// <summary>
        /// The backing field for the ACT property
        /// </summary>
        private ObservableCompositionOrderedSet<IACT> _aCT;
        
        private static Lazy<ITypedElement> _sPSReference = new Lazy<ITypedElement>(RetrieveSPSReference);
        
        /// <summary>
        /// The backing field for the SPS property
        /// </summary>
        private ObservableCompositionOrderedSet<ISPS> _sPS;
        
        private static Lazy<ITypedElement> _bSCReference = new Lazy<ITypedElement>(RetrieveBSCReference);
        
        /// <summary>
        /// The backing field for the BSC property
        /// </summary>
        private ObservableCompositionOrderedSet<IBSC> _bSC;
        
        private static Lazy<ITypedElement> _iSCReference = new Lazy<ITypedElement>(RetrieveISCReference);
        
        /// <summary>
        /// The backing field for the ISC property
        /// </summary>
        private ObservableCompositionOrderedSet<IISC> _iSC;
        
        private static Lazy<ITypedElement> _sPCReference = new Lazy<ITypedElement>(RetrieveSPCReference);
        
        /// <summary>
        /// The backing field for the SPC property
        /// </summary>
        private ObservableCompositionOrderedSet<ISPC> _sPC;
        
        private static Lazy<ITypedElement> _mVReference = new Lazy<ITypedElement>(RetrieveMVReference);
        
        /// <summary>
        /// The backing field for the MV property
        /// </summary>
        private ObservableCompositionOrderedSet<IMV> _mV;
        
        private static Lazy<ITypedElement> _iNSReference = new Lazy<ITypedElement>(RetrieveINSReference);
        
        /// <summary>
        /// The backing field for the INS property
        /// </summary>
        private ObservableCompositionOrderedSet<IINS> _iNS;
        
        private static Lazy<ITypedElement> _aSGReference = new Lazy<ITypedElement>(RetrieveASGReference);
        
        /// <summary>
        /// The backing field for the ASG property
        /// </summary>
        private ObservableCompositionOrderedSet<IASG> _aSG;
        
        private static Lazy<ITypedElement> _wYEReference = new Lazy<ITypedElement>(RetrieveWYEReference);
        
        /// <summary>
        /// The backing field for the WYE property
        /// </summary>
        private ObservableCompositionOrderedSet<IWYE> _wYE;
        
        private static Lazy<ITypedElement> _dPStatusReference = new Lazy<ITypedElement>(RetrieveDPStatusReference);
        
        /// <summary>
        /// The backing field for the DPStatus property
        /// </summary>
        private ObservableCompositionOrderedSet<IDPStatus> _dPStatus;
        
        private static Lazy<ITypedElement> _analogueValueReference = new Lazy<ITypedElement>(RetrieveAnalogueValueReference);
        
        /// <summary>
        /// The backing field for the AnalogueValue property
        /// </summary>
        private ObservableCompositionOrderedSet<IAnalogueValue> _analogueValue;
        
        private static Lazy<ITypedElement> _cMVReference = new Lazy<ITypedElement>(RetrieveCMVReference);
        
        /// <summary>
        /// The backing field for the CMV property
        /// </summary>
        private ObservableCompositionOrderedSet<ICMV> _cMV;
        
        private static Lazy<ITypedElement> _valWithTransReference = new Lazy<ITypedElement>(RetrieveValWithTransReference);
        
        /// <summary>
        /// The backing field for the ValWithTrans property
        /// </summary>
        private ObservableCompositionOrderedSet<IValWithTrans> _valWithTrans;
        
        private static Lazy<ITypedElement> _bSControlReference = new Lazy<ITypedElement>(RetrieveBSControlReference);
        
        /// <summary>
        /// The backing field for the BSControl property
        /// </summary>
        private ObservableCompositionOrderedSet<IBSControl> _bSControl;
        
        private static Lazy<ITypedElement> _vectorReference = new Lazy<ITypedElement>(RetrieveVectorReference);
        
        /// <summary>
        /// The backing field for the Vector property
        /// </summary>
        private ObservableCompositionOrderedSet<IVector> _vector;
        
        private static IClass _classInstance;
        
        public Substandard()
        {
            this._lN = new ObservableCompositionOrderedSet<IDomainLN>(this);
            this._lN.CollectionChanging += this.LNCollectionChanging;
            this._lN.CollectionChanged += this.LNCollectionChanged;
            this._namePlt = new ObservableCompositionOrderedSet<ILPL>(this);
            this._namePlt.CollectionChanging += this.NamePltCollectionChanging;
            this._namePlt.CollectionChanged += this.NamePltCollectionChanged;
            this._lPL = new ObservableCompositionOrderedSet<ILPL>(this);
            this._lPL.CollectionChanging += this.LPLCollectionChanging;
            this._lPL.CollectionChanged += this.LPLCollectionChanged;
            this._dPC = new ObservableCompositionOrderedSet<IDPC>(this);
            this._dPC.CollectionChanging += this.DPCCollectionChanging;
            this._dPC.CollectionChanged += this.DPCCollectionChanged;
            this._aCT = new ObservableCompositionOrderedSet<IACT>(this);
            this._aCT.CollectionChanging += this.ACTCollectionChanging;
            this._aCT.CollectionChanged += this.ACTCollectionChanged;
            this._sPS = new ObservableCompositionOrderedSet<ISPS>(this);
            this._sPS.CollectionChanging += this.SPSCollectionChanging;
            this._sPS.CollectionChanged += this.SPSCollectionChanged;
            this._bSC = new ObservableCompositionOrderedSet<IBSC>(this);
            this._bSC.CollectionChanging += this.BSCCollectionChanging;
            this._bSC.CollectionChanged += this.BSCCollectionChanged;
            this._iSC = new ObservableCompositionOrderedSet<IISC>(this);
            this._iSC.CollectionChanging += this.ISCCollectionChanging;
            this._iSC.CollectionChanged += this.ISCCollectionChanged;
            this._sPC = new ObservableCompositionOrderedSet<ISPC>(this);
            this._sPC.CollectionChanging += this.SPCCollectionChanging;
            this._sPC.CollectionChanged += this.SPCCollectionChanged;
            this._mV = new ObservableCompositionOrderedSet<IMV>(this);
            this._mV.CollectionChanging += this.MVCollectionChanging;
            this._mV.CollectionChanged += this.MVCollectionChanged;
            this._iNS = new ObservableCompositionOrderedSet<IINS>(this);
            this._iNS.CollectionChanging += this.INSCollectionChanging;
            this._iNS.CollectionChanged += this.INSCollectionChanged;
            this._aSG = new ObservableCompositionOrderedSet<IASG>(this);
            this._aSG.CollectionChanging += this.ASGCollectionChanging;
            this._aSG.CollectionChanged += this.ASGCollectionChanged;
            this._wYE = new ObservableCompositionOrderedSet<IWYE>(this);
            this._wYE.CollectionChanging += this.WYECollectionChanging;
            this._wYE.CollectionChanged += this.WYECollectionChanged;
            this._dPStatus = new ObservableCompositionOrderedSet<IDPStatus>(this);
            this._dPStatus.CollectionChanging += this.DPStatusCollectionChanging;
            this._dPStatus.CollectionChanged += this.DPStatusCollectionChanged;
            this._analogueValue = new ObservableCompositionOrderedSet<IAnalogueValue>(this);
            this._analogueValue.CollectionChanging += this.AnalogueValueCollectionChanging;
            this._analogueValue.CollectionChanged += this.AnalogueValueCollectionChanged;
            this._cMV = new ObservableCompositionOrderedSet<ICMV>(this);
            this._cMV.CollectionChanging += this.CMVCollectionChanging;
            this._cMV.CollectionChanged += this.CMVCollectionChanged;
            this._valWithTrans = new ObservableCompositionOrderedSet<IValWithTrans>(this);
            this._valWithTrans.CollectionChanging += this.ValWithTransCollectionChanging;
            this._valWithTrans.CollectionChanged += this.ValWithTransCollectionChanged;
            this._bSControl = new ObservableCompositionOrderedSet<IBSControl>(this);
            this._bSControl.CollectionChanging += this.BSControlCollectionChanging;
            this._bSControl.CollectionChanged += this.BSControlCollectionChanged;
            this._vector = new ObservableCompositionOrderedSet<IVector>(this);
            this._vector.CollectionChanging += this.VectorCollectionChanging;
            this._vector.CollectionChanged += this.VectorCollectionChanged;
        }
        
        /// <summary>
        /// The LN property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDomainLN> LN
        {
            get
            {
                return this._lN;
            }
        }
        
        /// <summary>
        /// The NamePlt property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILPL> NamePlt
        {
            get
            {
                return this._namePlt;
            }
        }
        
        /// <summary>
        /// The LPL property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILPL> LPL
        {
            get
            {
                return this._lPL;
            }
        }
        
        /// <summary>
        /// The DPC property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDPC> DPC
        {
            get
            {
                return this._dPC;
            }
        }
        
        /// <summary>
        /// The ACT property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IACT> ACT
        {
            get
            {
                return this._aCT;
            }
        }
        
        /// <summary>
        /// The SPS property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISPS> SPS
        {
            get
            {
                return this._sPS;
            }
        }
        
        /// <summary>
        /// The BSC property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBSC> BSC
        {
            get
            {
                return this._bSC;
            }
        }
        
        /// <summary>
        /// The ISC property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IISC> ISC
        {
            get
            {
                return this._iSC;
            }
        }
        
        /// <summary>
        /// The SPC property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISPC> SPC
        {
            get
            {
                return this._sPC;
            }
        }
        
        /// <summary>
        /// The MV property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMV> MV
        {
            get
            {
                return this._mV;
            }
        }
        
        /// <summary>
        /// The INS property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IINS> INS
        {
            get
            {
                return this._iNS;
            }
        }
        
        /// <summary>
        /// The ASG property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IASG> ASG
        {
            get
            {
                return this._aSG;
            }
        }
        
        /// <summary>
        /// The WYE property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWYE> WYE
        {
            get
            {
                return this._wYE;
            }
        }
        
        /// <summary>
        /// The DPStatus property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDPStatus> DPStatus
        {
            get
            {
                return this._dPStatus;
            }
        }
        
        /// <summary>
        /// The AnalogueValue property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAnalogueValue> AnalogueValue
        {
            get
            {
                return this._analogueValue;
            }
        }
        
        /// <summary>
        /// The CMV property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICMV> CMV
        {
            get
            {
                return this._cMV;
            }
        }
        
        /// <summary>
        /// The ValWithTrans property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IValWithTrans> ValWithTrans
        {
            get
            {
                return this._valWithTrans;
            }
        }
        
        /// <summary>
        /// The BSControl property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBSControl> BSControl
        {
            get
            {
                return this._bSControl;
            }
        }
        
        /// <summary>
        /// The Vector property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IVector> Vector
        {
            get
            {
                return this._vector;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new SubstandardChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SubstandardReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Su" +
                            "bstandard")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveLNReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("LN")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LN property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LNCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("LN", e, _lNReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LN property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LNCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LN", e, _lNReference);
        }
        
        private static ITypedElement RetrieveNamePltReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("NamePlt")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NamePlt property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NamePltCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("NamePlt", e, _namePltReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NamePlt property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NamePltCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NamePlt", e, _namePltReference);
        }
        
        private static ITypedElement RetrieveLPLReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("LPL")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LPL property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LPLCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("LPL", e, _lPLReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LPL property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LPLCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LPL", e, _lPLReference);
        }
        
        private static ITypedElement RetrieveDPCReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("DPC")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DPC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DPCCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DPC", e, _dPCReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DPC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DPCCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DPC", e, _dPCReference);
        }
        
        private static ITypedElement RetrieveACTReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("ACT")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ACT property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ACTCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ACT", e, _aCTReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ACT property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ACTCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ACT", e, _aCTReference);
        }
        
        private static ITypedElement RetrieveSPSReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("SPS")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SPS property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SPSCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("SPS", e, _sPSReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SPS property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SPSCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SPS", e, _sPSReference);
        }
        
        private static ITypedElement RetrieveBSCReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("BSC")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BSC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BSCCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("BSC", e, _bSCReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BSC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BSCCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BSC", e, _bSCReference);
        }
        
        private static ITypedElement RetrieveISCReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("ISC")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ISC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ISCCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ISC", e, _iSCReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ISC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ISCCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ISC", e, _iSCReference);
        }
        
        private static ITypedElement RetrieveSPCReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("SPC")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SPC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SPCCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("SPC", e, _sPCReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SPC property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SPCCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SPC", e, _sPCReference);
        }
        
        private static ITypedElement RetrieveMVReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("MV")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MV property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MVCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MV", e, _mVReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MV property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MVCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MV", e, _mVReference);
        }
        
        private static ITypedElement RetrieveINSReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("INS")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the INS property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void INSCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("INS", e, _iNSReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the INS property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void INSCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("INS", e, _iNSReference);
        }
        
        private static ITypedElement RetrieveASGReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("ASG")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ASG property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ASGCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ASG", e, _aSGReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ASG property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ASGCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ASG", e, _aSGReference);
        }
        
        private static ITypedElement RetrieveWYEReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("WYE")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WYE property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WYECollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WYE", e, _wYEReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WYE property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WYECollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WYE", e, _wYEReference);
        }
        
        private static ITypedElement RetrieveDPStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("DPStatus")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DPStatus property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DPStatusCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DPStatus", e, _dPStatusReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DPStatus property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DPStatusCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DPStatus", e, _dPStatusReference);
        }
        
        private static ITypedElement RetrieveAnalogueValueReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("AnalogueValue")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AnalogueValue property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AnalogueValueCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("AnalogueValue", e, _analogueValueReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AnalogueValue property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AnalogueValueCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AnalogueValue", e, _analogueValueReference);
        }
        
        private static ITypedElement RetrieveCMVReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("CMV")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CMV property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CMVCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CMV", e, _cMVReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CMV property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CMVCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CMV", e, _cMVReference);
        }
        
        private static ITypedElement RetrieveValWithTransReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("ValWithTrans")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ValWithTrans property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ValWithTransCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ValWithTrans", e, _valWithTransReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ValWithTrans property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ValWithTransCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ValWithTrans", e, _valWithTransReference);
        }
        
        private static ITypedElement RetrieveBSControlReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("BSControl")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BSControl property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BSControlCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("BSControl", e, _bSControlReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BSControl property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BSControlCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BSControl", e, _bSControlReference);
        }
        
        private static ITypedElement RetrieveVectorReference()
        {
            return ((ITypedElement)(((ModelElement)(Substandard.ClassInstance)).Resolve("Vector")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Vector property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VectorCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Vector", e, _vectorReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Vector property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VectorCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Vector", e, _vectorReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int lNIndex = ModelHelper.IndexOfReference(this.LN, element);
            if ((lNIndex != -1))
            {
                return ModelHelper.CreatePath("LN", lNIndex);
            }
            int namePltIndex = ModelHelper.IndexOfReference(this.NamePlt, element);
            if ((namePltIndex != -1))
            {
                return ModelHelper.CreatePath("NamePlt", namePltIndex);
            }
            int lPLIndex = ModelHelper.IndexOfReference(this.LPL, element);
            if ((lPLIndex != -1))
            {
                return ModelHelper.CreatePath("LPL", lPLIndex);
            }
            int dPCIndex = ModelHelper.IndexOfReference(this.DPC, element);
            if ((dPCIndex != -1))
            {
                return ModelHelper.CreatePath("DPC", dPCIndex);
            }
            int aCTIndex = ModelHelper.IndexOfReference(this.ACT, element);
            if ((aCTIndex != -1))
            {
                return ModelHelper.CreatePath("ACT", aCTIndex);
            }
            int sPSIndex = ModelHelper.IndexOfReference(this.SPS, element);
            if ((sPSIndex != -1))
            {
                return ModelHelper.CreatePath("SPS", sPSIndex);
            }
            int bSCIndex = ModelHelper.IndexOfReference(this.BSC, element);
            if ((bSCIndex != -1))
            {
                return ModelHelper.CreatePath("BSC", bSCIndex);
            }
            int iSCIndex = ModelHelper.IndexOfReference(this.ISC, element);
            if ((iSCIndex != -1))
            {
                return ModelHelper.CreatePath("ISC", iSCIndex);
            }
            int sPCIndex = ModelHelper.IndexOfReference(this.SPC, element);
            if ((sPCIndex != -1))
            {
                return ModelHelper.CreatePath("SPC", sPCIndex);
            }
            int mVIndex = ModelHelper.IndexOfReference(this.MV, element);
            if ((mVIndex != -1))
            {
                return ModelHelper.CreatePath("MV", mVIndex);
            }
            int iNSIndex = ModelHelper.IndexOfReference(this.INS, element);
            if ((iNSIndex != -1))
            {
                return ModelHelper.CreatePath("INS", iNSIndex);
            }
            int aSGIndex = ModelHelper.IndexOfReference(this.ASG, element);
            if ((aSGIndex != -1))
            {
                return ModelHelper.CreatePath("ASG", aSGIndex);
            }
            int wYEIndex = ModelHelper.IndexOfReference(this.WYE, element);
            if ((wYEIndex != -1))
            {
                return ModelHelper.CreatePath("WYE", wYEIndex);
            }
            int dPStatusIndex = ModelHelper.IndexOfReference(this.DPStatus, element);
            if ((dPStatusIndex != -1))
            {
                return ModelHelper.CreatePath("DPStatus", dPStatusIndex);
            }
            int analogueValueIndex = ModelHelper.IndexOfReference(this.AnalogueValue, element);
            if ((analogueValueIndex != -1))
            {
                return ModelHelper.CreatePath("AnalogueValue", analogueValueIndex);
            }
            int cMVIndex = ModelHelper.IndexOfReference(this.CMV, element);
            if ((cMVIndex != -1))
            {
                return ModelHelper.CreatePath("CMV", cMVIndex);
            }
            int valWithTransIndex = ModelHelper.IndexOfReference(this.ValWithTrans, element);
            if ((valWithTransIndex != -1))
            {
                return ModelHelper.CreatePath("ValWithTrans", valWithTransIndex);
            }
            int bSControlIndex = ModelHelper.IndexOfReference(this.BSControl, element);
            if ((bSControlIndex != -1))
            {
                return ModelHelper.CreatePath("BSControl", bSControlIndex);
            }
            int vectorIndex = ModelHelper.IndexOfReference(this.Vector, element);
            if ((vectorIndex != -1))
            {
                return ModelHelper.CreatePath("Vector", vectorIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "LN"))
            {
                if ((index < this.LN.Count))
                {
                    return this.LN[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "NAMEPLT"))
            {
                if ((index < this.NamePlt.Count))
                {
                    return this.NamePlt[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "LPL"))
            {
                if ((index < this.LPL.Count))
                {
                    return this.LPL[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "DPC"))
            {
                if ((index < this.DPC.Count))
                {
                    return this.DPC[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ACT"))
            {
                if ((index < this.ACT.Count))
                {
                    return this.ACT[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "SPS"))
            {
                if ((index < this.SPS.Count))
                {
                    return this.SPS[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "BSC"))
            {
                if ((index < this.BSC.Count))
                {
                    return this.BSC[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ISC"))
            {
                if ((index < this.ISC.Count))
                {
                    return this.ISC[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "SPC"))
            {
                if ((index < this.SPC.Count))
                {
                    return this.SPC[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "MV"))
            {
                if ((index < this.MV.Count))
                {
                    return this.MV[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "INS"))
            {
                if ((index < this.INS.Count))
                {
                    return this.INS[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ASG"))
            {
                if ((index < this.ASG.Count))
                {
                    return this.ASG[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "WYE"))
            {
                if ((index < this.WYE.Count))
                {
                    return this.WYE[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "DPSTATUS"))
            {
                if ((index < this.DPStatus.Count))
                {
                    return this.DPStatus[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ANALOGUEVALUE"))
            {
                if ((index < this.AnalogueValue.Count))
                {
                    return this.AnalogueValue[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "CMV"))
            {
                if ((index < this.CMV.Count))
                {
                    return this.CMV[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "VALWITHTRANS"))
            {
                if ((index < this.ValWithTrans.Count))
                {
                    return this.ValWithTrans[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "BSCONTROL"))
            {
                if ((index < this.BSControl.Count))
                {
                    return this.BSControl[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "VECTOR"))
            {
                if ((index < this.Vector.Count))
                {
                    return this.Vector[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "LN"))
            {
                return this._lN;
            }
            if ((feature == "NAMEPLT"))
            {
                return this._namePlt;
            }
            if ((feature == "LPL"))
            {
                return this._lPL;
            }
            if ((feature == "DPC"))
            {
                return this._dPC;
            }
            if ((feature == "ACT"))
            {
                return this._aCT;
            }
            if ((feature == "SPS"))
            {
                return this._sPS;
            }
            if ((feature == "BSC"))
            {
                return this._bSC;
            }
            if ((feature == "ISC"))
            {
                return this._iSC;
            }
            if ((feature == "SPC"))
            {
                return this._sPC;
            }
            if ((feature == "MV"))
            {
                return this._mV;
            }
            if ((feature == "INS"))
            {
                return this._iNS;
            }
            if ((feature == "ASG"))
            {
                return this._aSG;
            }
            if ((feature == "WYE"))
            {
                return this._wYE;
            }
            if ((feature == "DPSTATUS"))
            {
                return this._dPStatus;
            }
            if ((feature == "ANALOGUEVALUE"))
            {
                return this._analogueValue;
            }
            if ((feature == "CMV"))
            {
                return this._cMV;
            }
            if ((feature == "VALWITHTRANS"))
            {
                return this._valWithTrans;
            }
            if ((feature == "BSCONTROL"))
            {
                return this._bSControl;
            }
            if ((feature == "VECTOR"))
            {
                return this._vector;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._lN))
            {
                return "LN";
            }
            if ((container == this._namePlt))
            {
                return "NamePlt";
            }
            if ((container == this._lPL))
            {
                return "LPL";
            }
            if ((container == this._dPC))
            {
                return "DPC";
            }
            if ((container == this._aCT))
            {
                return "ACT";
            }
            if ((container == this._sPS))
            {
                return "SPS";
            }
            if ((container == this._bSC))
            {
                return "BSC";
            }
            if ((container == this._iSC))
            {
                return "ISC";
            }
            if ((container == this._sPC))
            {
                return "SPC";
            }
            if ((container == this._mV))
            {
                return "MV";
            }
            if ((container == this._iNS))
            {
                return "INS";
            }
            if ((container == this._aSG))
            {
                return "ASG";
            }
            if ((container == this._wYE))
            {
                return "WYE";
            }
            if ((container == this._dPStatus))
            {
                return "DPStatus";
            }
            if ((container == this._analogueValue))
            {
                return "AnalogueValue";
            }
            if ((container == this._cMV))
            {
                return "CMV";
            }
            if ((container == this._valWithTrans))
            {
                return "ValWithTrans";
            }
            if ((container == this._bSControl))
            {
                return "BSControl";
            }
            if ((container == this._vector))
            {
                return "Vector";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Su" +
                        "bstandard")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Substandard class
        /// </summary>
        public class SubstandardChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Substandard _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SubstandardChildrenCollection(Substandard parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.LN.Count);
                    count = (count + this._parent.NamePlt.Count);
                    count = (count + this._parent.LPL.Count);
                    count = (count + this._parent.DPC.Count);
                    count = (count + this._parent.ACT.Count);
                    count = (count + this._parent.SPS.Count);
                    count = (count + this._parent.BSC.Count);
                    count = (count + this._parent.ISC.Count);
                    count = (count + this._parent.SPC.Count);
                    count = (count + this._parent.MV.Count);
                    count = (count + this._parent.INS.Count);
                    count = (count + this._parent.ASG.Count);
                    count = (count + this._parent.WYE.Count);
                    count = (count + this._parent.DPStatus.Count);
                    count = (count + this._parent.AnalogueValue.Count);
                    count = (count + this._parent.CMV.Count);
                    count = (count + this._parent.ValWithTrans.Count);
                    count = (count + this._parent.BSControl.Count);
                    count = (count + this._parent.Vector.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LN.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NamePlt.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LPL.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DPC.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ACT.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SPS.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BSC.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ISC.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SPC.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MV.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.INS.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ASG.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WYE.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DPStatus.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AnalogueValue.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CMV.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ValWithTrans.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BSControl.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Vector.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LN.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NamePlt.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LPL.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DPC.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ACT.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SPS.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BSC.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ISC.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SPC.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MV.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.INS.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ASG.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WYE.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DPStatus.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AnalogueValue.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CMV.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ValWithTrans.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BSControl.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Vector.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDomainLN lNCasted = item.As<IDomainLN>();
                if ((lNCasted != null))
                {
                    this._parent.LN.Add(lNCasted);
                }
                ILPL namePltCasted = item.As<ILPL>();
                if ((namePltCasted != null))
                {
                    this._parent.NamePlt.Add(namePltCasted);
                }
                ILPL lPLCasted = item.As<ILPL>();
                if ((lPLCasted != null))
                {
                    this._parent.LPL.Add(lPLCasted);
                }
                IDPC dPCCasted = item.As<IDPC>();
                if ((dPCCasted != null))
                {
                    this._parent.DPC.Add(dPCCasted);
                }
                IACT aCTCasted = item.As<IACT>();
                if ((aCTCasted != null))
                {
                    this._parent.ACT.Add(aCTCasted);
                }
                ISPS sPSCasted = item.As<ISPS>();
                if ((sPSCasted != null))
                {
                    this._parent.SPS.Add(sPSCasted);
                }
                IBSC bSCCasted = item.As<IBSC>();
                if ((bSCCasted != null))
                {
                    this._parent.BSC.Add(bSCCasted);
                }
                IISC iSCCasted = item.As<IISC>();
                if ((iSCCasted != null))
                {
                    this._parent.ISC.Add(iSCCasted);
                }
                ISPC sPCCasted = item.As<ISPC>();
                if ((sPCCasted != null))
                {
                    this._parent.SPC.Add(sPCCasted);
                }
                IMV mVCasted = item.As<IMV>();
                if ((mVCasted != null))
                {
                    this._parent.MV.Add(mVCasted);
                }
                IINS iNSCasted = item.As<IINS>();
                if ((iNSCasted != null))
                {
                    this._parent.INS.Add(iNSCasted);
                }
                IASG aSGCasted = item.As<IASG>();
                if ((aSGCasted != null))
                {
                    this._parent.ASG.Add(aSGCasted);
                }
                IWYE wYECasted = item.As<IWYE>();
                if ((wYECasted != null))
                {
                    this._parent.WYE.Add(wYECasted);
                }
                IDPStatus dPStatusCasted = item.As<IDPStatus>();
                if ((dPStatusCasted != null))
                {
                    this._parent.DPStatus.Add(dPStatusCasted);
                }
                IAnalogueValue analogueValueCasted = item.As<IAnalogueValue>();
                if ((analogueValueCasted != null))
                {
                    this._parent.AnalogueValue.Add(analogueValueCasted);
                }
                ICMV cMVCasted = item.As<ICMV>();
                if ((cMVCasted != null))
                {
                    this._parent.CMV.Add(cMVCasted);
                }
                IValWithTrans valWithTransCasted = item.As<IValWithTrans>();
                if ((valWithTransCasted != null))
                {
                    this._parent.ValWithTrans.Add(valWithTransCasted);
                }
                IBSControl bSControlCasted = item.As<IBSControl>();
                if ((bSControlCasted != null))
                {
                    this._parent.BSControl.Add(bSControlCasted);
                }
                IVector vectorCasted = item.As<IVector>();
                if ((vectorCasted != null))
                {
                    this._parent.Vector.Add(vectorCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.LN.Clear();
                this._parent.NamePlt.Clear();
                this._parent.LPL.Clear();
                this._parent.DPC.Clear();
                this._parent.ACT.Clear();
                this._parent.SPS.Clear();
                this._parent.BSC.Clear();
                this._parent.ISC.Clear();
                this._parent.SPC.Clear();
                this._parent.MV.Clear();
                this._parent.INS.Clear();
                this._parent.ASG.Clear();
                this._parent.WYE.Clear();
                this._parent.DPStatus.Clear();
                this._parent.AnalogueValue.Clear();
                this._parent.CMV.Clear();
                this._parent.ValWithTrans.Clear();
                this._parent.BSControl.Clear();
                this._parent.Vector.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.LN.Contains(item))
                {
                    return true;
                }
                if (this._parent.NamePlt.Contains(item))
                {
                    return true;
                }
                if (this._parent.LPL.Contains(item))
                {
                    return true;
                }
                if (this._parent.DPC.Contains(item))
                {
                    return true;
                }
                if (this._parent.ACT.Contains(item))
                {
                    return true;
                }
                if (this._parent.SPS.Contains(item))
                {
                    return true;
                }
                if (this._parent.BSC.Contains(item))
                {
                    return true;
                }
                if (this._parent.ISC.Contains(item))
                {
                    return true;
                }
                if (this._parent.SPC.Contains(item))
                {
                    return true;
                }
                if (this._parent.MV.Contains(item))
                {
                    return true;
                }
                if (this._parent.INS.Contains(item))
                {
                    return true;
                }
                if (this._parent.ASG.Contains(item))
                {
                    return true;
                }
                if (this._parent.WYE.Contains(item))
                {
                    return true;
                }
                if (this._parent.DPStatus.Contains(item))
                {
                    return true;
                }
                if (this._parent.AnalogueValue.Contains(item))
                {
                    return true;
                }
                if (this._parent.CMV.Contains(item))
                {
                    return true;
                }
                if (this._parent.ValWithTrans.Contains(item))
                {
                    return true;
                }
                if (this._parent.BSControl.Contains(item))
                {
                    return true;
                }
                if (this._parent.Vector.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> lNEnumerator = this._parent.LN.GetEnumerator();
                try
                {
                    for (
                    ; lNEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = lNEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    lNEnumerator.Dispose();
                }
                IEnumerator<IModelElement> namePltEnumerator = this._parent.NamePlt.GetEnumerator();
                try
                {
                    for (
                    ; namePltEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = namePltEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    namePltEnumerator.Dispose();
                }
                IEnumerator<IModelElement> lPLEnumerator = this._parent.LPL.GetEnumerator();
                try
                {
                    for (
                    ; lPLEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = lPLEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    lPLEnumerator.Dispose();
                }
                IEnumerator<IModelElement> dPCEnumerator = this._parent.DPC.GetEnumerator();
                try
                {
                    for (
                    ; dPCEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dPCEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dPCEnumerator.Dispose();
                }
                IEnumerator<IModelElement> aCTEnumerator = this._parent.ACT.GetEnumerator();
                try
                {
                    for (
                    ; aCTEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = aCTEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    aCTEnumerator.Dispose();
                }
                IEnumerator<IModelElement> sPSEnumerator = this._parent.SPS.GetEnumerator();
                try
                {
                    for (
                    ; sPSEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = sPSEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sPSEnumerator.Dispose();
                }
                IEnumerator<IModelElement> bSCEnumerator = this._parent.BSC.GetEnumerator();
                try
                {
                    for (
                    ; bSCEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bSCEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bSCEnumerator.Dispose();
                }
                IEnumerator<IModelElement> iSCEnumerator = this._parent.ISC.GetEnumerator();
                try
                {
                    for (
                    ; iSCEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = iSCEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    iSCEnumerator.Dispose();
                }
                IEnumerator<IModelElement> sPCEnumerator = this._parent.SPC.GetEnumerator();
                try
                {
                    for (
                    ; sPCEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = sPCEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sPCEnumerator.Dispose();
                }
                IEnumerator<IModelElement> mVEnumerator = this._parent.MV.GetEnumerator();
                try
                {
                    for (
                    ; mVEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = mVEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    mVEnumerator.Dispose();
                }
                IEnumerator<IModelElement> iNSEnumerator = this._parent.INS.GetEnumerator();
                try
                {
                    for (
                    ; iNSEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = iNSEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    iNSEnumerator.Dispose();
                }
                IEnumerator<IModelElement> aSGEnumerator = this._parent.ASG.GetEnumerator();
                try
                {
                    for (
                    ; aSGEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = aSGEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    aSGEnumerator.Dispose();
                }
                IEnumerator<IModelElement> wYEEnumerator = this._parent.WYE.GetEnumerator();
                try
                {
                    for (
                    ; wYEEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = wYEEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    wYEEnumerator.Dispose();
                }
                IEnumerator<IModelElement> dPStatusEnumerator = this._parent.DPStatus.GetEnumerator();
                try
                {
                    for (
                    ; dPStatusEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dPStatusEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dPStatusEnumerator.Dispose();
                }
                IEnumerator<IModelElement> analogueValueEnumerator = this._parent.AnalogueValue.GetEnumerator();
                try
                {
                    for (
                    ; analogueValueEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = analogueValueEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    analogueValueEnumerator.Dispose();
                }
                IEnumerator<IModelElement> cMVEnumerator = this._parent.CMV.GetEnumerator();
                try
                {
                    for (
                    ; cMVEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cMVEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cMVEnumerator.Dispose();
                }
                IEnumerator<IModelElement> valWithTransEnumerator = this._parent.ValWithTrans.GetEnumerator();
                try
                {
                    for (
                    ; valWithTransEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = valWithTransEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    valWithTransEnumerator.Dispose();
                }
                IEnumerator<IModelElement> bSControlEnumerator = this._parent.BSControl.GetEnumerator();
                try
                {
                    for (
                    ; bSControlEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bSControlEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bSControlEnumerator.Dispose();
                }
                IEnumerator<IModelElement> vectorEnumerator = this._parent.Vector.GetEnumerator();
                try
                {
                    for (
                    ; vectorEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = vectorEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    vectorEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDomainLN domainLNItem = item.As<IDomainLN>();
                if (((domainLNItem != null) 
                            && this._parent.LN.Remove(domainLNItem)))
                {
                    return true;
                }
                ILPL lPLItem = item.As<ILPL>();
                if (((lPLItem != null) 
                            && this._parent.NamePlt.Remove(lPLItem)))
                {
                    return true;
                }
                if (((lPLItem != null) 
                            && this._parent.LPL.Remove(lPLItem)))
                {
                    return true;
                }
                IDPC dPCItem = item.As<IDPC>();
                if (((dPCItem != null) 
                            && this._parent.DPC.Remove(dPCItem)))
                {
                    return true;
                }
                IACT aCTItem = item.As<IACT>();
                if (((aCTItem != null) 
                            && this._parent.ACT.Remove(aCTItem)))
                {
                    return true;
                }
                ISPS sPSItem = item.As<ISPS>();
                if (((sPSItem != null) 
                            && this._parent.SPS.Remove(sPSItem)))
                {
                    return true;
                }
                IBSC bSCItem = item.As<IBSC>();
                if (((bSCItem != null) 
                            && this._parent.BSC.Remove(bSCItem)))
                {
                    return true;
                }
                IISC iSCItem = item.As<IISC>();
                if (((iSCItem != null) 
                            && this._parent.ISC.Remove(iSCItem)))
                {
                    return true;
                }
                ISPC sPCItem = item.As<ISPC>();
                if (((sPCItem != null) 
                            && this._parent.SPC.Remove(sPCItem)))
                {
                    return true;
                }
                IMV mVItem = item.As<IMV>();
                if (((mVItem != null) 
                            && this._parent.MV.Remove(mVItem)))
                {
                    return true;
                }
                IINS iNSItem = item.As<IINS>();
                if (((iNSItem != null) 
                            && this._parent.INS.Remove(iNSItem)))
                {
                    return true;
                }
                IASG aSGItem = item.As<IASG>();
                if (((aSGItem != null) 
                            && this._parent.ASG.Remove(aSGItem)))
                {
                    return true;
                }
                IWYE wYEItem = item.As<IWYE>();
                if (((wYEItem != null) 
                            && this._parent.WYE.Remove(wYEItem)))
                {
                    return true;
                }
                IDPStatus dPStatusItem = item.As<IDPStatus>();
                if (((dPStatusItem != null) 
                            && this._parent.DPStatus.Remove(dPStatusItem)))
                {
                    return true;
                }
                IAnalogueValue analogueValueItem = item.As<IAnalogueValue>();
                if (((analogueValueItem != null) 
                            && this._parent.AnalogueValue.Remove(analogueValueItem)))
                {
                    return true;
                }
                ICMV cMVItem = item.As<ICMV>();
                if (((cMVItem != null) 
                            && this._parent.CMV.Remove(cMVItem)))
                {
                    return true;
                }
                IValWithTrans valWithTransItem = item.As<IValWithTrans>();
                if (((valWithTransItem != null) 
                            && this._parent.ValWithTrans.Remove(valWithTransItem)))
                {
                    return true;
                }
                IBSControl bSControlItem = item.As<IBSControl>();
                if (((bSControlItem != null) 
                            && this._parent.BSControl.Remove(bSControlItem)))
                {
                    return true;
                }
                IVector vectorItem = item.As<IVector>();
                if (((vectorItem != null) 
                            && this._parent.Vector.Remove(vectorItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.LN).Concat(this._parent.NamePlt).Concat(this._parent.LPL).Concat(this._parent.DPC).Concat(this._parent.ACT).Concat(this._parent.SPS).Concat(this._parent.BSC).Concat(this._parent.ISC).Concat(this._parent.SPC).Concat(this._parent.MV).Concat(this._parent.INS).Concat(this._parent.ASG).Concat(this._parent.WYE).Concat(this._parent.DPStatus).Concat(this._parent.AnalogueValue).Concat(this._parent.CMV).Concat(this._parent.ValWithTrans).Concat(this._parent.BSControl).Concat(this._parent.Vector).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Substandard class
        /// </summary>
        public class SubstandardReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Substandard _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SubstandardReferencedElementsCollection(Substandard parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.LN.Count);
                    count = (count + this._parent.NamePlt.Count);
                    count = (count + this._parent.LPL.Count);
                    count = (count + this._parent.DPC.Count);
                    count = (count + this._parent.ACT.Count);
                    count = (count + this._parent.SPS.Count);
                    count = (count + this._parent.BSC.Count);
                    count = (count + this._parent.ISC.Count);
                    count = (count + this._parent.SPC.Count);
                    count = (count + this._parent.MV.Count);
                    count = (count + this._parent.INS.Count);
                    count = (count + this._parent.ASG.Count);
                    count = (count + this._parent.WYE.Count);
                    count = (count + this._parent.DPStatus.Count);
                    count = (count + this._parent.AnalogueValue.Count);
                    count = (count + this._parent.CMV.Count);
                    count = (count + this._parent.ValWithTrans.Count);
                    count = (count + this._parent.BSControl.Count);
                    count = (count + this._parent.Vector.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LN.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NamePlt.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LPL.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DPC.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ACT.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SPS.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BSC.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ISC.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SPC.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MV.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.INS.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ASG.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WYE.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DPStatus.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AnalogueValue.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CMV.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ValWithTrans.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BSControl.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Vector.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LN.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NamePlt.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LPL.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DPC.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ACT.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SPS.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BSC.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ISC.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SPC.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MV.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.INS.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ASG.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WYE.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DPStatus.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AnalogueValue.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CMV.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ValWithTrans.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BSControl.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Vector.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDomainLN lNCasted = item.As<IDomainLN>();
                if ((lNCasted != null))
                {
                    this._parent.LN.Add(lNCasted);
                }
                ILPL namePltCasted = item.As<ILPL>();
                if ((namePltCasted != null))
                {
                    this._parent.NamePlt.Add(namePltCasted);
                }
                ILPL lPLCasted = item.As<ILPL>();
                if ((lPLCasted != null))
                {
                    this._parent.LPL.Add(lPLCasted);
                }
                IDPC dPCCasted = item.As<IDPC>();
                if ((dPCCasted != null))
                {
                    this._parent.DPC.Add(dPCCasted);
                }
                IACT aCTCasted = item.As<IACT>();
                if ((aCTCasted != null))
                {
                    this._parent.ACT.Add(aCTCasted);
                }
                ISPS sPSCasted = item.As<ISPS>();
                if ((sPSCasted != null))
                {
                    this._parent.SPS.Add(sPSCasted);
                }
                IBSC bSCCasted = item.As<IBSC>();
                if ((bSCCasted != null))
                {
                    this._parent.BSC.Add(bSCCasted);
                }
                IISC iSCCasted = item.As<IISC>();
                if ((iSCCasted != null))
                {
                    this._parent.ISC.Add(iSCCasted);
                }
                ISPC sPCCasted = item.As<ISPC>();
                if ((sPCCasted != null))
                {
                    this._parent.SPC.Add(sPCCasted);
                }
                IMV mVCasted = item.As<IMV>();
                if ((mVCasted != null))
                {
                    this._parent.MV.Add(mVCasted);
                }
                IINS iNSCasted = item.As<IINS>();
                if ((iNSCasted != null))
                {
                    this._parent.INS.Add(iNSCasted);
                }
                IASG aSGCasted = item.As<IASG>();
                if ((aSGCasted != null))
                {
                    this._parent.ASG.Add(aSGCasted);
                }
                IWYE wYECasted = item.As<IWYE>();
                if ((wYECasted != null))
                {
                    this._parent.WYE.Add(wYECasted);
                }
                IDPStatus dPStatusCasted = item.As<IDPStatus>();
                if ((dPStatusCasted != null))
                {
                    this._parent.DPStatus.Add(dPStatusCasted);
                }
                IAnalogueValue analogueValueCasted = item.As<IAnalogueValue>();
                if ((analogueValueCasted != null))
                {
                    this._parent.AnalogueValue.Add(analogueValueCasted);
                }
                ICMV cMVCasted = item.As<ICMV>();
                if ((cMVCasted != null))
                {
                    this._parent.CMV.Add(cMVCasted);
                }
                IValWithTrans valWithTransCasted = item.As<IValWithTrans>();
                if ((valWithTransCasted != null))
                {
                    this._parent.ValWithTrans.Add(valWithTransCasted);
                }
                IBSControl bSControlCasted = item.As<IBSControl>();
                if ((bSControlCasted != null))
                {
                    this._parent.BSControl.Add(bSControlCasted);
                }
                IVector vectorCasted = item.As<IVector>();
                if ((vectorCasted != null))
                {
                    this._parent.Vector.Add(vectorCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.LN.Clear();
                this._parent.NamePlt.Clear();
                this._parent.LPL.Clear();
                this._parent.DPC.Clear();
                this._parent.ACT.Clear();
                this._parent.SPS.Clear();
                this._parent.BSC.Clear();
                this._parent.ISC.Clear();
                this._parent.SPC.Clear();
                this._parent.MV.Clear();
                this._parent.INS.Clear();
                this._parent.ASG.Clear();
                this._parent.WYE.Clear();
                this._parent.DPStatus.Clear();
                this._parent.AnalogueValue.Clear();
                this._parent.CMV.Clear();
                this._parent.ValWithTrans.Clear();
                this._parent.BSControl.Clear();
                this._parent.Vector.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.LN.Contains(item))
                {
                    return true;
                }
                if (this._parent.NamePlt.Contains(item))
                {
                    return true;
                }
                if (this._parent.LPL.Contains(item))
                {
                    return true;
                }
                if (this._parent.DPC.Contains(item))
                {
                    return true;
                }
                if (this._parent.ACT.Contains(item))
                {
                    return true;
                }
                if (this._parent.SPS.Contains(item))
                {
                    return true;
                }
                if (this._parent.BSC.Contains(item))
                {
                    return true;
                }
                if (this._parent.ISC.Contains(item))
                {
                    return true;
                }
                if (this._parent.SPC.Contains(item))
                {
                    return true;
                }
                if (this._parent.MV.Contains(item))
                {
                    return true;
                }
                if (this._parent.INS.Contains(item))
                {
                    return true;
                }
                if (this._parent.ASG.Contains(item))
                {
                    return true;
                }
                if (this._parent.WYE.Contains(item))
                {
                    return true;
                }
                if (this._parent.DPStatus.Contains(item))
                {
                    return true;
                }
                if (this._parent.AnalogueValue.Contains(item))
                {
                    return true;
                }
                if (this._parent.CMV.Contains(item))
                {
                    return true;
                }
                if (this._parent.ValWithTrans.Contains(item))
                {
                    return true;
                }
                if (this._parent.BSControl.Contains(item))
                {
                    return true;
                }
                if (this._parent.Vector.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> lNEnumerator = this._parent.LN.GetEnumerator();
                try
                {
                    for (
                    ; lNEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = lNEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    lNEnumerator.Dispose();
                }
                IEnumerator<IModelElement> namePltEnumerator = this._parent.NamePlt.GetEnumerator();
                try
                {
                    for (
                    ; namePltEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = namePltEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    namePltEnumerator.Dispose();
                }
                IEnumerator<IModelElement> lPLEnumerator = this._parent.LPL.GetEnumerator();
                try
                {
                    for (
                    ; lPLEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = lPLEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    lPLEnumerator.Dispose();
                }
                IEnumerator<IModelElement> dPCEnumerator = this._parent.DPC.GetEnumerator();
                try
                {
                    for (
                    ; dPCEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dPCEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dPCEnumerator.Dispose();
                }
                IEnumerator<IModelElement> aCTEnumerator = this._parent.ACT.GetEnumerator();
                try
                {
                    for (
                    ; aCTEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = aCTEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    aCTEnumerator.Dispose();
                }
                IEnumerator<IModelElement> sPSEnumerator = this._parent.SPS.GetEnumerator();
                try
                {
                    for (
                    ; sPSEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = sPSEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sPSEnumerator.Dispose();
                }
                IEnumerator<IModelElement> bSCEnumerator = this._parent.BSC.GetEnumerator();
                try
                {
                    for (
                    ; bSCEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bSCEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bSCEnumerator.Dispose();
                }
                IEnumerator<IModelElement> iSCEnumerator = this._parent.ISC.GetEnumerator();
                try
                {
                    for (
                    ; iSCEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = iSCEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    iSCEnumerator.Dispose();
                }
                IEnumerator<IModelElement> sPCEnumerator = this._parent.SPC.GetEnumerator();
                try
                {
                    for (
                    ; sPCEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = sPCEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sPCEnumerator.Dispose();
                }
                IEnumerator<IModelElement> mVEnumerator = this._parent.MV.GetEnumerator();
                try
                {
                    for (
                    ; mVEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = mVEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    mVEnumerator.Dispose();
                }
                IEnumerator<IModelElement> iNSEnumerator = this._parent.INS.GetEnumerator();
                try
                {
                    for (
                    ; iNSEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = iNSEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    iNSEnumerator.Dispose();
                }
                IEnumerator<IModelElement> aSGEnumerator = this._parent.ASG.GetEnumerator();
                try
                {
                    for (
                    ; aSGEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = aSGEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    aSGEnumerator.Dispose();
                }
                IEnumerator<IModelElement> wYEEnumerator = this._parent.WYE.GetEnumerator();
                try
                {
                    for (
                    ; wYEEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = wYEEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    wYEEnumerator.Dispose();
                }
                IEnumerator<IModelElement> dPStatusEnumerator = this._parent.DPStatus.GetEnumerator();
                try
                {
                    for (
                    ; dPStatusEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dPStatusEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dPStatusEnumerator.Dispose();
                }
                IEnumerator<IModelElement> analogueValueEnumerator = this._parent.AnalogueValue.GetEnumerator();
                try
                {
                    for (
                    ; analogueValueEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = analogueValueEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    analogueValueEnumerator.Dispose();
                }
                IEnumerator<IModelElement> cMVEnumerator = this._parent.CMV.GetEnumerator();
                try
                {
                    for (
                    ; cMVEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cMVEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cMVEnumerator.Dispose();
                }
                IEnumerator<IModelElement> valWithTransEnumerator = this._parent.ValWithTrans.GetEnumerator();
                try
                {
                    for (
                    ; valWithTransEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = valWithTransEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    valWithTransEnumerator.Dispose();
                }
                IEnumerator<IModelElement> bSControlEnumerator = this._parent.BSControl.GetEnumerator();
                try
                {
                    for (
                    ; bSControlEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bSControlEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bSControlEnumerator.Dispose();
                }
                IEnumerator<IModelElement> vectorEnumerator = this._parent.Vector.GetEnumerator();
                try
                {
                    for (
                    ; vectorEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = vectorEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    vectorEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDomainLN domainLNItem = item.As<IDomainLN>();
                if (((domainLNItem != null) 
                            && this._parent.LN.Remove(domainLNItem)))
                {
                    return true;
                }
                ILPL lPLItem = item.As<ILPL>();
                if (((lPLItem != null) 
                            && this._parent.NamePlt.Remove(lPLItem)))
                {
                    return true;
                }
                if (((lPLItem != null) 
                            && this._parent.LPL.Remove(lPLItem)))
                {
                    return true;
                }
                IDPC dPCItem = item.As<IDPC>();
                if (((dPCItem != null) 
                            && this._parent.DPC.Remove(dPCItem)))
                {
                    return true;
                }
                IACT aCTItem = item.As<IACT>();
                if (((aCTItem != null) 
                            && this._parent.ACT.Remove(aCTItem)))
                {
                    return true;
                }
                ISPS sPSItem = item.As<ISPS>();
                if (((sPSItem != null) 
                            && this._parent.SPS.Remove(sPSItem)))
                {
                    return true;
                }
                IBSC bSCItem = item.As<IBSC>();
                if (((bSCItem != null) 
                            && this._parent.BSC.Remove(bSCItem)))
                {
                    return true;
                }
                IISC iSCItem = item.As<IISC>();
                if (((iSCItem != null) 
                            && this._parent.ISC.Remove(iSCItem)))
                {
                    return true;
                }
                ISPC sPCItem = item.As<ISPC>();
                if (((sPCItem != null) 
                            && this._parent.SPC.Remove(sPCItem)))
                {
                    return true;
                }
                IMV mVItem = item.As<IMV>();
                if (((mVItem != null) 
                            && this._parent.MV.Remove(mVItem)))
                {
                    return true;
                }
                IINS iNSItem = item.As<IINS>();
                if (((iNSItem != null) 
                            && this._parent.INS.Remove(iNSItem)))
                {
                    return true;
                }
                IASG aSGItem = item.As<IASG>();
                if (((aSGItem != null) 
                            && this._parent.ASG.Remove(aSGItem)))
                {
                    return true;
                }
                IWYE wYEItem = item.As<IWYE>();
                if (((wYEItem != null) 
                            && this._parent.WYE.Remove(wYEItem)))
                {
                    return true;
                }
                IDPStatus dPStatusItem = item.As<IDPStatus>();
                if (((dPStatusItem != null) 
                            && this._parent.DPStatus.Remove(dPStatusItem)))
                {
                    return true;
                }
                IAnalogueValue analogueValueItem = item.As<IAnalogueValue>();
                if (((analogueValueItem != null) 
                            && this._parent.AnalogueValue.Remove(analogueValueItem)))
                {
                    return true;
                }
                ICMV cMVItem = item.As<ICMV>();
                if (((cMVItem != null) 
                            && this._parent.CMV.Remove(cMVItem)))
                {
                    return true;
                }
                IValWithTrans valWithTransItem = item.As<IValWithTrans>();
                if (((valWithTransItem != null) 
                            && this._parent.ValWithTrans.Remove(valWithTransItem)))
                {
                    return true;
                }
                IBSControl bSControlItem = item.As<IBSControl>();
                if (((bSControlItem != null) 
                            && this._parent.BSControl.Remove(bSControlItem)))
                {
                    return true;
                }
                IVector vectorItem = item.As<IVector>();
                if (((vectorItem != null) 
                            && this._parent.Vector.Remove(vectorItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.LN).Concat(this._parent.NamePlt).Concat(this._parent.LPL).Concat(this._parent.DPC).Concat(this._parent.ACT).Concat(this._parent.SPS).Concat(this._parent.BSC).Concat(this._parent.ISC).Concat(this._parent.SPC).Concat(this._parent.MV).Concat(this._parent.INS).Concat(this._parent.ASG).Concat(this._parent.WYE).Concat(this._parent.DPStatus).Concat(this._parent.AnalogueValue).Concat(this._parent.CMV).Concat(this._parent.ValWithTrans).Concat(this._parent.BSControl).Concat(this._parent.Vector).GetEnumerator();
            }
        }
    }
}

